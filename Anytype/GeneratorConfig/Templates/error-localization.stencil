import Foundation
import ProtobufMessages

{% for type in types.types %}
{% if type.localName == "Error" %}
extension {{ type.name }}: LocalizedError {
    public var errorDescription: String? {
        let localizeError = localizeError()
        if localizeError.isNotEmpty {
            return localizeError
        }
        return "Error: \(description_p) (\(code))"
    }

    private func localizeError() -> String {
        switch code {
        {% for variable in type.allVariables %}
        {% if variable.name == "code" %}
            {% for case in variable.type.cases %}
            case .{{ case.name }}:
                {% if case.name == "null" or case.name == "unknownError" or case.name == "UNRECOGNIZED" %}
                return ""
                {% else %}
                {% set locKey %}{{ type.name | replace:"Anytype_Rpc.","" | replace:".Response.Error","" }}.{{ case.name }}{% endset %}
                return String(localized: "{{ locKey }}", defaultValue: "", table: "LocalizableError")
                    .checkValue(key: "{{ locKey }}")
                {% endif %}
            {% endfor %}
        {% endif %}
        {% endfor %}        
        }
    }
}

{% endif %}
{% endfor %}

private extension String {
    // If default value is emplty, Apple return key. But we expect that localziation return empty string
    func checkValue(key: String) -> String {
        if self == key {
            return ""
        } else {
            return self
        }
    }
}