name: Anytype

permissions:
  contents: 'write'

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      build_anytype_app:
        description: "Build Anytype Release"
        required: false
        default: "false"
        type: boolean
      build_any_app:
        description: "Build Any App Release"
        required: false
        default: "false"
        type: boolean

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  main:
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
           fetch-depth: 0

      - name: Install SSH key for access to repository
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_ACCESS_KEY }}

      - name: Update git config
        uses: ./.github/actions/update-git-config

      - name: Prepare deps
        uses: ./.github/actions/prepare-deps

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: '16.4'

      - name: Download Middleware
        run: make setup-middle-ci
        env:
          MIDDLEWARE_TOKEN: ${{ secrets.MIDDLEWARE_TOKEN }}

      - name: License Checks
        uses: ./.github/actions/license-checks

      - name: Run unit tests
        run: bundle exec fastlane tests
        continue-on-error: true
        env:
          SLACK_URL_BUILD_TESTS: ${{ secrets.SLACK_URL_BUILD_TESTS }}
          FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 900
          FASTLANE_XCODE_LIST_TIMEOUT: 900

      - name: Build and upload Anytype to Testflight
        if: ${{ inputs.build_anytype_app == true }}
        run: |
          export LC_ALL=en_US.UTF-8
          export LANG=en_US.UTF-8
          bundle exec fastlane release_anytype
        env:
          MATCH_GIT_PRIVATE_KEY: ${{ secrets.SSH_KEY_FASTLANE_MATCH }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          LINEAR_TOKEN: ${{ secrets.LINEAR_TOKEN }}
          AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY }}
          FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 900
          FASTLANE_XCODE_LIST_TIMEOUT: 900

      - name: Summary Anytype
        if: ${{ inputs.build_anytype_app == true }}
        run: echo "${{ env.FASTLANE_GITHUB_SUMMARY }}" >> $GITHUB_STEP_SUMMARY

      - name: Build and upload Any App to Testflight
        if: ${{ inputs.build_any_app == true }}
        run: |
          export LC_ALL=en_US.UTF-8
          export LANG=en_US.UTF-8
          bundle exec fastlane release_anyapp
        env:
          MATCH_GIT_PRIVATE_KEY: ${{ secrets.SSH_KEY_FASTLANE_MATCH }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          LINEAR_TOKEN: ${{ secrets.LINEAR_TOKEN }}
          AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY }}
          OPENAI_TOKEN: ${{ secrets.OPENAI_TOKEN }}
          AI_ENDPOINT: ${{ secrets.AI_ENDPOINT }}
          AI_MODEL: ${{ secrets.AI_MODEL }}
          ANY_APP_MEMBERSHIP_TIER_SECRET: ${{ secrets.ANY_APP_MEMBERSHIP_TIER_SECRET }}
          JOIN_STREAM_URL: ${{ secrets.JOIN_STREAM_URL }}
          FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 900
          FASTLANE_XCODE_LIST_TIMEOUT: 900

      - name: Summary Any App
        if: ${{ inputs.build_any_app == true }}
        run: echo "${{ env.FASTLANE_GITHUB_SUMMARY }}" >> $GITHUB_STEP_SUMMARY

      - name: Send Slack Notification
        if: always()
        uses: ./.github/actions/send-slack-message
        with:
          success_message: "Release build success\\n${{ env.FASTLANE_SLACK_SUMMARY }}"
          error_message: "Release build finished with error"
          status: ${{ job.status }}
          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack_map: ${{ vars.SLACK_MAP }}