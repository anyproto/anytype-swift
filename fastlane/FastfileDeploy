default_platform(:ios)

platform :ios do

  lane :dev do
    deploy(
      release: false
    )
  end

  lane :release do
    deploy(
      release: true
    )
  end

  # Private lanes

  private_lane :deploy do |options| 
    xcodeproj = ENV["APP_PROJECT"]
    current_branch = git_branch
    temp_branch = "#{current_branch}-temp"

    setup_ci
    match(readonly: true)
    
    ensure_git_status_clean(
      show_uncommitted_changes: true
    )

    sh("git checkout -b " + temp_branch)

    build_number = increment_build_number(xcodeproj: xcodeproj, skip_info_plist: true)
    version = get_version_number(xcodeproj: xcodeproj, target: ENV["APP_TARGET"])
    old_tag_name = sh("git describe --first-parent --tags --abbrev=0").chomp

    commit_version_bump(
      message: "Bump version #{version}(#{build_number})",
      xcodeproj: xcodeproj,
      no_verify: true
    )

    if !options[:release] 
      add_badge(
        shield: "#{version}-#{build_number}-blue",
        no_badge: true
      )
    end

    set_amplitude_api_key_to_info_plist
    set_sentry_dsn_to_info_plist
    
    
    build_app(
      scheme: ENV["APP_TARGET"], 
      configuration: options[:release] ? ENV["APP_CONF_RELEASE"] : ENV["APP_CONF_DEVELOP"],
      include_symbols: true,
      use_system_scm: true,
      archive_path: "./build/archive",
      output_directory: "./build/result",
      xcargs: ENV['BUILD_OPTIONS'],
      cloned_source_packages_path: ENV['SPM_DERIVED_DATA']
    )

    # Reset icon/info.plist changes
    reset_git_repo(skip_clean: true)

    sh("git checkout " + current_branch)

    git_pull

    sh("git merge --ff --no-verify " + temp_branch)
    sh("git branch -d " + temp_branch)

    prefix = options[:release] ? "release" : "dev"
    tag_name = "#{prefix}/#{version}/#{build_number}"
    add_git_tag(
      tag: tag_name,
      force: true
    )

    push_to_git_remote(no_verify: true)

    if current_branch == "develop" || current_branch == "release"
      appInfo = options[:release] ? "Release" : "Dev"
      add_linear_comment(
        from_tag: old_tag_name,
        to_tag: tag_name,
        comment: "Implemented in **#{appInfo}** `#{version}(#{build_number})`. This comment was created automatically."
      )
    end
    
    set_api_key
    upload_to_testflight(skip_waiting_for_build_processing: true)

    upload_dsyms_to_sentry

    dsym_paths = []
    Dir.chdir("..") do
      dsym_paths = Dir["./build/result/*.dSYM.zip"]
    end

  end
  
  private_lane :upload_dsyms_to_sentry do |options|

    sentry_upload_dif(
      url: 'https://sentry.anytype.io',
      auth_token: ENV["SENTRY_AUTH_TOKEN"],
      org_slug: 'anytype',
      project_slug: 'ios',
      path: "./build/result"
    )
  end

end
