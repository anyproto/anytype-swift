// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Model_Notification {
    public struct Import: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var processID: String = String()

    public var errorCode: Anytype_Model_Import.ErrorCode = .null

    public var importType: Anytype_Model_Import.TypeEnum = .notion

    public var spaceID: String = String()

    public var name: String = String()

    public var spaceName: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }    
}

extension Anytype_Model_Notification.Import: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Notification.protoMessageName + ".Import"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}processId\0\u{1}errorCode\0\u{1}importType\0\u{1}spaceId\0\u{1}name\0\u{1}spaceName\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.processID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.errorCode) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.importType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.spaceID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.spaceName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.processID.isEmpty {
      try visitor.visitSingularStringField(value: self.processID, fieldNumber: 1)
    }
    if self.errorCode != .null {
      try visitor.visitSingularEnumField(value: self.errorCode, fieldNumber: 2)
    }
    if self.importType != .notion {
      try visitor.visitSingularEnumField(value: self.importType, fieldNumber: 3)
    }
    if !self.spaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceID, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    if !self.spaceName.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceName, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Notification.Import, rhs: Anytype_Model_Notification.Import) -> Bool {
    if lhs.processID != rhs.processID {return false}
    if lhs.errorCode != rhs.errorCode {return false}
    if lhs.importType != rhs.importType {return false}
    if lhs.spaceID != rhs.spaceID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.spaceName != rhs.spaceName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
