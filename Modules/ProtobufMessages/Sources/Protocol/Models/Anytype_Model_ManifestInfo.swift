// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public struct Anytype_Model_ManifestInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var schema: String = String()

  public var id: String = String()

  public var name: String = String()

  public var author: String = String()

  public var license: String = String()

  public var title: String = String()

  public var description_p: String = String()

  public var screenshots: [String] = []

  public var downloadLink: String = String()

  public var fileSize: Int32 = 0

  public var categories: [String] = []

  public var language: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

extension Anytype_Model_ManifestInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ManifestInfo"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{5}schema\0$schema\0\u{1}id\0\u{1}name\0\u{1}author\0\u{1}license\0\u{1}title\0\u{1}description\0\u{1}screenshots\0\u{1}downloadLink\0\u{1}fileSize\0\u{1}categories\0\u{1}language\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.schema) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.author) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.license) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 8: try { try decoder.decodeRepeatedStringField(value: &self.screenshots) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.downloadLink) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.fileSize) }()
      case 11: try { try decoder.decodeRepeatedStringField(value: &self.categories) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.language) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.schema.isEmpty {
      try visitor.visitSingularStringField(value: self.schema, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.author.isEmpty {
      try visitor.visitSingularStringField(value: self.author, fieldNumber: 4)
    }
    if !self.license.isEmpty {
      try visitor.visitSingularStringField(value: self.license, fieldNumber: 5)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 6)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 7)
    }
    if !self.screenshots.isEmpty {
      try visitor.visitRepeatedStringField(value: self.screenshots, fieldNumber: 8)
    }
    if !self.downloadLink.isEmpty {
      try visitor.visitSingularStringField(value: self.downloadLink, fieldNumber: 9)
    }
    if self.fileSize != 0 {
      try visitor.visitSingularInt32Field(value: self.fileSize, fieldNumber: 10)
    }
    if !self.categories.isEmpty {
      try visitor.visitRepeatedStringField(value: self.categories, fieldNumber: 11)
    }
    if !self.language.isEmpty {
      try visitor.visitSingularStringField(value: self.language, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_ManifestInfo, rhs: Anytype_Model_ManifestInfo) -> Bool {
    if lhs.schema != rhs.schema {return false}
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.author != rhs.author {return false}
    if lhs.license != rhs.license {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.screenshots != rhs.screenshots {return false}
    if lhs.downloadLink != rhs.downloadLink {return false}
    if lhs.fileSize != rhs.fileSize {return false}
    if lhs.categories != rhs.categories {return false}
    if lhs.language != rhs.language {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
