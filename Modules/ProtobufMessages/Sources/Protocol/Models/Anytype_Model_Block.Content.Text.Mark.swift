// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Model_Block.Content.Text {
    public struct Mark: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// range of symbols to apply this mark. From(symbol) To(symbol)
        public var range: Anytype_Model_Range {
          get {return _range ?? Anytype_Model_Range()}
          set {_range = newValue}
        }
        /// Returns true if `range` has been explicitly set.
        public var hasRange: Bool {return self._range != nil}
        /// Clears the value of `range`. Subsequent reads from it will return its default value.
        public mutating func clearRange() {self._range = nil}

        public var type: Anytype_Model_Block.Content.Text.Mark.TypeEnum = .strikethrough

        /// link, color, etc
        public var param: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public enum TypeEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
          public typealias RawValue = Int
          case strikethrough // = 0
          case keyboard // = 1
          case italic // = 2
          case bold // = 3
          case underscored // = 4
          case link // = 5
          case textColor // = 6
          case backgroundColor // = 7
          case mention // = 8
          case emoji // = 9
          case object // = 10
          case UNRECOGNIZED(Int)

          public init() {
            self = .strikethrough
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .strikethrough
            case 1: self = .keyboard
            case 2: self = .italic
            case 3: self = .bold
            case 4: self = .underscored
            case 5: self = .link
            case 6: self = .textColor
            case 7: self = .backgroundColor
            case 8: self = .mention
            case 9: self = .emoji
            case 10: self = .object
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .strikethrough: return 0
            case .keyboard: return 1
            case .italic: return 2
            case .bold: return 3
            case .underscored: return 4
            case .link: return 5
            case .textColor: return 6
            case .backgroundColor: return 7
            case .mention: return 8
            case .emoji: return 9
            case .object: return 10
            case .UNRECOGNIZED(let i): return i
            }
          }

          // The compiler won't synthesize support with the UNRECOGNIZED case.
          public static let allCases: [Anytype_Model_Block.Content.Text.Mark.TypeEnum] = [
            .strikethrough,
            .keyboard,
            .italic,
            .bold,
            .underscored,
            .link,
            .textColor,
            .backgroundColor,
            .mention,
            .emoji,
            .object,
          ]

        }

        public init() {}

        fileprivate var _range: Anytype_Model_Range? = nil
      }    
}

extension Anytype_Model_Block.Content.Text.Mark: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.Text.protoMessageName + ".Mark"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}range\0\u{1}type\0\u{1}param\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._range) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.param) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._range {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.type != .strikethrough {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.param.isEmpty {
      try visitor.visitSingularStringField(value: self.param, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.Text.Mark, rhs: Anytype_Model_Block.Content.Text.Mark) -> Bool {
    if lhs._range != rhs._range {return false}
    if lhs.type != rhs.type {return false}
    if lhs.param != rhs.param {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Text.Mark.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0Strikethrough\0\u{1}Keyboard\0\u{1}Italic\0\u{1}Bold\0\u{1}Underscored\0\u{1}Link\0\u{1}TextColor\0\u{1}BackgroundColor\0\u{1}Mention\0\u{1}Emoji\0\u{1}Object\0")
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
