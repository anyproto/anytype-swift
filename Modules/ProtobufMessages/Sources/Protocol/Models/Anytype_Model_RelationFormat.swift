// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

/// RelationFormat describes how the underlying data is stored in the google.protobuf.Value and how it should be validated/sanitized
public enum Anytype_Model_RelationFormat: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  /// string
  case longtext // = 0

  /// string, usually short enough. May be truncated in the future
  case shorttext // = 1

  /// double
  case number // = 2

  /// string or list of string(len==1)
  case status // = 3

  /// list of string (choose multiple from a list)
  case tag // = 11

  /// float64(pb.Value doesn't have int64) or the string
  case date // = 4

  /// relation can has objects of specific types: file, image, audio, video
  case file // = 5

  /// boolean
  case checkbox // = 6

  /// string with sanity check
  case url // = 7

  /// string with sanity check
  case email // = 8

  /// string with sanity check
  case phone // = 9

  /// one emoji, can contains multiple utf-8 symbols
  case emoji // = 10

  /// relation can has objectType to specify objectType
  case object // = 100

  /// base64-encoded relation pb model
  case relations // = 101
  case UNRECOGNIZED(Int)

  public init() {
    self = .longtext
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .longtext
    case 1: self = .shorttext
    case 2: self = .number
    case 3: self = .status
    case 4: self = .date
    case 5: self = .file
    case 6: self = .checkbox
    case 7: self = .url
    case 8: self = .email
    case 9: self = .phone
    case 10: self = .emoji
    case 11: self = .tag
    case 100: self = .object
    case 101: self = .relations
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .longtext: return 0
    case .shorttext: return 1
    case .number: return 2
    case .status: return 3
    case .date: return 4
    case .file: return 5
    case .checkbox: return 6
    case .url: return 7
    case .email: return 8
    case .phone: return 9
    case .emoji: return 10
    case .tag: return 11
    case .object: return 100
    case .relations: return 101
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Anytype_Model_RelationFormat] = [
    .longtext,
    .shorttext,
    .number,
    .status,
    .tag,
    .date,
    .file,
    .checkbox,
    .url,
    .email,
    .phone,
    .emoji,
    .object,
    .relations,
  ]

}

extension Anytype_Model_RelationFormat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0longtext\0\u{1}shorttext\0\u{1}number\0\u{1}status\0\u{1}date\0\u{1}file\0\u{1}checkbox\0\u{1}url\0\u{1}email\0\u{1}phone\0\u{1}emoji\0\u{1}tag\0\u{2}Y\u{1}object\0\u{1}relations\0")
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
