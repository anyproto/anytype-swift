// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Model_Account.Auth {
    public struct AppInfo: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var appHash: String = String()

      /// either from process or specified manually when creating
      public var appName: String = String()

      public var appKey: String = String()

      public var createdAt: Int64 = 0

      public var expireAt: Int64 = 0

      public var scope: Anytype_Model_Account.Auth.LocalApiScope = .limited

      public var isActive: Bool = false

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }    
}

extension Anytype_Model_Account.Auth.AppInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Account.Auth.protoMessageName + ".AppInfo"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}appHash\0\u{1}appName\0\u{2}\u{2}appKey\0\u{1}createdAt\0\u{1}expireAt\0\u{1}scope\0\u{1}isActive\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appHash) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.appKey) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.createdAt) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.expireAt) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.scope) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.isActive) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appHash.isEmpty {
      try visitor.visitSingularStringField(value: self.appHash, fieldNumber: 1)
    }
    if !self.appName.isEmpty {
      try visitor.visitSingularStringField(value: self.appName, fieldNumber: 2)
    }
    if !self.appKey.isEmpty {
      try visitor.visitSingularStringField(value: self.appKey, fieldNumber: 4)
    }
    if self.createdAt != 0 {
      try visitor.visitSingularInt64Field(value: self.createdAt, fieldNumber: 5)
    }
    if self.expireAt != 0 {
      try visitor.visitSingularInt64Field(value: self.expireAt, fieldNumber: 6)
    }
    if self.scope != .limited {
      try visitor.visitSingularEnumField(value: self.scope, fieldNumber: 7)
    }
    if self.isActive != false {
      try visitor.visitSingularBoolField(value: self.isActive, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Account.Auth.AppInfo, rhs: Anytype_Model_Account.Auth.AppInfo) -> Bool {
    if lhs.appHash != rhs.appHash {return false}
    if lhs.appName != rhs.appName {return false}
    if lhs.appKey != rhs.appKey {return false}
    if lhs.createdAt != rhs.createdAt {return false}
    if lhs.expireAt != rhs.expireAt {return false}
    if lhs.scope != rhs.scope {return false}
    if lhs.isActive != rhs.isActive {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
