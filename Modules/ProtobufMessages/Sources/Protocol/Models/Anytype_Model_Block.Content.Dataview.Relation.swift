// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Model_Block.Content.Dataview {
    public struct Relation: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var key: String = String()

        public var isVisible: Bool = false

        /// the displayed column % calculated based on other visible relations
        public var width: Int32 = 0

        /// bool isReadOnly = 4; // deprecated
        public var dateIncludeTime: Bool = false

        /// deprecated
        public var timeFormat: Anytype_Model_Block.Content.Dataview.Relation.TimeFormat = .format12

        /// deprecated
        public var dateFormat: Anytype_Model_Block.Content.Dataview.Relation.DateFormat = .monthAbbrBeforeDay

        public var formula: Anytype_Model_Block.Content.Dataview.Relation.FormulaType = .none

        public var align: Anytype_Model_Block.Align = .left

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public enum DateFormat: SwiftProtobuf.Enum, Swift.CaseIterable {
          public typealias RawValue = Int

          /// Jul 30, 2020
          case monthAbbrBeforeDay // = 0

          /// 30 Jul 2020
          case monthAbbrAfterDay // = 1

          /// 30/07/2020
          case short // = 2

          /// 07/30/2020
          case shortUs // = 3

          /// 2020-07-30
          case iso // = 4
          case UNRECOGNIZED(Int)

          public init() {
            self = .monthAbbrBeforeDay
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .monthAbbrBeforeDay
            case 1: self = .monthAbbrAfterDay
            case 2: self = .short
            case 3: self = .shortUs
            case 4: self = .iso
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .monthAbbrBeforeDay: return 0
            case .monthAbbrAfterDay: return 1
            case .short: return 2
            case .shortUs: return 3
            case .iso: return 4
            case .UNRECOGNIZED(let i): return i
            }
          }

          // The compiler won't synthesize support with the UNRECOGNIZED case.
          public static let allCases: [Anytype_Model_Block.Content.Dataview.Relation.DateFormat] = [
            .monthAbbrBeforeDay,
            .monthAbbrAfterDay,
            .short,
            .shortUs,
            .iso,
          ]

        }

        public enum TimeFormat: SwiftProtobuf.Enum, Swift.CaseIterable {
          public typealias RawValue = Int
          case format12 // = 0
          case format24 // = 1
          case UNRECOGNIZED(Int)

          public init() {
            self = .format12
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .format12
            case 1: self = .format24
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .format12: return 0
            case .format24: return 1
            case .UNRECOGNIZED(let i): return i
            }
          }

          // The compiler won't synthesize support with the UNRECOGNIZED case.
          public static let allCases: [Anytype_Model_Block.Content.Dataview.Relation.TimeFormat] = [
            .format12,
            .format24,
          ]

        }

        public enum FormulaType: SwiftProtobuf.Enum, Swift.CaseIterable {
          public typealias RawValue = Int
          case none // = 0
          case count // = 1
          case countValue // = 2
          case countDistinct // = 3
          case countEmpty // = 4
          case countNotEmpty // = 5
          case percentEmpty // = 6
          case percentNotEmpty // = 7
          case mathSum // = 8
          case mathAverage // = 9
          case mathMedian // = 10
          case mathMin // = 11
          case mathMax // = 12
          case range // = 13
          case UNRECOGNIZED(Int)

          public init() {
            self = .none
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .none
            case 1: self = .count
            case 2: self = .countValue
            case 3: self = .countDistinct
            case 4: self = .countEmpty
            case 5: self = .countNotEmpty
            case 6: self = .percentEmpty
            case 7: self = .percentNotEmpty
            case 8: self = .mathSum
            case 9: self = .mathAverage
            case 10: self = .mathMedian
            case 11: self = .mathMin
            case 12: self = .mathMax
            case 13: self = .range
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .none: return 0
            case .count: return 1
            case .countValue: return 2
            case .countDistinct: return 3
            case .countEmpty: return 4
            case .countNotEmpty: return 5
            case .percentEmpty: return 6
            case .percentNotEmpty: return 7
            case .mathSum: return 8
            case .mathAverage: return 9
            case .mathMedian: return 10
            case .mathMin: return 11
            case .mathMax: return 12
            case .range: return 13
            case .UNRECOGNIZED(let i): return i
            }
          }

          // The compiler won't synthesize support with the UNRECOGNIZED case.
          public static let allCases: [Anytype_Model_Block.Content.Dataview.Relation.FormulaType] = [
            .none,
            .count,
            .countValue,
            .countDistinct,
            .countEmpty,
            .countNotEmpty,
            .percentEmpty,
            .percentNotEmpty,
            .mathSum,
            .mathAverage,
            .mathMedian,
            .mathMin,
            .mathMax,
            .range,
          ]

        }

        public init() {}
      }    
}

extension Anytype_Model_Block.Content.Dataview.Relation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.Dataview.protoMessageName + ".Relation"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}key\0\u{1}isVisible\0\u{1}width\0\u{2}\u{2}dateIncludeTime\0\u{1}timeFormat\0\u{1}dateFormat\0\u{1}formula\0\u{1}align\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isVisible) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.width) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.dateIncludeTime) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.timeFormat) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.dateFormat) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.formula) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.align) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if self.isVisible != false {
      try visitor.visitSingularBoolField(value: self.isVisible, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 3)
    }
    if self.dateIncludeTime != false {
      try visitor.visitSingularBoolField(value: self.dateIncludeTime, fieldNumber: 5)
    }
    if self.timeFormat != .format12 {
      try visitor.visitSingularEnumField(value: self.timeFormat, fieldNumber: 6)
    }
    if self.dateFormat != .monthAbbrBeforeDay {
      try visitor.visitSingularEnumField(value: self.dateFormat, fieldNumber: 7)
    }
    if self.formula != .none {
      try visitor.visitSingularEnumField(value: self.formula, fieldNumber: 8)
    }
    if self.align != .left {
      try visitor.visitSingularEnumField(value: self.align, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.Dataview.Relation, rhs: Anytype_Model_Block.Content.Dataview.Relation) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.isVisible != rhs.isVisible {return false}
    if lhs.width != rhs.width {return false}
    if lhs.dateIncludeTime != rhs.dateIncludeTime {return false}
    if lhs.timeFormat != rhs.timeFormat {return false}
    if lhs.dateFormat != rhs.dateFormat {return false}
    if lhs.formula != rhs.formula {return false}
    if lhs.align != rhs.align {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Dataview.Relation.DateFormat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0MonthAbbrBeforeDay\0\u{1}MonthAbbrAfterDay\0\u{1}Short\0\u{1}ShortUS\0\u{1}ISO\0")
}

extension Anytype_Model_Block.Content.Dataview.Relation.TimeFormat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0Format12\0\u{1}Format24\0")
}

extension Anytype_Model_Block.Content.Dataview.Relation.FormulaType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0None\0\u{1}Count\0\u{1}CountValue\0\u{1}CountDistinct\0\u{1}CountEmpty\0\u{1}CountNotEmpty\0\u{1}PercentEmpty\0\u{1}PercentNotEmpty\0\u{1}MathSum\0\u{1}MathAverage\0\u{1}MathMedian\0\u{1}MathMin\0\u{1}MathMax\0\u{1}Range\0")
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
