// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public struct Anytype_Model_Relation: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// Key under which the value is stored in the map. Must be unique for the object type.
  /// It usually auto-generated bsonid, but also may be something human-readable in case of prebuilt types.
  public var key: String {
    get {return _storage._key}
    set {_uniqueStorage()._key = newValue}
  }

  /// format of the underlying data
  public var format: Anytype_Model_RelationFormat {
    get {return _storage._format}
    set {_uniqueStorage()._format = newValue}
  }

  /// name to show (can be localized for bundled types)
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var defaultValue: SwiftProtobuf.Google_Protobuf_Value {
    get {return _storage._defaultValue ?? SwiftProtobuf.Google_Protobuf_Value()}
    set {_uniqueStorage()._defaultValue = newValue}
  }
  /// Returns true if `defaultValue` has been explicitly set.
  public var hasDefaultValue: Bool {return _storage._defaultValue != nil}
  /// Clears the value of `defaultValue`. Subsequent reads from it will return its default value.
  public mutating func clearDefaultValue() {_uniqueStorage()._defaultValue = nil}

  /// where the data is stored
  public var dataSource: Anytype_Model_Relation.DataSource {
    get {return _storage._dataSource}
    set {_uniqueStorage()._dataSource = newValue}
  }

  /// internal, not displayed to user (e.g. coverX, coverY)
  public var hidden: Bool {
    get {return _storage._hidden}
    set {_uniqueStorage()._hidden = newValue}
  }

  /// value not editable by user tobe renamed to readonlyValue
  public var readOnly: Bool {
    get {return _storage._readOnly}
    set {_uniqueStorage()._readOnly = newValue}
  }

  /// relation metadata, eg name and format is not editable by user
  public var readOnlyRelation: Bool {
    get {return _storage._readOnlyRelation}
    set {_uniqueStorage()._readOnlyRelation = newValue}
  }

  /// allow multiple values (stored in pb list)
  public var multi: Bool {
    get {return _storage._multi}
    set {_uniqueStorage()._multi = newValue}
  }

  /// URL of object type, empty to allow link to any object
  public var objectTypes: [String] {
    get {return _storage._objectTypes}
    set {_uniqueStorage()._objectTypes = newValue}
  }

  /// index 10, 11 was used in internal-only builds. Can be reused, but may break some test accounts
  public var selectDict: [Anytype_Model_Relation.Option] {
    get {return _storage._selectDict}
    set {_uniqueStorage()._selectDict = newValue}
  }

  /// max number of values can be set for this relation. 0 means no limit. 1 means the value can be stored in non-repeated field
  public var maxCount: Int32 {
    get {return _storage._maxCount}
    set {_uniqueStorage()._maxCount = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// on-store fields, injected only locally
  public var scope: Anytype_Model_Relation.Scope {
    get {return _storage._scope}
    set {_uniqueStorage()._scope = newValue}
  }

  /// creator profile id
  public var creator: String {
    get {return _storage._creator}
    set {_uniqueStorage()._creator = newValue}
  }

  /// revision of system relation. Used to check if we should change relation content or not
  public var revision: Int64 {
    get {return _storage._revision}
    set {_uniqueStorage()._revision = newValue}
  }

  /// indicates whether value of relation with date format should be processed with seconds precision
  public var includeTime: Bool {
    get {return _storage._includeTime}
    set {_uniqueStorage()._includeTime = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

extension Anytype_Model_Relation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Relation"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}key\0\u{1}format\0\u{1}name\0\u{1}defaultValue\0\u{1}dataSource\0\u{1}hidden\0\u{1}readOnly\0\u{1}multi\0\u{1}objectTypes\0\u{2}\u{3}selectDict\0\u{1}maxCount\0\u{1}description\0\u{1}readOnlyRelation\0\u{2}\u{5}scope\0\u{1}creator\0\u{1}revision\0\u{1}includeTime\0\u{2}M\u{1}id\0")

  fileprivate class _StorageClass {
    var _id: String = String()
    var _key: String = String()
    var _format: Anytype_Model_RelationFormat = .longtext
    var _name: String = String()
    var _defaultValue: SwiftProtobuf.Google_Protobuf_Value? = nil
    var _dataSource: Anytype_Model_Relation.DataSource = .details
    var _hidden: Bool = false
    var _readOnly: Bool = false
    var _readOnlyRelation: Bool = false
    var _multi: Bool = false
    var _objectTypes: [String] = []
    var _selectDict: [Anytype_Model_Relation.Option] = []
    var _maxCount: Int32 = 0
    var _description_p: String = String()
    var _scope: Anytype_Model_Relation.Scope = .object
    var _creator: String = String()
    var _revision: Int64 = 0
    var _includeTime: Bool = false

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _key = source._key
      _format = source._format
      _name = source._name
      _defaultValue = source._defaultValue
      _dataSource = source._dataSource
      _hidden = source._hidden
      _readOnly = source._readOnly
      _readOnlyRelation = source._readOnlyRelation
      _multi = source._multi
      _objectTypes = source._objectTypes
      _selectDict = source._selectDict
      _maxCount = source._maxCount
      _description_p = source._description_p
      _scope = source._scope
      _creator = source._creator
      _revision = source._revision
      _includeTime = source._includeTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._key) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._format) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._defaultValue) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._dataSource) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._hidden) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._readOnly) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._multi) }()
        case 9: try { try decoder.decodeRepeatedStringField(value: &_storage._objectTypes) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._selectDict) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._maxCount) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._readOnlyRelation) }()
        case 20: try { try decoder.decodeSingularEnumField(value: &_storage._scope) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._creator) }()
        case 22: try { try decoder.decodeSingularInt64Field(value: &_storage._revision) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._includeTime) }()
        case 100: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._key.isEmpty {
        try visitor.visitSingularStringField(value: _storage._key, fieldNumber: 1)
      }
      if _storage._format != .longtext {
        try visitor.visitSingularEnumField(value: _storage._format, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      try { if let v = _storage._defaultValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._dataSource != .details {
        try visitor.visitSingularEnumField(value: _storage._dataSource, fieldNumber: 5)
      }
      if _storage._hidden != false {
        try visitor.visitSingularBoolField(value: _storage._hidden, fieldNumber: 6)
      }
      if _storage._readOnly != false {
        try visitor.visitSingularBoolField(value: _storage._readOnly, fieldNumber: 7)
      }
      if _storage._multi != false {
        try visitor.visitSingularBoolField(value: _storage._multi, fieldNumber: 8)
      }
      if !_storage._objectTypes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._objectTypes, fieldNumber: 9)
      }
      if !_storage._selectDict.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._selectDict, fieldNumber: 12)
      }
      if _storage._maxCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxCount, fieldNumber: 13)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 14)
      }
      if _storage._readOnlyRelation != false {
        try visitor.visitSingularBoolField(value: _storage._readOnlyRelation, fieldNumber: 15)
      }
      if _storage._scope != .object {
        try visitor.visitSingularEnumField(value: _storage._scope, fieldNumber: 20)
      }
      if !_storage._creator.isEmpty {
        try visitor.visitSingularStringField(value: _storage._creator, fieldNumber: 21)
      }
      if _storage._revision != 0 {
        try visitor.visitSingularInt64Field(value: _storage._revision, fieldNumber: 22)
      }
      if _storage._includeTime != false {
        try visitor.visitSingularBoolField(value: _storage._includeTime, fieldNumber: 23)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 100)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Relation, rhs: Anytype_Model_Relation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._format != rhs_storage._format {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._defaultValue != rhs_storage._defaultValue {return false}
        if _storage._dataSource != rhs_storage._dataSource {return false}
        if _storage._hidden != rhs_storage._hidden {return false}
        if _storage._readOnly != rhs_storage._readOnly {return false}
        if _storage._readOnlyRelation != rhs_storage._readOnlyRelation {return false}
        if _storage._multi != rhs_storage._multi {return false}
        if _storage._objectTypes != rhs_storage._objectTypes {return false}
        if _storage._selectDict != rhs_storage._selectDict {return false}
        if _storage._maxCount != rhs_storage._maxCount {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._scope != rhs_storage._scope {return false}
        if _storage._creator != rhs_storage._creator {return false}
        if _storage._revision != rhs_storage._revision {return false}
        if _storage._includeTime != rhs_storage._includeTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
