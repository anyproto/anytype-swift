// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Model_Block.Content.Dataview {
    public struct Sort: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var relationKey: String = String()

        public var type: Anytype_Model_Block.Content.Dataview.Sort.TypeEnum = .asc

        public var customOrder: [SwiftProtobuf.Google_Protobuf_Value] = []

        public var format: Anytype_Model_RelationFormat = .longtext

        public var includeTime: Bool = false

        public var id: String = String()

        public var emptyPlacement: Anytype_Model_Block.Content.Dataview.Sort.EmptyType = .notSpecified

        public var noCollate: Bool = false

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public enum TypeEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
          public typealias RawValue = Int
          case asc // = 0
          case desc // = 1
          case custom // = 2
          case UNRECOGNIZED(Int)

          public init() {
            self = .asc
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .asc
            case 1: self = .desc
            case 2: self = .custom
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .asc: return 0
            case .desc: return 1
            case .custom: return 2
            case .UNRECOGNIZED(let i): return i
            }
          }

          // The compiler won't synthesize support with the UNRECOGNIZED case.
          public static let allCases: [Anytype_Model_Block.Content.Dataview.Sort.TypeEnum] = [
            .asc,
            .desc,
            .custom,
          ]

        }

        public enum EmptyType: SwiftProtobuf.Enum, Swift.CaseIterable {
          public typealias RawValue = Int
          case notSpecified // = 0
          case start // = 1
          case end // = 2
          case UNRECOGNIZED(Int)

          public init() {
            self = .notSpecified
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .notSpecified
            case 1: self = .start
            case 2: self = .end
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .notSpecified: return 0
            case .start: return 1
            case .end: return 2
            case .UNRECOGNIZED(let i): return i
            }
          }

          // The compiler won't synthesize support with the UNRECOGNIZED case.
          public static let allCases: [Anytype_Model_Block.Content.Dataview.Sort.EmptyType] = [
            .notSpecified,
            .start,
            .end,
          ]

        }

        public init() {}
      }    
}

extension Anytype_Model_Block.Content.Dataview.Sort: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.Dataview.protoMessageName + ".Sort"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}RelationKey\0\u{1}type\0\u{1}customOrder\0\u{1}format\0\u{1}includeTime\0\u{1}id\0\u{1}emptyPlacement\0\u{1}noCollate\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.relationKey) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.customOrder) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.format) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.includeTime) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.emptyPlacement) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.noCollate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.relationKey.isEmpty {
      try visitor.visitSingularStringField(value: self.relationKey, fieldNumber: 1)
    }
    if self.type != .asc {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.customOrder.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customOrder, fieldNumber: 3)
    }
    if self.format != .longtext {
      try visitor.visitSingularEnumField(value: self.format, fieldNumber: 4)
    }
    if self.includeTime != false {
      try visitor.visitSingularBoolField(value: self.includeTime, fieldNumber: 5)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 6)
    }
    if self.emptyPlacement != .notSpecified {
      try visitor.visitSingularEnumField(value: self.emptyPlacement, fieldNumber: 7)
    }
    if self.noCollate != false {
      try visitor.visitSingularBoolField(value: self.noCollate, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.Dataview.Sort, rhs: Anytype_Model_Block.Content.Dataview.Sort) -> Bool {
    if lhs.relationKey != rhs.relationKey {return false}
    if lhs.type != rhs.type {return false}
    if lhs.customOrder != rhs.customOrder {return false}
    if lhs.format != rhs.format {return false}
    if lhs.includeTime != rhs.includeTime {return false}
    if lhs.id != rhs.id {return false}
    if lhs.emptyPlacement != rhs.emptyPlacement {return false}
    if lhs.noCollate != rhs.noCollate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_Block.Content.Dataview.Sort.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0Asc\0\u{1}Desc\0\u{1}Custom\0")
}

extension Anytype_Model_Block.Content.Dataview.Sort.EmptyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NotSpecified\0\u{1}Start\0\u{1}End\0")
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
