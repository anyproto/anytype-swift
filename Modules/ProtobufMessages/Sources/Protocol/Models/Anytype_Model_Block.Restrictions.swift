// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Model_Block {
    public struct Restrictions: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var read: Bool = false

    public var edit: Bool = false

    public var remove: Bool = false

    public var drag: Bool = false

    public var dropOn: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }    
}

extension Anytype_Model_Block.Restrictions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.protoMessageName + ".Restrictions"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}read\0\u{1}edit\0\u{1}remove\0\u{1}drag\0\u{1}dropOn\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.read) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.edit) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.remove) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.drag) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.dropOn) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.read != false {
      try visitor.visitSingularBoolField(value: self.read, fieldNumber: 1)
    }
    if self.edit != false {
      try visitor.visitSingularBoolField(value: self.edit, fieldNumber: 2)
    }
    if self.remove != false {
      try visitor.visitSingularBoolField(value: self.remove, fieldNumber: 3)
    }
    if self.drag != false {
      try visitor.visitSingularBoolField(value: self.drag, fieldNumber: 4)
    }
    if self.dropOn != false {
      try visitor.visitSingularBoolField(value: self.dropOn, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Restrictions, rhs: Anytype_Model_Block.Restrictions) -> Bool {
    if lhs.read != rhs.read {return false}
    if lhs.edit != rhs.edit {return false}
    if lhs.remove != rhs.remove {return false}
    if lhs.drag != rhs.drag {return false}
    if lhs.dropOn != rhs.dropOn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
