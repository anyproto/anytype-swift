// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Model_Block.Content {
    public struct Text: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var text: String = String()

      public var style: Anytype_Model_Block.Content.Text.Style = .paragraph

      /// list of marks to apply to the text
      public var marks: Anytype_Model_Block.Content.Text.Marks {
        get {return _marks ?? Anytype_Model_Block.Content.Text.Marks()}
        set {_marks = newValue}
      }
      /// Returns true if `marks` has been explicitly set.
      public var hasMarks: Bool {return self._marks != nil}
      /// Clears the value of `marks`. Subsequent reads from it will return its default value.
      public mutating func clearMarks() {self._marks = nil}

      public var checked: Bool = false

      public var color: String = String()

      /// used with style Callout
      public var iconEmoji: String = String()

      /// in case both image and emoji are set, image should has a priority in the UI
      public var iconImage: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _marks: Anytype_Model_Block.Content.Text.Marks? = nil
    }    
}

extension Anytype_Model_Block.Content.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Text"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}text\0\u{1}style\0\u{1}marks\0\u{1}checked\0\u{1}color\0\u{1}iconEmoji\0\u{1}iconImage\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.style) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._marks) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.checked) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.color) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.iconEmoji) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.iconImage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.style != .paragraph {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 2)
    }
    try { if let v = self._marks {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.checked != false {
      try visitor.visitSingularBoolField(value: self.checked, fieldNumber: 4)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 5)
    }
    if !self.iconEmoji.isEmpty {
      try visitor.visitSingularStringField(value: self.iconEmoji, fieldNumber: 6)
    }
    if !self.iconImage.isEmpty {
      try visitor.visitSingularStringField(value: self.iconImage, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.Text, rhs: Anytype_Model_Block.Content.Text) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.style != rhs.style {return false}
    if lhs._marks != rhs._marks {return false}
    if lhs.checked != rhs.checked {return false}
    if lhs.color != rhs.color {return false}
    if lhs.iconEmoji != rhs.iconEmoji {return false}
    if lhs.iconImage != rhs.iconImage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
