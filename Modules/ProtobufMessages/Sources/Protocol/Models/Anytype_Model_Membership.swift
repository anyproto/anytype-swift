// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public struct Anytype_Model_Membership: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// it was Tier before, changed to int32 to allow dynamic values
  public var tier: UInt32 = 0

  public var status: Anytype_Model_Membership.Status = .unknown

  public var dateStarted: UInt64 = 0

  public var dateEnds: UInt64 = 0

  public var isAutoRenew: Bool = false

  public var paymentMethod: Anytype_Model_Membership.PaymentMethod = .methodNone

  /// can be empty if user did not ask for any name
  public var nsName: String = String()

  public var nsNameType: Anytype_Model_NameserviceNameType = .anyName

  /// if the email was verified by the user or set during the checkout - it will be here
  public var userEmail: String = String()

  public var subscribeToNewsletter: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

extension Anytype_Model_Membership: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Membership"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}tier\0\u{1}status\0\u{1}dateStarted\0\u{1}dateEnds\0\u{1}isAutoRenew\0\u{1}paymentMethod\0\u{1}nsName\0\u{1}nsNameType\0\u{1}userEmail\0\u{1}subscribeToNewsletter\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.tier) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.dateStarted) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.dateEnds) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.isAutoRenew) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.paymentMethod) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.nsName) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.nsNameType) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.userEmail) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.subscribeToNewsletter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tier != 0 {
      try visitor.visitSingularUInt32Field(value: self.tier, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.dateStarted != 0 {
      try visitor.visitSingularUInt64Field(value: self.dateStarted, fieldNumber: 3)
    }
    if self.dateEnds != 0 {
      try visitor.visitSingularUInt64Field(value: self.dateEnds, fieldNumber: 4)
    }
    if self.isAutoRenew != false {
      try visitor.visitSingularBoolField(value: self.isAutoRenew, fieldNumber: 5)
    }
    if self.paymentMethod != .methodNone {
      try visitor.visitSingularEnumField(value: self.paymentMethod, fieldNumber: 6)
    }
    if !self.nsName.isEmpty {
      try visitor.visitSingularStringField(value: self.nsName, fieldNumber: 7)
    }
    if self.nsNameType != .anyName {
      try visitor.visitSingularEnumField(value: self.nsNameType, fieldNumber: 8)
    }
    if !self.userEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.userEmail, fieldNumber: 9)
    }
    if self.subscribeToNewsletter != false {
      try visitor.visitSingularBoolField(value: self.subscribeToNewsletter, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Membership, rhs: Anytype_Model_Membership) -> Bool {
    if lhs.tier != rhs.tier {return false}
    if lhs.status != rhs.status {return false}
    if lhs.dateStarted != rhs.dateStarted {return false}
    if lhs.dateEnds != rhs.dateEnds {return false}
    if lhs.isAutoRenew != rhs.isAutoRenew {return false}
    if lhs.paymentMethod != rhs.paymentMethod {return false}
    if lhs.nsName != rhs.nsName {return false}
    if lhs.nsNameType != rhs.nsNameType {return false}
    if lhs.userEmail != rhs.userEmail {return false}
    if lhs.subscribeToNewsletter != rhs.subscribeToNewsletter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
