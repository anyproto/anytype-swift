// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public struct Anytype_Model_InvitePayload: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var creatorIdentity: String = String()

  public var creatorName: String = String()

  public var aclKey: Data = Data()

  public var spaceID: String = String()

  public var spaceName: String = String()

  public var spaceIconCid: String = String()

  public var spaceIconEncryptionKeys: [Anytype_Model_FileEncryptionKey] = []

  public var inviteType: Anytype_Model_InviteType = .member

  public var guestKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

extension Anytype_Model_InvitePayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InvitePayload"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}creatorIdentity\0\u{1}creatorName\0\u{1}aclKey\0\u{1}spaceId\0\u{1}spaceName\0\u{1}spaceIconCid\0\u{1}spaceIconEncryptionKeys\0\u{1}inviteType\0\u{1}guestKey\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.creatorIdentity) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.creatorName) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.aclKey) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.spaceID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.spaceName) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.spaceIconCid) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.spaceIconEncryptionKeys) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.inviteType) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self.guestKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.creatorIdentity.isEmpty {
      try visitor.visitSingularStringField(value: self.creatorIdentity, fieldNumber: 1)
    }
    if !self.creatorName.isEmpty {
      try visitor.visitSingularStringField(value: self.creatorName, fieldNumber: 2)
    }
    if !self.aclKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.aclKey, fieldNumber: 3)
    }
    if !self.spaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceID, fieldNumber: 4)
    }
    if !self.spaceName.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceName, fieldNumber: 5)
    }
    if !self.spaceIconCid.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceIconCid, fieldNumber: 6)
    }
    if !self.spaceIconEncryptionKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.spaceIconEncryptionKeys, fieldNumber: 7)
    }
    if self.inviteType != .member {
      try visitor.visitSingularEnumField(value: self.inviteType, fieldNumber: 8)
    }
    if !self.guestKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.guestKey, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_InvitePayload, rhs: Anytype_Model_InvitePayload) -> Bool {
    if lhs.creatorIdentity != rhs.creatorIdentity {return false}
    if lhs.creatorName != rhs.creatorName {return false}
    if lhs.aclKey != rhs.aclKey {return false}
    if lhs.spaceID != rhs.spaceID {return false}
    if lhs.spaceName != rhs.spaceName {return false}
    if lhs.spaceIconCid != rhs.spaceIconCid {return false}
    if lhs.spaceIconEncryptionKeys != rhs.spaceIconEncryptionKeys {return false}
    if lhs.inviteType != rhs.inviteType {return false}
    if lhs.guestKey != rhs.guestKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
