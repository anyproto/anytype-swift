// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf
public struct Anytype_Model_MembershipTierData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// this is a unique Payment Node ID of the tier
  /// WARNING: tiers can be sorted differently, not according to their IDs!
  public var id: UInt32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// localazied name of the tier
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// just a short technical description
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// is this tier for testing and debugging only?
  public var isTest: Bool {
    get {return _storage._isTest}
    set {_uniqueStorage()._isTest = newValue}
  }

  /// how long is the period of the subscription
  public var periodType: Anytype_Model_MembershipTierData.PeriodType {
    get {return _storage._periodType}
    set {_uniqueStorage()._periodType = newValue}
  }

  /// i.e. "5 days" or "3 years"
  public var periodValue: UInt32 {
    get {return _storage._periodValue}
    set {_uniqueStorage()._periodValue = newValue}
  }

  /// this one is a price we use ONLY on Stripe platform
  public var priceStripeUsdCents: UInt32 {
    get {return _storage._priceStripeUsdCents}
    set {_uniqueStorage()._priceStripeUsdCents = newValue}
  }

  /// number of ANY NS names that this tier includes
  /// also in the "features" list (see below)
  public var anyNamesCountIncluded: UInt32 {
    get {return _storage._anyNamesCountIncluded}
    set {_uniqueStorage()._anyNamesCountIncluded = newValue}
  }

  /// somename.any - is of len 8
  public var anyNameMinLength: UInt32 {
    get {return _storage._anyNameMinLength}
    set {_uniqueStorage()._anyNameMinLength = newValue}
  }

  /// localized strings for the features
  public var features: [String] {
    get {return _storage._features}
    set {_uniqueStorage()._features = newValue}
  }

  /// green, blue, red, purple, custom
  public var colorStr: String {
    get {return _storage._colorStr}
    set {_uniqueStorage()._colorStr = newValue}
  }

  /// Stripe platform-specific data:
  public var stripeProductID: String {
    get {return _storage._stripeProductID}
    set {_uniqueStorage()._stripeProductID = newValue}
  }

  public var stripeManageURL: String {
    get {return _storage._stripeManageURL}
    set {_uniqueStorage()._stripeManageURL = newValue}
  }

  /// iOS platform-specific data:
  public var iosProductID: String {
    get {return _storage._iosProductID}
    set {_uniqueStorage()._iosProductID = newValue}
  }

  public var iosManageURL: String {
    get {return _storage._iosManageURL}
    set {_uniqueStorage()._iosManageURL = newValue}
  }

  /// Android platform-specific data:
  public var androidProductID: String {
    get {return _storage._androidProductID}
    set {_uniqueStorage()._androidProductID = newValue}
  }

  public var androidManageURL: String {
    get {return _storage._androidManageURL}
    set {_uniqueStorage()._androidManageURL = newValue}
  }

  /// "limited offer" or somehing like that
  public var offer: String {
    get {return _storage._offer}
    set {_uniqueStorage()._offer = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

extension Anytype_Model_MembershipTierData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MembershipTierData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "isTest"),
    5: .same(proto: "periodType"),
    6: .same(proto: "periodValue"),
    7: .same(proto: "priceStripeUsdCents"),
    8: .same(proto: "anyNamesCountIncluded"),
    9: .same(proto: "anyNameMinLength"),
    10: .same(proto: "features"),
    11: .same(proto: "colorStr"),
    12: .same(proto: "stripeProductId"),
    13: .same(proto: "stripeManageUrl"),
    15: .same(proto: "iosProductId"),
    16: .same(proto: "iosManageUrl"),
    17: .same(proto: "androidProductId"),
    18: .same(proto: "androidManageUrl"),
    19: .same(proto: "offer"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt32 = 0
    var _name: String = String()
    var _description_p: String = String()
    var _isTest: Bool = false
    var _periodType: Anytype_Model_MembershipTierData.PeriodType = .unknown
    var _periodValue: UInt32 = 0
    var _priceStripeUsdCents: UInt32 = 0
    var _anyNamesCountIncluded: UInt32 = 0
    var _anyNameMinLength: UInt32 = 0
    var _features: [String] = []
    var _colorStr: String = String()
    var _stripeProductID: String = String()
    var _stripeManageURL: String = String()
    var _iosProductID: String = String()
    var _iosManageURL: String = String()
    var _androidProductID: String = String()
    var _androidManageURL: String = String()
    var _offer: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _name = source._name
      _description_p = source._description_p
      _isTest = source._isTest
      _periodType = source._periodType
      _periodValue = source._periodValue
      _priceStripeUsdCents = source._priceStripeUsdCents
      _anyNamesCountIncluded = source._anyNamesCountIncluded
      _anyNameMinLength = source._anyNameMinLength
      _features = source._features
      _colorStr = source._colorStr
      _stripeProductID = source._stripeProductID
      _stripeManageURL = source._stripeManageURL
      _iosProductID = source._iosProductID
      _iosManageURL = source._iosManageURL
      _androidProductID = source._androidProductID
      _androidManageURL = source._androidManageURL
      _offer = source._offer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._isTest) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._periodType) }()
        case 6: try { try decoder.decodeSingularUInt32Field(value: &_storage._periodValue) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._priceStripeUsdCents) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._anyNamesCountIncluded) }()
        case 9: try { try decoder.decodeSingularUInt32Field(value: &_storage._anyNameMinLength) }()
        case 10: try { try decoder.decodeRepeatedStringField(value: &_storage._features) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._colorStr) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._stripeProductID) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._stripeManageURL) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._iosProductID) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._iosManageURL) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._androidProductID) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._androidManageURL) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._offer) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if _storage._isTest != false {
        try visitor.visitSingularBoolField(value: _storage._isTest, fieldNumber: 4)
      }
      if _storage._periodType != .unknown {
        try visitor.visitSingularEnumField(value: _storage._periodType, fieldNumber: 5)
      }
      if _storage._periodValue != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._periodValue, fieldNumber: 6)
      }
      if _storage._priceStripeUsdCents != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._priceStripeUsdCents, fieldNumber: 7)
      }
      if _storage._anyNamesCountIncluded != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._anyNamesCountIncluded, fieldNumber: 8)
      }
      if _storage._anyNameMinLength != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._anyNameMinLength, fieldNumber: 9)
      }
      if !_storage._features.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._features, fieldNumber: 10)
      }
      if !_storage._colorStr.isEmpty {
        try visitor.visitSingularStringField(value: _storage._colorStr, fieldNumber: 11)
      }
      if !_storage._stripeProductID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stripeProductID, fieldNumber: 12)
      }
      if !_storage._stripeManageURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._stripeManageURL, fieldNumber: 13)
      }
      if !_storage._iosProductID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._iosProductID, fieldNumber: 15)
      }
      if !_storage._iosManageURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._iosManageURL, fieldNumber: 16)
      }
      if !_storage._androidProductID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._androidProductID, fieldNumber: 17)
      }
      if !_storage._androidManageURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._androidManageURL, fieldNumber: 18)
      }
      if !_storage._offer.isEmpty {
        try visitor.visitSingularStringField(value: _storage._offer, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_MembershipTierData, rhs: Anytype_Model_MembershipTierData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._isTest != rhs_storage._isTest {return false}
        if _storage._periodType != rhs_storage._periodType {return false}
        if _storage._periodValue != rhs_storage._periodValue {return false}
        if _storage._priceStripeUsdCents != rhs_storage._priceStripeUsdCents {return false}
        if _storage._anyNamesCountIncluded != rhs_storage._anyNamesCountIncluded {return false}
        if _storage._anyNameMinLength != rhs_storage._anyNameMinLength {return false}
        if _storage._features != rhs_storage._features {return false}
        if _storage._colorStr != rhs_storage._colorStr {return false}
        if _storage._stripeProductID != rhs_storage._stripeProductID {return false}
        if _storage._stripeManageURL != rhs_storage._stripeManageURL {return false}
        if _storage._iosProductID != rhs_storage._iosProductID {return false}
        if _storage._iosManageURL != rhs_storage._iosManageURL {return false}
        if _storage._androidProductID != rhs_storage._androidProductID {return false}
        if _storage._androidManageURL != rhs_storage._androidManageURL {return false}
        if _storage._offer != rhs_storage._offer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
