// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Model_Block.Content {
    public struct Dataview: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// can be set for detached(without TargetObjectId) inline sets
      public var source: [String] = []

      public var views: [Anytype_Model_Block.Content.Dataview.View] = []

      /// do not generate changes for this field
      public var activeView: String = String()

      /// deprecated
      public var relations: [Anytype_Model_Relation] = []

      public var groupOrders: [Anytype_Model_Block.Content.Dataview.GroupOrder] = []

      public var objectOrders: [Anytype_Model_Block.Content.Dataview.ObjectOrder] = []

      public var relationLinks: [Anytype_Model_RelationLink] = []

      /// empty for original set/collection objects and for detached inline sets
      public var targetObjectID: String = String()

      public var isCollection: Bool = false

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }    
}

extension Anytype_Model_Block.Content.Dataview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model_Block.Content.protoMessageName + ".Dataview"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}source\0\u{1}views\0\u{1}activeView\0\u{1}relations\0\u{1}relationLinks\0\u{1}TargetObjectId\0\u{2}\u{6}groupOrders\0\u{1}objectOrders\0\u{1}isCollection\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.source) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.views) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.activeView) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.relations) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.relationLinks) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.targetObjectID) }()
      case 12: try { try decoder.decodeRepeatedMessageField(value: &self.groupOrders) }()
      case 13: try { try decoder.decodeRepeatedMessageField(value: &self.objectOrders) }()
      case 14: try { try decoder.decodeSingularBoolField(value: &self.isCollection) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.source.isEmpty {
      try visitor.visitRepeatedStringField(value: self.source, fieldNumber: 1)
    }
    if !self.views.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.views, fieldNumber: 2)
    }
    if !self.activeView.isEmpty {
      try visitor.visitSingularStringField(value: self.activeView, fieldNumber: 3)
    }
    if !self.relations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.relations, fieldNumber: 4)
    }
    if !self.relationLinks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.relationLinks, fieldNumber: 5)
    }
    if !self.targetObjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetObjectID, fieldNumber: 6)
    }
    if !self.groupOrders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupOrders, fieldNumber: 12)
    }
    if !self.objectOrders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.objectOrders, fieldNumber: 13)
    }
    if self.isCollection != false {
      try visitor.visitSingularBoolField(value: self.isCollection, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_Block.Content.Dataview, rhs: Anytype_Model_Block.Content.Dataview) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.views != rhs.views {return false}
    if lhs.activeView != rhs.activeView {return false}
    if lhs.relations != rhs.relations {return false}
    if lhs.groupOrders != rhs.groupOrders {return false}
    if lhs.objectOrders != rhs.objectOrders {return false}
    if lhs.relationLinks != rhs.relationLinks {return false}
    if lhs.targetObjectID != rhs.targetObjectID {return false}
    if lhs.isCollection != rhs.isCollection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"
