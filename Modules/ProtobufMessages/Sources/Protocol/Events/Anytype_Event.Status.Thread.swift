// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

extension Anytype_Event.Status {
    public struct Thread: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var summary: Anytype_Event.Status.Thread.Summary {
        get {return _summary ?? Anytype_Event.Status.Thread.Summary()}
        set {_summary = newValue}
      }
      /// Returns true if `summary` has been explicitly set.
      public var hasSummary: Bool {return self._summary != nil}
      /// Clears the value of `summary`. Subsequent reads from it will return its default value.
      public mutating func clearSummary() {self._summary = nil}

      public var cafe: Anytype_Event.Status.Thread.Cafe {
        get {return _cafe ?? Anytype_Event.Status.Thread.Cafe()}
        set {_cafe = newValue}
      }
      /// Returns true if `cafe` has been explicitly set.
      public var hasCafe: Bool {return self._cafe != nil}
      /// Clears the value of `cafe`. Subsequent reads from it will return its default value.
      public mutating func clearCafe() {self._cafe = nil}

      public var accounts: [Anytype_Event.Status.Thread.Account] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum SyncStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
        public typealias RawValue = Int
        case unknown // = 0
        case offline // = 1
        case syncing // = 2
        case synced // = 3
        case failed // = 4
        case incompatibleVersion // = 5
        case networkNeedsUpdate // = 6
        case UNRECOGNIZED(Int)

        public init() {
          self = .unknown
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .unknown
          case 1: self = .offline
          case 2: self = .syncing
          case 3: self = .synced
          case 4: self = .failed
          case 5: self = .incompatibleVersion
          case 6: self = .networkNeedsUpdate
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .unknown: return 0
          case .offline: return 1
          case .syncing: return 2
          case .synced: return 3
          case .failed: return 4
          case .incompatibleVersion: return 5
          case .networkNeedsUpdate: return 6
          case .UNRECOGNIZED(let i): return i
          }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        public static let allCases: [Anytype_Event.Status.Thread.SyncStatus] = [
          .unknown,
          .offline,
          .syncing,
          .synced,
          .failed,
          .incompatibleVersion,
          .networkNeedsUpdate,
        ]

      }

      public struct Summary: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var status: Anytype_Event.Status.Thread.SyncStatus = .unknown

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Cafe: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var status: Anytype_Event.Status.Thread.SyncStatus = .unknown

        public var lastPulled: Int64 = 0

        public var lastPushSucceed: Bool = false

        public var files: Anytype_Event.Status.Thread.Cafe.PinStatus {
          get {return _files ?? Anytype_Event.Status.Thread.Cafe.PinStatus()}
          set {_files = newValue}
        }
        /// Returns true if `files` has been explicitly set.
        public var hasFiles: Bool {return self._files != nil}
        /// Clears the value of `files`. Subsequent reads from it will return its default value.
        public mutating func clearFiles() {self._files = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct PinStatus: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var pinning: Int32 = 0

          public var pinned: Int32 = 0

          public var failed: Int32 = 0

          public var updated: Int64 = 0

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _files: Anytype_Event.Status.Thread.Cafe.PinStatus? = nil
      }

      public struct Account: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var name: String = String()

        public var imageHash: String = String()

        public var online: Bool = false

        public var lastPulled: Int64 = 0

        public var lastEdited: Int64 = 0

        public var devices: [Anytype_Event.Status.Thread.Device] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Device: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var name: String = String()

        public var online: Bool = false

        public var lastPulled: Int64 = 0

        public var lastEdited: Int64 = 0

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}

      fileprivate var _summary: Anytype_Event.Status.Thread.Summary? = nil
      fileprivate var _cafe: Anytype_Event.Status.Thread.Cafe? = nil
    }    
}

extension Anytype_Event.Status.Thread: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Status.protoMessageName + ".Thread"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}summary\0\u{1}cafe\0\u{1}accounts\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._summary) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._cafe) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.accounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._summary {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._cafe {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.accounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accounts, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status.Thread, rhs: Anytype_Event.Status.Thread) -> Bool {
    if lhs._summary != rhs._summary {return false}
    if lhs._cafe != rhs._cafe {return false}
    if lhs.accounts != rhs.accounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Status.Thread.SyncStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0Unknown\0\u{1}Offline\0\u{1}Syncing\0\u{1}Synced\0\u{1}Failed\0\u{1}IncompatibleVersion\0\u{1}NetworkNeedsUpdate\0")
}

extension Anytype_Event.Status.Thread.Summary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Status.Thread.protoMessageName + ".Summary"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}status\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status.Thread.Summary, rhs: Anytype_Event.Status.Thread.Summary) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Status.Thread.Cafe: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Status.Thread.protoMessageName + ".Cafe"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}status\0\u{1}lastPulled\0\u{1}lastPushSucceed\0\u{1}files\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.lastPulled) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.lastPushSucceed) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._files) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if self.lastPulled != 0 {
      try visitor.visitSingularInt64Field(value: self.lastPulled, fieldNumber: 2)
    }
    if self.lastPushSucceed != false {
      try visitor.visitSingularBoolField(value: self.lastPushSucceed, fieldNumber: 3)
    }
    try { if let v = self._files {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status.Thread.Cafe, rhs: Anytype_Event.Status.Thread.Cafe) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.lastPulled != rhs.lastPulled {return false}
    if lhs.lastPushSucceed != rhs.lastPushSucceed {return false}
    if lhs._files != rhs._files {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Status.Thread.Cafe.PinStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Status.Thread.Cafe.protoMessageName + ".PinStatus"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}pinning\0\u{1}pinned\0\u{1}failed\0\u{1}updated\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.pinning) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pinned) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.failed) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.updated) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pinning != 0 {
      try visitor.visitSingularInt32Field(value: self.pinning, fieldNumber: 1)
    }
    if self.pinned != 0 {
      try visitor.visitSingularInt32Field(value: self.pinned, fieldNumber: 2)
    }
    if self.failed != 0 {
      try visitor.visitSingularInt32Field(value: self.failed, fieldNumber: 3)
    }
    if self.updated != 0 {
      try visitor.visitSingularInt64Field(value: self.updated, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status.Thread.Cafe.PinStatus, rhs: Anytype_Event.Status.Thread.Cafe.PinStatus) -> Bool {
    if lhs.pinning != rhs.pinning {return false}
    if lhs.pinned != rhs.pinned {return false}
    if lhs.failed != rhs.failed {return false}
    if lhs.updated != rhs.updated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Status.Thread.Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Status.Thread.protoMessageName + ".Account"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}name\0\u{1}imageHash\0\u{1}online\0\u{1}lastPulled\0\u{1}lastEdited\0\u{1}devices\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.imageHash) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.online) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.lastPulled) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.lastEdited) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.devices) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.imageHash.isEmpty {
      try visitor.visitSingularStringField(value: self.imageHash, fieldNumber: 3)
    }
    if self.online != false {
      try visitor.visitSingularBoolField(value: self.online, fieldNumber: 4)
    }
    if self.lastPulled != 0 {
      try visitor.visitSingularInt64Field(value: self.lastPulled, fieldNumber: 5)
    }
    if self.lastEdited != 0 {
      try visitor.visitSingularInt64Field(value: self.lastEdited, fieldNumber: 6)
    }
    if !self.devices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.devices, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status.Thread.Account, rhs: Anytype_Event.Status.Thread.Account) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.imageHash != rhs.imageHash {return false}
    if lhs.online != rhs.online {return false}
    if lhs.lastPulled != rhs.lastPulled {return false}
    if lhs.lastEdited != rhs.lastEdited {return false}
    if lhs.devices != rhs.devices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Status.Thread.Device: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Status.Thread.protoMessageName + ".Device"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}online\0\u{1}lastPulled\0\u{1}lastEdited\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.online) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.lastPulled) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.lastEdited) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.online != false {
      try visitor.visitSingularBoolField(value: self.online, fieldNumber: 2)
    }
    if self.lastPulled != 0 {
      try visitor.visitSingularInt64Field(value: self.lastPulled, fieldNumber: 3)
    }
    if self.lastEdited != 0 {
      try visitor.visitSingularInt64Field(value: self.lastEdited, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status.Thread.Device, rhs: Anytype_Event.Status.Thread.Device) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.online != rhs.online {return false}
    if lhs.lastPulled != rhs.lastPulled {return false}
    if lhs.lastEdited != rhs.lastEdited {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
