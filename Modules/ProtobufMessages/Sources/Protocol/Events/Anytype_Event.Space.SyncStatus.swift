// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

extension Anytype_Event.Space {
    public struct SyncStatus: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Update: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var status: Anytype_Event.Space.Status = .synced

        public var network: Anytype_Event.Space.Network = .anytype

        public var error: Anytype_Event.Space.SyncError = .null

        public var syncingObjectsCounter: Int64 = 0

        public var notSyncedFilesCounter: Int64 = 0

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}
    }    
}

extension Anytype_Event.Space.SyncStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Space.protoMessageName + ".SyncStatus"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Space.SyncStatus, rhs: Anytype_Event.Space.SyncStatus) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Space.SyncStatus.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Space.SyncStatus.protoMessageName + ".Update"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}status\0\u{1}network\0\u{1}error\0\u{1}syncingObjectsCounter\0\u{1}notSyncedFilesCounter\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.network) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.error) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.syncingObjectsCounter) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.notSyncedFilesCounter) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.status != .synced {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.network != .anytype {
      try visitor.visitSingularEnumField(value: self.network, fieldNumber: 3)
    }
    if self.error != .null {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 4)
    }
    if self.syncingObjectsCounter != 0 {
      try visitor.visitSingularInt64Field(value: self.syncingObjectsCounter, fieldNumber: 5)
    }
    if self.notSyncedFilesCounter != 0 {
      try visitor.visitSingularInt64Field(value: self.notSyncedFilesCounter, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Space.SyncStatus.Update, rhs: Anytype_Event.Space.SyncStatus.Update) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.status != rhs.status {return false}
    if lhs.network != rhs.network {return false}
    if lhs.error != rhs.error {return false}
    if lhs.syncingObjectsCounter != rhs.syncingObjectsCounter {return false}
    if lhs.notSyncedFilesCounter != rhs.notSyncedFilesCounter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
