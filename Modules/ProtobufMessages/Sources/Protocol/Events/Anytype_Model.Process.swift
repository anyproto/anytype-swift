// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

extension Anytype_Model {
    public struct Process: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: String = String()

    public var state: Anytype_Model.Process.State = .none

    public var progress: Anytype_Model.Process.Progress {
      get {return _progress ?? Anytype_Model.Process.Progress()}
      set {_progress = newValue}
    }
    /// Returns true if `progress` has been explicitly set.
    public var hasProgress: Bool {return self._progress != nil}
    /// Clears the value of `progress`. Subsequent reads from it will return its default value.
    public mutating func clearProgress() {self._progress = nil}

    public var spaceID: String = String()

    public var message: Anytype_Model.Process.OneOf_Message? = nil

    public var dropFiles: Anytype_Model.Process.DropFiles {
      get {
        if case .dropFiles(let v)? = message {return v}
        return Anytype_Model.Process.DropFiles()
      }
      set {message = .dropFiles(newValue)}
    }

    public var `import`: Anytype_Model.Process.Import {
      get {
        if case .import(let v)? = message {return v}
        return Anytype_Model.Process.Import()
      }
      set {message = .import(newValue)}
    }

    public var export: Anytype_Model.Process.Export {
      get {
        if case .export(let v)? = message {return v}
        return Anytype_Model.Process.Export()
      }
      set {message = .export(newValue)}
    }

    public var saveFile: Anytype_Model.Process.SaveFile {
      get {
        if case .saveFile(let v)? = message {return v}
        return Anytype_Model.Process.SaveFile()
      }
      set {message = .saveFile(newValue)}
    }

    public var migration: Anytype_Model.Process.Migration {
      get {
        if case .migration(let v)? = message {return v}
        return Anytype_Model.Process.Migration()
      }
      set {message = .migration(newValue)}
    }

    public var preloadFile: Anytype_Model.Process.PreloadFile {
      get {
        if case .preloadFile(let v)? = message {return v}
        return Anytype_Model.Process.PreloadFile()
      }
      set {message = .preloadFile(newValue)}
    }

    public var error: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _progress: Anytype_Model.Process.Progress? = nil
  }    
}

extension Anytype_Model.Process: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model.protoMessageName + ".Process"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    3: .same(proto: "state"),
    4: .same(proto: "progress"),
    5: .same(proto: "spaceId"),
    6: .same(proto: "dropFiles"),
    7: .same(proto: "import"),
    8: .same(proto: "export"),
    9: .same(proto: "saveFile"),
    10: .same(proto: "migration"),
    12: .same(proto: "preloadFile"),
    11: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._progress) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.spaceID) }()
      case 6: try {
        var v: Anytype_Model.Process.DropFiles?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .dropFiles(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .dropFiles(v)
        }
      }()
      case 7: try {
        var v: Anytype_Model.Process.Import?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .import(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .import(v)
        }
      }()
      case 8: try {
        var v: Anytype_Model.Process.Export?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .export(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .export(v)
        }
      }()
      case 9: try {
        var v: Anytype_Model.Process.SaveFile?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .saveFile(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .saveFile(v)
        }
      }()
      case 10: try {
        var v: Anytype_Model.Process.Migration?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .migration(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .migration(v)
        }
      }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.error) }()
      case 12: try {
        var v: Anytype_Model.Process.PreloadFile?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .preloadFile(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .preloadFile(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.state != .none {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    try { if let v = self._progress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.spaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceID, fieldNumber: 5)
    }
    switch self.message {
    case .dropFiles?: try {
      guard case .dropFiles(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .import?: try {
      guard case .import(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .export?: try {
      guard case .export(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .saveFile?: try {
      guard case .saveFile(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .migration?: try {
      guard case .migration(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    default: break
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 11)
    }
    try { if case .preloadFile(let v)? = self.message {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model.Process, rhs: Anytype_Model.Process) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.state != rhs.state {return false}
    if lhs._progress != rhs._progress {return false}
    if lhs.spaceID != rhs.spaceID {return false}
    if lhs.message != rhs.message {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
