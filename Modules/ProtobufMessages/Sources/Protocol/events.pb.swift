// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///
/// Event â€“ type of message, that could be sent from a middleware to the corresponding front-end.
public struct Anytype_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var messages: [Anytype_Event.Message] = []

  public var contextID: String = String()

  public var initiator: Anytype_Model_Account {
    get {return _initiator ?? Anytype_Model_Account()}
    set {_initiator = newValue}
  }
  /// Returns true if `initiator` has been explicitly set.
  public var hasInitiator: Bool {return self._initiator != nil}
  /// Clears the value of `initiator`. Subsequent reads from it will return its default value.
  public mutating func clearInitiator() {self._initiator = nil}

  public var traceID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Message {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var value: Anytype_Event.Message.OneOf_Value? = nil

    public var accountShow: Anytype_Event.Account.Show {
      get {
        if case .accountShow(let v)? = value {return v}
        return Anytype_Event.Account.Show()
      }
      set {value = .accountShow(newValue)}
    }

    public var accountDetails: Anytype_Event.Account.Details {
      get {
        if case .accountDetails(let v)? = value {return v}
        return Anytype_Event.Account.Details()
      }
      set {value = .accountDetails(newValue)}
    }

    public var accountConfigUpdate: Anytype_Event.Account.Config.Update {
      get {
        if case .accountConfigUpdate(let v)? = value {return v}
        return Anytype_Event.Account.Config.Update()
      }
      set {value = .accountConfigUpdate(newValue)}
    }

    public var accountUpdate: Anytype_Event.Account.Update {
      get {
        if case .accountUpdate(let v)? = value {return v}
        return Anytype_Event.Account.Update()
      }
      set {value = .accountUpdate(newValue)}
    }

    public var accountLinkChallenge: Anytype_Event.Account.LinkChallenge {
      get {
        if case .accountLinkChallenge(let v)? = value {return v}
        return Anytype_Event.Account.LinkChallenge()
      }
      set {value = .accountLinkChallenge(newValue)}
    }

    public var objectDetailsSet: Anytype_Event.Object.Details.Set {
      get {
        if case .objectDetailsSet(let v)? = value {return v}
        return Anytype_Event.Object.Details.Set()
      }
      set {value = .objectDetailsSet(newValue)}
    }

    public var objectDetailsAmend: Anytype_Event.Object.Details.Amend {
      get {
        if case .objectDetailsAmend(let v)? = value {return v}
        return Anytype_Event.Object.Details.Amend()
      }
      set {value = .objectDetailsAmend(newValue)}
    }

    public var objectDetailsUnset: Anytype_Event.Object.Details.Unset {
      get {
        if case .objectDetailsUnset(let v)? = value {return v}
        return Anytype_Event.Object.Details.Unset()
      }
      set {value = .objectDetailsUnset(newValue)}
    }

    public var objectRelationsAmend: Anytype_Event.Object.Relations.Amend {
      get {
        if case .objectRelationsAmend(let v)? = value {return v}
        return Anytype_Event.Object.Relations.Amend()
      }
      set {value = .objectRelationsAmend(newValue)}
    }

    public var objectRelationsRemove: Anytype_Event.Object.Relations.Remove {
      get {
        if case .objectRelationsRemove(let v)? = value {return v}
        return Anytype_Event.Object.Relations.Remove()
      }
      set {value = .objectRelationsRemove(newValue)}
    }

    public var objectRemove: Anytype_Event.Object.Remove {
      get {
        if case .objectRemove(let v)? = value {return v}
        return Anytype_Event.Object.Remove()
      }
      set {value = .objectRemove(newValue)}
    }

    public var objectRestrictionsSet: Anytype_Event.Object.Restrictions.Set {
      get {
        if case .objectRestrictionsSet(let v)? = value {return v}
        return Anytype_Event.Object.Restrictions.Set()
      }
      set {value = .objectRestrictionsSet(newValue)}
    }

    public var subscriptionAdd: Anytype_Event.Object.Subscription.Add {
      get {
        if case .subscriptionAdd(let v)? = value {return v}
        return Anytype_Event.Object.Subscription.Add()
      }
      set {value = .subscriptionAdd(newValue)}
    }

    public var subscriptionRemove: Anytype_Event.Object.Subscription.Remove {
      get {
        if case .subscriptionRemove(let v)? = value {return v}
        return Anytype_Event.Object.Subscription.Remove()
      }
      set {value = .subscriptionRemove(newValue)}
    }

    public var subscriptionPosition: Anytype_Event.Object.Subscription.Position {
      get {
        if case .subscriptionPosition(let v)? = value {return v}
        return Anytype_Event.Object.Subscription.Position()
      }
      set {value = .subscriptionPosition(newValue)}
    }

    public var subscriptionCounters: Anytype_Event.Object.Subscription.Counters {
      get {
        if case .subscriptionCounters(let v)? = value {return v}
        return Anytype_Event.Object.Subscription.Counters()
      }
      set {value = .subscriptionCounters(newValue)}
    }

    public var subscriptionGroups: Anytype_Event.Object.Subscription.Groups {
      get {
        if case .subscriptionGroups(let v)? = value {return v}
        return Anytype_Event.Object.Subscription.Groups()
      }
      set {value = .subscriptionGroups(newValue)}
    }

    public var blockAdd: Anytype_Event.Block.Add {
      get {
        if case .blockAdd(let v)? = value {return v}
        return Anytype_Event.Block.Add()
      }
      set {value = .blockAdd(newValue)}
    }

    public var blockDelete: Anytype_Event.Block.Delete {
      get {
        if case .blockDelete(let v)? = value {return v}
        return Anytype_Event.Block.Delete()
      }
      set {value = .blockDelete(newValue)}
    }

    public var filesUpload: Anytype_Event.Block.FilesUpload {
      get {
        if case .filesUpload(let v)? = value {return v}
        return Anytype_Event.Block.FilesUpload()
      }
      set {value = .filesUpload(newValue)}
    }

    public var marksInfo: Anytype_Event.Block.MarksInfo {
      get {
        if case .marksInfo(let v)? = value {return v}
        return Anytype_Event.Block.MarksInfo()
      }
      set {value = .marksInfo(newValue)}
    }

    public var blockSetFields: Anytype_Event.Block.Set.Fields {
      get {
        if case .blockSetFields(let v)? = value {return v}
        return Anytype_Event.Block.Set.Fields()
      }
      set {value = .blockSetFields(newValue)}
    }

    public var blockSetChildrenIds: Anytype_Event.Block.Set.ChildrenIds {
      get {
        if case .blockSetChildrenIds(let v)? = value {return v}
        return Anytype_Event.Block.Set.ChildrenIds()
      }
      set {value = .blockSetChildrenIds(newValue)}
    }

    public var blockSetRestrictions: Anytype_Event.Block.Set.Restrictions {
      get {
        if case .blockSetRestrictions(let v)? = value {return v}
        return Anytype_Event.Block.Set.Restrictions()
      }
      set {value = .blockSetRestrictions(newValue)}
    }

    public var blockSetBackgroundColor: Anytype_Event.Block.Set.BackgroundColor {
      get {
        if case .blockSetBackgroundColor(let v)? = value {return v}
        return Anytype_Event.Block.Set.BackgroundColor()
      }
      set {value = .blockSetBackgroundColor(newValue)}
    }

    public var blockSetText: Anytype_Event.Block.Set.Text {
      get {
        if case .blockSetText(let v)? = value {return v}
        return Anytype_Event.Block.Set.Text()
      }
      set {value = .blockSetText(newValue)}
    }

    public var blockSetFile: Anytype_Event.Block.Set.File {
      get {
        if case .blockSetFile(let v)? = value {return v}
        return Anytype_Event.Block.Set.File()
      }
      set {value = .blockSetFile(newValue)}
    }

    public var blockSetLink: Anytype_Event.Block.Set.Link {
      get {
        if case .blockSetLink(let v)? = value {return v}
        return Anytype_Event.Block.Set.Link()
      }
      set {value = .blockSetLink(newValue)}
    }

    public var blockSetBookmark: Anytype_Event.Block.Set.Bookmark {
      get {
        if case .blockSetBookmark(let v)? = value {return v}
        return Anytype_Event.Block.Set.Bookmark()
      }
      set {value = .blockSetBookmark(newValue)}
    }

    public var blockSetAlign: Anytype_Event.Block.Set.Align {
      get {
        if case .blockSetAlign(let v)? = value {return v}
        return Anytype_Event.Block.Set.Align()
      }
      set {value = .blockSetAlign(newValue)}
    }

    public var blockSetDiv: Anytype_Event.Block.Set.Div {
      get {
        if case .blockSetDiv(let v)? = value {return v}
        return Anytype_Event.Block.Set.Div()
      }
      set {value = .blockSetDiv(newValue)}
    }

    public var blockSetRelation: Anytype_Event.Block.Set.Relation {
      get {
        if case .blockSetRelation(let v)? = value {return v}
        return Anytype_Event.Block.Set.Relation()
      }
      set {value = .blockSetRelation(newValue)}
    }

    public var blockSetLatex: Anytype_Event.Block.Set.Latex {
      get {
        if case .blockSetLatex(let v)? = value {return v}
        return Anytype_Event.Block.Set.Latex()
      }
      set {value = .blockSetLatex(newValue)}
    }

    public var blockSetVerticalAlign: Anytype_Event.Block.Set.VerticalAlign {
      get {
        if case .blockSetVerticalAlign(let v)? = value {return v}
        return Anytype_Event.Block.Set.VerticalAlign()
      }
      set {value = .blockSetVerticalAlign(newValue)}
    }

    public var blockSetTableRow: Anytype_Event.Block.Set.TableRow {
      get {
        if case .blockSetTableRow(let v)? = value {return v}
        return Anytype_Event.Block.Set.TableRow()
      }
      set {value = .blockSetTableRow(newValue)}
    }

    public var blockSetWidget: Anytype_Event.Block.Set.Widget {
      get {
        if case .blockSetWidget(let v)? = value {return v}
        return Anytype_Event.Block.Set.Widget()
      }
      set {value = .blockSetWidget(newValue)}
    }

    public var blockDataviewViewSet: Anytype_Event.Block.Dataview.ViewSet {
      get {
        if case .blockDataviewViewSet(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.ViewSet()
      }
      set {value = .blockDataviewViewSet(newValue)}
    }

    public var blockDataviewViewDelete: Anytype_Event.Block.Dataview.ViewDelete {
      get {
        if case .blockDataviewViewDelete(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.ViewDelete()
      }
      set {value = .blockDataviewViewDelete(newValue)}
    }

    public var blockDataviewViewOrder: Anytype_Event.Block.Dataview.ViewOrder {
      get {
        if case .blockDataviewViewOrder(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.ViewOrder()
      }
      set {value = .blockDataviewViewOrder(newValue)}
    }

    /// deprecated, source is no longer used
    public var blockDataviewSourceSet: Anytype_Event.Block.Dataview.SourceSet {
      get {
        if case .blockDataviewSourceSet(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.SourceSet()
      }
      set {value = .blockDataviewSourceSet(newValue)}
    }

    public var blockDataViewGroupOrderUpdate: Anytype_Event.Block.Dataview.GroupOrderUpdate {
      get {
        if case .blockDataViewGroupOrderUpdate(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.GroupOrderUpdate()
      }
      set {value = .blockDataViewGroupOrderUpdate(newValue)}
    }

    public var blockDataViewObjectOrderUpdate: Anytype_Event.Block.Dataview.ObjectOrderUpdate {
      get {
        if case .blockDataViewObjectOrderUpdate(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.ObjectOrderUpdate()
      }
      set {value = .blockDataViewObjectOrderUpdate(newValue)}
    }

    public var blockDataviewRelationDelete: Anytype_Event.Block.Dataview.RelationDelete {
      get {
        if case .blockDataviewRelationDelete(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.RelationDelete()
      }
      set {value = .blockDataviewRelationDelete(newValue)}
    }

    public var blockDataviewRelationSet: Anytype_Event.Block.Dataview.RelationSet {
      get {
        if case .blockDataviewRelationSet(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.RelationSet()
      }
      set {value = .blockDataviewRelationSet(newValue)}
    }

    public var blockDataviewViewUpdate: Anytype_Event.Block.Dataview.ViewUpdate {
      get {
        if case .blockDataviewViewUpdate(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.ViewUpdate()
      }
      set {value = .blockDataviewViewUpdate(newValue)}
    }

    public var blockDataviewTargetObjectIDSet: Anytype_Event.Block.Dataview.TargetObjectIdSet {
      get {
        if case .blockDataviewTargetObjectIDSet(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.TargetObjectIdSet()
      }
      set {value = .blockDataviewTargetObjectIDSet(newValue)}
    }

    public var blockDataviewIsCollectionSet: Anytype_Event.Block.Dataview.IsCollectionSet {
      get {
        if case .blockDataviewIsCollectionSet(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.IsCollectionSet()
      }
      set {value = .blockDataviewIsCollectionSet(newValue)}
    }

    /// deprecated
    public var blockDataviewOldRelationDelete: Anytype_Event.Block.Dataview.OldRelationDelete {
      get {
        if case .blockDataviewOldRelationDelete(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.OldRelationDelete()
      }
      set {value = .blockDataviewOldRelationDelete(newValue)}
    }

    /// deprecated
    public var blockDataviewOldRelationSet: Anytype_Event.Block.Dataview.OldRelationSet {
      get {
        if case .blockDataviewOldRelationSet(let v)? = value {return v}
        return Anytype_Event.Block.Dataview.OldRelationSet()
      }
      set {value = .blockDataviewOldRelationSet(newValue)}
    }

    public var userBlockJoin: Anytype_Event.User.Block.Join {
      get {
        if case .userBlockJoin(let v)? = value {return v}
        return Anytype_Event.User.Block.Join()
      }
      set {value = .userBlockJoin(newValue)}
    }

    public var userBlockLeft: Anytype_Event.User.Block.Left {
      get {
        if case .userBlockLeft(let v)? = value {return v}
        return Anytype_Event.User.Block.Left()
      }
      set {value = .userBlockLeft(newValue)}
    }

    public var userBlockSelectRange: Anytype_Event.User.Block.SelectRange {
      get {
        if case .userBlockSelectRange(let v)? = value {return v}
        return Anytype_Event.User.Block.SelectRange()
      }
      set {value = .userBlockSelectRange(newValue)}
    }

    public var userBlockTextRange: Anytype_Event.User.Block.TextRange {
      get {
        if case .userBlockTextRange(let v)? = value {return v}
        return Anytype_Event.User.Block.TextRange()
      }
      set {value = .userBlockTextRange(newValue)}
    }

    public var ping: Anytype_Event.Ping {
      get {
        if case .ping(let v)? = value {return v}
        return Anytype_Event.Ping()
      }
      set {value = .ping(newValue)}
    }

    public var processNew: Anytype_Event.Process.New {
      get {
        if case .processNew(let v)? = value {return v}
        return Anytype_Event.Process.New()
      }
      set {value = .processNew(newValue)}
    }

    public var processUpdate: Anytype_Event.Process.Update {
      get {
        if case .processUpdate(let v)? = value {return v}
        return Anytype_Event.Process.Update()
      }
      set {value = .processUpdate(newValue)}
    }

    public var processDone: Anytype_Event.Process.Done {
      get {
        if case .processDone(let v)? = value {return v}
        return Anytype_Event.Process.Done()
      }
      set {value = .processDone(newValue)}
    }

    public var threadStatus: Anytype_Event.Status.Thread {
      get {
        if case .threadStatus(let v)? = value {return v}
        return Anytype_Event.Status.Thread()
      }
      set {value = .threadStatus(newValue)}
    }

    public var fileLimitReached: Anytype_Event.File.LimitReached {
      get {
        if case .fileLimitReached(let v)? = value {return v}
        return Anytype_Event.File.LimitReached()
      }
      set {value = .fileLimitReached(newValue)}
    }

    public var fileSpaceUsage: Anytype_Event.File.SpaceUsage {
      get {
        if case .fileSpaceUsage(let v)? = value {return v}
        return Anytype_Event.File.SpaceUsage()
      }
      set {value = .fileSpaceUsage(newValue)}
    }

    public var fileLocalUsage: Anytype_Event.File.LocalUsage {
      get {
        if case .fileLocalUsage(let v)? = value {return v}
        return Anytype_Event.File.LocalUsage()
      }
      set {value = .fileLocalUsage(newValue)}
    }

    public var fileLimitUpdated: Anytype_Event.File.LimitUpdated {
      get {
        if case .fileLimitUpdated(let v)? = value {return v}
        return Anytype_Event.File.LimitUpdated()
      }
      set {value = .fileLimitUpdated(newValue)}
    }

    public var notificationSend: Anytype_Event.Notification.Send {
      get {
        if case .notificationSend(let v)? = value {return v}
        return Anytype_Event.Notification.Send()
      }
      set {value = .notificationSend(newValue)}
    }

    public var notificationUpdate: Anytype_Event.Notification.Update {
      get {
        if case .notificationUpdate(let v)? = value {return v}
        return Anytype_Event.Notification.Update()
      }
      set {value = .notificationUpdate(newValue)}
    }

    public var payloadBroadcast: Anytype_Event.Payload.Broadcast {
      get {
        if case .payloadBroadcast(let v)? = value {return v}
        return Anytype_Event.Payload.Broadcast()
      }
      set {value = .payloadBroadcast(newValue)}
    }

    public var membershipUpdate: Anytype_Event.Membership.Update {
      get {
        if case .membershipUpdate(let v)? = value {return v}
        return Anytype_Event.Membership.Update()
      }
      set {value = .membershipUpdate(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Value: Equatable {
      case accountShow(Anytype_Event.Account.Show)
      case accountDetails(Anytype_Event.Account.Details)
      case accountConfigUpdate(Anytype_Event.Account.Config.Update)
      case accountUpdate(Anytype_Event.Account.Update)
      case accountLinkChallenge(Anytype_Event.Account.LinkChallenge)
      case objectDetailsSet(Anytype_Event.Object.Details.Set)
      case objectDetailsAmend(Anytype_Event.Object.Details.Amend)
      case objectDetailsUnset(Anytype_Event.Object.Details.Unset)
      case objectRelationsAmend(Anytype_Event.Object.Relations.Amend)
      case objectRelationsRemove(Anytype_Event.Object.Relations.Remove)
      case objectRemove(Anytype_Event.Object.Remove)
      case objectRestrictionsSet(Anytype_Event.Object.Restrictions.Set)
      case subscriptionAdd(Anytype_Event.Object.Subscription.Add)
      case subscriptionRemove(Anytype_Event.Object.Subscription.Remove)
      case subscriptionPosition(Anytype_Event.Object.Subscription.Position)
      case subscriptionCounters(Anytype_Event.Object.Subscription.Counters)
      case subscriptionGroups(Anytype_Event.Object.Subscription.Groups)
      case blockAdd(Anytype_Event.Block.Add)
      case blockDelete(Anytype_Event.Block.Delete)
      case filesUpload(Anytype_Event.Block.FilesUpload)
      case marksInfo(Anytype_Event.Block.MarksInfo)
      case blockSetFields(Anytype_Event.Block.Set.Fields)
      case blockSetChildrenIds(Anytype_Event.Block.Set.ChildrenIds)
      case blockSetRestrictions(Anytype_Event.Block.Set.Restrictions)
      case blockSetBackgroundColor(Anytype_Event.Block.Set.BackgroundColor)
      case blockSetText(Anytype_Event.Block.Set.Text)
      case blockSetFile(Anytype_Event.Block.Set.File)
      case blockSetLink(Anytype_Event.Block.Set.Link)
      case blockSetBookmark(Anytype_Event.Block.Set.Bookmark)
      case blockSetAlign(Anytype_Event.Block.Set.Align)
      case blockSetDiv(Anytype_Event.Block.Set.Div)
      case blockSetRelation(Anytype_Event.Block.Set.Relation)
      case blockSetLatex(Anytype_Event.Block.Set.Latex)
      case blockSetVerticalAlign(Anytype_Event.Block.Set.VerticalAlign)
      case blockSetTableRow(Anytype_Event.Block.Set.TableRow)
      case blockSetWidget(Anytype_Event.Block.Set.Widget)
      case blockDataviewViewSet(Anytype_Event.Block.Dataview.ViewSet)
      case blockDataviewViewDelete(Anytype_Event.Block.Dataview.ViewDelete)
      case blockDataviewViewOrder(Anytype_Event.Block.Dataview.ViewOrder)
      /// deprecated, source is no longer used
      case blockDataviewSourceSet(Anytype_Event.Block.Dataview.SourceSet)
      case blockDataViewGroupOrderUpdate(Anytype_Event.Block.Dataview.GroupOrderUpdate)
      case blockDataViewObjectOrderUpdate(Anytype_Event.Block.Dataview.ObjectOrderUpdate)
      case blockDataviewRelationDelete(Anytype_Event.Block.Dataview.RelationDelete)
      case blockDataviewRelationSet(Anytype_Event.Block.Dataview.RelationSet)
      case blockDataviewViewUpdate(Anytype_Event.Block.Dataview.ViewUpdate)
      case blockDataviewTargetObjectIDSet(Anytype_Event.Block.Dataview.TargetObjectIdSet)
      case blockDataviewIsCollectionSet(Anytype_Event.Block.Dataview.IsCollectionSet)
      /// deprecated
      case blockDataviewOldRelationDelete(Anytype_Event.Block.Dataview.OldRelationDelete)
      /// deprecated
      case blockDataviewOldRelationSet(Anytype_Event.Block.Dataview.OldRelationSet)
      case userBlockJoin(Anytype_Event.User.Block.Join)
      case userBlockLeft(Anytype_Event.User.Block.Left)
      case userBlockSelectRange(Anytype_Event.User.Block.SelectRange)
      case userBlockTextRange(Anytype_Event.User.Block.TextRange)
      case ping(Anytype_Event.Ping)
      case processNew(Anytype_Event.Process.New)
      case processUpdate(Anytype_Event.Process.Update)
      case processDone(Anytype_Event.Process.Done)
      case threadStatus(Anytype_Event.Status.Thread)
      case fileLimitReached(Anytype_Event.File.LimitReached)
      case fileSpaceUsage(Anytype_Event.File.SpaceUsage)
      case fileLocalUsage(Anytype_Event.File.LocalUsage)
      case fileLimitUpdated(Anytype_Event.File.LimitUpdated)
      case notificationSend(Anytype_Event.Notification.Send)
      case notificationUpdate(Anytype_Event.Notification.Update)
      case payloadBroadcast(Anytype_Event.Payload.Broadcast)
      case membershipUpdate(Anytype_Event.Membership.Update)

    #if !swift(>=4.1)
      public static func ==(lhs: Anytype_Event.Message.OneOf_Value, rhs: Anytype_Event.Message.OneOf_Value) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.accountShow, .accountShow): return {
          guard case .accountShow(let l) = lhs, case .accountShow(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.accountDetails, .accountDetails): return {
          guard case .accountDetails(let l) = lhs, case .accountDetails(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.accountConfigUpdate, .accountConfigUpdate): return {
          guard case .accountConfigUpdate(let l) = lhs, case .accountConfigUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.accountUpdate, .accountUpdate): return {
          guard case .accountUpdate(let l) = lhs, case .accountUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.accountLinkChallenge, .accountLinkChallenge): return {
          guard case .accountLinkChallenge(let l) = lhs, case .accountLinkChallenge(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectDetailsSet, .objectDetailsSet): return {
          guard case .objectDetailsSet(let l) = lhs, case .objectDetailsSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectDetailsAmend, .objectDetailsAmend): return {
          guard case .objectDetailsAmend(let l) = lhs, case .objectDetailsAmend(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectDetailsUnset, .objectDetailsUnset): return {
          guard case .objectDetailsUnset(let l) = lhs, case .objectDetailsUnset(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectRelationsAmend, .objectRelationsAmend): return {
          guard case .objectRelationsAmend(let l) = lhs, case .objectRelationsAmend(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectRelationsRemove, .objectRelationsRemove): return {
          guard case .objectRelationsRemove(let l) = lhs, case .objectRelationsRemove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectRemove, .objectRemove): return {
          guard case .objectRemove(let l) = lhs, case .objectRemove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectRestrictionsSet, .objectRestrictionsSet): return {
          guard case .objectRestrictionsSet(let l) = lhs, case .objectRestrictionsSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.subscriptionAdd, .subscriptionAdd): return {
          guard case .subscriptionAdd(let l) = lhs, case .subscriptionAdd(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.subscriptionRemove, .subscriptionRemove): return {
          guard case .subscriptionRemove(let l) = lhs, case .subscriptionRemove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.subscriptionPosition, .subscriptionPosition): return {
          guard case .subscriptionPosition(let l) = lhs, case .subscriptionPosition(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.subscriptionCounters, .subscriptionCounters): return {
          guard case .subscriptionCounters(let l) = lhs, case .subscriptionCounters(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.subscriptionGroups, .subscriptionGroups): return {
          guard case .subscriptionGroups(let l) = lhs, case .subscriptionGroups(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockAdd, .blockAdd): return {
          guard case .blockAdd(let l) = lhs, case .blockAdd(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDelete, .blockDelete): return {
          guard case .blockDelete(let l) = lhs, case .blockDelete(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.filesUpload, .filesUpload): return {
          guard case .filesUpload(let l) = lhs, case .filesUpload(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.marksInfo, .marksInfo): return {
          guard case .marksInfo(let l) = lhs, case .marksInfo(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetFields, .blockSetFields): return {
          guard case .blockSetFields(let l) = lhs, case .blockSetFields(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetChildrenIds, .blockSetChildrenIds): return {
          guard case .blockSetChildrenIds(let l) = lhs, case .blockSetChildrenIds(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetRestrictions, .blockSetRestrictions): return {
          guard case .blockSetRestrictions(let l) = lhs, case .blockSetRestrictions(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetBackgroundColor, .blockSetBackgroundColor): return {
          guard case .blockSetBackgroundColor(let l) = lhs, case .blockSetBackgroundColor(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetText, .blockSetText): return {
          guard case .blockSetText(let l) = lhs, case .blockSetText(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetFile, .blockSetFile): return {
          guard case .blockSetFile(let l) = lhs, case .blockSetFile(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetLink, .blockSetLink): return {
          guard case .blockSetLink(let l) = lhs, case .blockSetLink(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetBookmark, .blockSetBookmark): return {
          guard case .blockSetBookmark(let l) = lhs, case .blockSetBookmark(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetAlign, .blockSetAlign): return {
          guard case .blockSetAlign(let l) = lhs, case .blockSetAlign(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetDiv, .blockSetDiv): return {
          guard case .blockSetDiv(let l) = lhs, case .blockSetDiv(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetRelation, .blockSetRelation): return {
          guard case .blockSetRelation(let l) = lhs, case .blockSetRelation(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetLatex, .blockSetLatex): return {
          guard case .blockSetLatex(let l) = lhs, case .blockSetLatex(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetVerticalAlign, .blockSetVerticalAlign): return {
          guard case .blockSetVerticalAlign(let l) = lhs, case .blockSetVerticalAlign(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetTableRow, .blockSetTableRow): return {
          guard case .blockSetTableRow(let l) = lhs, case .blockSetTableRow(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockSetWidget, .blockSetWidget): return {
          guard case .blockSetWidget(let l) = lhs, case .blockSetWidget(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewViewSet, .blockDataviewViewSet): return {
          guard case .blockDataviewViewSet(let l) = lhs, case .blockDataviewViewSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewViewDelete, .blockDataviewViewDelete): return {
          guard case .blockDataviewViewDelete(let l) = lhs, case .blockDataviewViewDelete(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewViewOrder, .blockDataviewViewOrder): return {
          guard case .blockDataviewViewOrder(let l) = lhs, case .blockDataviewViewOrder(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewSourceSet, .blockDataviewSourceSet): return {
          guard case .blockDataviewSourceSet(let l) = lhs, case .blockDataviewSourceSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataViewGroupOrderUpdate, .blockDataViewGroupOrderUpdate): return {
          guard case .blockDataViewGroupOrderUpdate(let l) = lhs, case .blockDataViewGroupOrderUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataViewObjectOrderUpdate, .blockDataViewObjectOrderUpdate): return {
          guard case .blockDataViewObjectOrderUpdate(let l) = lhs, case .blockDataViewObjectOrderUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewRelationDelete, .blockDataviewRelationDelete): return {
          guard case .blockDataviewRelationDelete(let l) = lhs, case .blockDataviewRelationDelete(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewRelationSet, .blockDataviewRelationSet): return {
          guard case .blockDataviewRelationSet(let l) = lhs, case .blockDataviewRelationSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewViewUpdate, .blockDataviewViewUpdate): return {
          guard case .blockDataviewViewUpdate(let l) = lhs, case .blockDataviewViewUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewTargetObjectIDSet, .blockDataviewTargetObjectIDSet): return {
          guard case .blockDataviewTargetObjectIDSet(let l) = lhs, case .blockDataviewTargetObjectIDSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewIsCollectionSet, .blockDataviewIsCollectionSet): return {
          guard case .blockDataviewIsCollectionSet(let l) = lhs, case .blockDataviewIsCollectionSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewOldRelationDelete, .blockDataviewOldRelationDelete): return {
          guard case .blockDataviewOldRelationDelete(let l) = lhs, case .blockDataviewOldRelationDelete(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDataviewOldRelationSet, .blockDataviewOldRelationSet): return {
          guard case .blockDataviewOldRelationSet(let l) = lhs, case .blockDataviewOldRelationSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.userBlockJoin, .userBlockJoin): return {
          guard case .userBlockJoin(let l) = lhs, case .userBlockJoin(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.userBlockLeft, .userBlockLeft): return {
          guard case .userBlockLeft(let l) = lhs, case .userBlockLeft(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.userBlockSelectRange, .userBlockSelectRange): return {
          guard case .userBlockSelectRange(let l) = lhs, case .userBlockSelectRange(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.userBlockTextRange, .userBlockTextRange): return {
          guard case .userBlockTextRange(let l) = lhs, case .userBlockTextRange(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.ping, .ping): return {
          guard case .ping(let l) = lhs, case .ping(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.processNew, .processNew): return {
          guard case .processNew(let l) = lhs, case .processNew(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.processUpdate, .processUpdate): return {
          guard case .processUpdate(let l) = lhs, case .processUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.processDone, .processDone): return {
          guard case .processDone(let l) = lhs, case .processDone(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.threadStatus, .threadStatus): return {
          guard case .threadStatus(let l) = lhs, case .threadStatus(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.fileLimitReached, .fileLimitReached): return {
          guard case .fileLimitReached(let l) = lhs, case .fileLimitReached(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.fileSpaceUsage, .fileSpaceUsage): return {
          guard case .fileSpaceUsage(let l) = lhs, case .fileSpaceUsage(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.fileLocalUsage, .fileLocalUsage): return {
          guard case .fileLocalUsage(let l) = lhs, case .fileLocalUsage(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.fileLimitUpdated, .fileLimitUpdated): return {
          guard case .fileLimitUpdated(let l) = lhs, case .fileLimitUpdated(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.notificationSend, .notificationSend): return {
          guard case .notificationSend(let l) = lhs, case .notificationSend(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.notificationUpdate, .notificationUpdate): return {
          guard case .notificationUpdate(let l) = lhs, case .notificationUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.payloadBroadcast, .payloadBroadcast): return {
          guard case .payloadBroadcast(let l) = lhs, case .payloadBroadcast(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.membershipUpdate, .membershipUpdate): return {
          guard case .membershipUpdate(let l) = lhs, case .membershipUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  public struct Account {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    ///*
    /// Message, that will be sent to the front on each account found after an AccountRecoverRequest
    public struct Show {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Number of an account in an all found accounts list
      public var index: Int32 = 0

      /// An Account, that has been found for the mnemonic
      public var account: Anytype_Model_Account {
        get {return _account ?? Anytype_Model_Account()}
        set {_account = newValue}
      }
      /// Returns true if `account` has been explicitly set.
      public var hasAccount: Bool {return self._account != nil}
      /// Clears the value of `account`. Subsequent reads from it will return its default value.
      public mutating func clearAccount() {self._account = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _account: Anytype_Model_Account? = nil
    }

    public struct Details {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var profileID: String = String()

      public var details: SwiftProtobuf.Google_Protobuf_Struct {
        get {return _details ?? SwiftProtobuf.Google_Protobuf_Struct()}
        set {_details = newValue}
      }
      /// Returns true if `details` has been explicitly set.
      public var hasDetails: Bool {return self._details != nil}
      /// Clears the value of `details`. Subsequent reads from it will return its default value.
      public mutating func clearDetails() {self._details = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _details: SwiftProtobuf.Google_Protobuf_Struct? = nil
    }

    public struct Config {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Update {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var config: Anytype_Model_Account.Config {
          get {return _config ?? Anytype_Model_Account.Config()}
          set {_config = newValue}
        }
        /// Returns true if `config` has been explicitly set.
        public var hasConfig: Bool {return self._config != nil}
        /// Clears the value of `config`. Subsequent reads from it will return its default value.
        public mutating func clearConfig() {self._config = nil}

        public var status: Anytype_Model_Account.Status {
          get {return _status ?? Anytype_Model_Account.Status()}
          set {_status = newValue}
        }
        /// Returns true if `status` has been explicitly set.
        public var hasStatus: Bool {return self._status != nil}
        /// Clears the value of `status`. Subsequent reads from it will return its default value.
        public mutating func clearStatus() {self._status = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _config: Anytype_Model_Account.Config? = nil
        fileprivate var _status: Anytype_Model_Account.Status? = nil
      }

      public init() {}
    }

    public struct Update {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var config: Anytype_Model_Account.Config {
        get {return _config ?? Anytype_Model_Account.Config()}
        set {_config = newValue}
      }
      /// Returns true if `config` has been explicitly set.
      public var hasConfig: Bool {return self._config != nil}
      /// Clears the value of `config`. Subsequent reads from it will return its default value.
      public mutating func clearConfig() {self._config = nil}

      public var status: Anytype_Model_Account.Status {
        get {return _status ?? Anytype_Model_Account.Status()}
        set {_status = newValue}
      }
      /// Returns true if `status` has been explicitly set.
      public var hasStatus: Bool {return self._status != nil}
      /// Clears the value of `status`. Subsequent reads from it will return its default value.
      public mutating func clearStatus() {self._status = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _config: Anytype_Model_Account.Config? = nil
      fileprivate var _status: Anytype_Model_Account.Status? = nil
    }

    public struct LinkChallenge {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var challenge: String = String()

      public var clientInfo: Anytype_Event.Account.LinkChallenge.ClientInfo {
        get {return _clientInfo ?? Anytype_Event.Account.LinkChallenge.ClientInfo()}
        set {_clientInfo = newValue}
      }
      /// Returns true if `clientInfo` has been explicitly set.
      public var hasClientInfo: Bool {return self._clientInfo != nil}
      /// Clears the value of `clientInfo`. Subsequent reads from it will return its default value.
      public mutating func clearClientInfo() {self._clientInfo = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct ClientInfo {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var processName: String = String()

        public var processPath: String = String()

        public var signatureVerified: Bool = false

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}

      fileprivate var _clientInfo: Anytype_Event.Account.LinkChallenge.ClientInfo? = nil
    }

    public init() {}
  }

  public struct Object {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct Details {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Amend (i.e. add a new key-value pair or update an existing key-value pair) existing state
      public struct Amend {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// context objectId
        public var id: String = String()

        /// slice of changed key-values
        public var details: [Anytype_Event.Object.Details.Amend.KeyValue] = []

        public var subIds: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct KeyValue {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var key: String = String()

          /// should not be null
          public var value: SwiftProtobuf.Google_Protobuf_Value {
            get {return _value ?? SwiftProtobuf.Google_Protobuf_Value()}
            set {_value = newValue}
          }
          /// Returns true if `value` has been explicitly set.
          public var hasValue: Bool {return self._value != nil}
          /// Clears the value of `value`. Subsequent reads from it will return its default value.
          public mutating func clearValue() {self._value = nil}

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}

          fileprivate var _value: SwiftProtobuf.Google_Protobuf_Value? = nil
        }

        public init() {}
      }

      /// Overwrite current state
      public struct Set {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// context objectId
        public var id: String = String()

        /// can not be a partial state. Should replace client details state
        public var details: SwiftProtobuf.Google_Protobuf_Struct {
          get {return _details ?? SwiftProtobuf.Google_Protobuf_Struct()}
          set {_details = newValue}
        }
        /// Returns true if `details` has been explicitly set.
        public var hasDetails: Bool {return self._details != nil}
        /// Clears the value of `details`. Subsequent reads from it will return its default value.
        public mutating func clearDetails() {self._details = nil}

        public var subIds: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _details: SwiftProtobuf.Google_Protobuf_Struct? = nil
      }

      /// Unset existing detail keys
      public struct Unset {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// context objectId
        public var id: String = String()

        public var keys: [String] = []

        public var subIds: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}
    }

    public struct Subscription {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Adds new document to subscriptions
      public struct Add {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// object id
        public var id: String = String()

        /// id of previous doc in order, empty means first
        public var afterID: String = String()

        /// subscription id
        public var subID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// Removes document from subscription
      public struct Remove {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// object id
        public var id: String = String()

        /// subscription id
        public var subID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// Indicates new position of document
      public struct Position {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// object id
        public var id: String = String()

        /// id of previous doc in order, empty means first
        public var afterID: String = String()

        /// subscription id
        public var subID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Counters {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// total available records
        public var total: Int64 = 0

        /// how many records available after
        public var nextCount: Int64 = 0

        /// how many records available before
        public var prevCount: Int64 = 0

        /// subscription id
        public var subID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Groups {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var subID: String = String()

        public var group: Anytype_Model_Block.Content.Dataview.Group {
          get {return _group ?? Anytype_Model_Block.Content.Dataview.Group()}
          set {_group = newValue}
        }
        /// Returns true if `group` has been explicitly set.
        public var hasGroup: Bool {return self._group != nil}
        /// Clears the value of `group`. Subsequent reads from it will return its default value.
        public mutating func clearGroup() {self._group = nil}

        public var remove: Bool = false

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _group: Anytype_Model_Block.Content.Dataview.Group? = nil
      }

      public init() {}
    }

    public struct Relations {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Amend {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// context objectId
        public var id: String = String()

        public var relationLinks: [Anytype_Model_RelationLink] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Remove {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// context objectId
        public var id: String = String()

        public var relationKeys: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}
    }

    public struct Remove {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// notifies that objects were removed
      public var ids: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct Restrictions {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Set {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var restrictions: Anytype_Model_Restrictions {
          get {return _restrictions ?? Anytype_Model_Restrictions()}
          set {_restrictions = newValue}
        }
        /// Returns true if `restrictions` has been explicitly set.
        public var hasRestrictions: Bool {return self._restrictions != nil}
        /// Clears the value of `restrictions`. Subsequent reads from it will return its default value.
        public mutating func clearRestrictions() {self._restrictions = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _restrictions: Anytype_Model_Restrictions? = nil
      }

      public init() {}
    }

    public init() {}
  }

  public struct Block {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    ///
    /// Event to show internal blocks on a client.
    /// Example Scenarios
    /// A. Block Creation
    /// 1. Block A have been created on a client C1
    /// 2. Client C2 receives Event.Block.Add(Block A), Event.Block.Update(Page.children)
    /// B. Partial block load
    /// 1. Client C1 opens Page1, that contains, for example, 133 blocks.
    /// 2. M -> F: ShowFullScreen(Root, blocks1-50)
    /// 3. M -> F: Block.Add(blocks51-100)
    /// 3. M -> F: Block.Add(blocks101-133)
    public struct Add {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// id -> block
      public var blocks: [Anytype_Model_Block] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    ///*
    /// Middleware to front end event message, that will be sent on one of this scenarios:
    /// Precondition: user A opened a block
    /// 1. User A drops a set of files/pictures/videos
    /// 2. User A creates a MediaBlock and drops a single media, that corresponds to its type.
    public struct FilesUpload {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// if empty => create new blocks
      public var blockID: String = String()

      /// filepaths to the files
      public var filePath: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct Delete {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var blockIds: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct MarksInfo {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var marksInRange: [Anytype_Model_Block.Content.Text.Mark.TypeEnum] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct Set {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Relation {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var key: Anytype_Event.Block.Set.Relation.Key {
          get {return _key ?? Anytype_Event.Block.Set.Relation.Key()}
          set {_key = newValue}
        }
        /// Returns true if `key` has been explicitly set.
        public var hasKey: Bool {return self._key != nil}
        /// Clears the value of `key`. Subsequent reads from it will return its default value.
        public mutating func clearKey() {self._key = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Key {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _key: Anytype_Event.Block.Set.Relation.Key? = nil
      }

      public struct Fields {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var fields: SwiftProtobuf.Google_Protobuf_Struct {
          get {return _fields ?? SwiftProtobuf.Google_Protobuf_Struct()}
          set {_fields = newValue}
        }
        /// Returns true if `fields` has been explicitly set.
        public var hasFields: Bool {return self._fields != nil}
        /// Clears the value of `fields`. Subsequent reads from it will return its default value.
        public mutating func clearFields() {self._fields = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _fields: SwiftProtobuf.Google_Protobuf_Struct? = nil
      }

      public struct ChildrenIds {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var childrenIds: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Restrictions {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var restrictions: Anytype_Model_Block.Restrictions {
          get {return _restrictions ?? Anytype_Model_Block.Restrictions()}
          set {_restrictions = newValue}
        }
        /// Returns true if `restrictions` has been explicitly set.
        public var hasRestrictions: Bool {return self._restrictions != nil}
        /// Clears the value of `restrictions`. Subsequent reads from it will return its default value.
        public mutating func clearRestrictions() {self._restrictions = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _restrictions: Anytype_Model_Block.Restrictions? = nil
      }

      public struct BackgroundColor {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var backgroundColor: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Align {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var align: Anytype_Model_Block.Align = .left

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct VerticalAlign {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var verticalAlign: Anytype_Model_Block.VerticalAlign = .top

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Text {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var text: Anytype_Event.Block.Set.Text.Text {
          get {return _text ?? Anytype_Event.Block.Set.Text.Text()}
          set {_text = newValue}
        }
        /// Returns true if `text` has been explicitly set.
        public var hasText: Bool {return self._text != nil}
        /// Clears the value of `text`. Subsequent reads from it will return its default value.
        public mutating func clearText() {self._text = nil}

        public var style: Anytype_Event.Block.Set.Text.Style {
          get {return _style ?? Anytype_Event.Block.Set.Text.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        public var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        public mutating func clearStyle() {self._style = nil}

        public var marks: Anytype_Event.Block.Set.Text.Marks {
          get {return _marks ?? Anytype_Event.Block.Set.Text.Marks()}
          set {_marks = newValue}
        }
        /// Returns true if `marks` has been explicitly set.
        public var hasMarks: Bool {return self._marks != nil}
        /// Clears the value of `marks`. Subsequent reads from it will return its default value.
        public mutating func clearMarks() {self._marks = nil}

        public var checked: Anytype_Event.Block.Set.Text.Checked {
          get {return _checked ?? Anytype_Event.Block.Set.Text.Checked()}
          set {_checked = newValue}
        }
        /// Returns true if `checked` has been explicitly set.
        public var hasChecked: Bool {return self._checked != nil}
        /// Clears the value of `checked`. Subsequent reads from it will return its default value.
        public mutating func clearChecked() {self._checked = nil}

        public var color: Anytype_Event.Block.Set.Text.Color {
          get {return _color ?? Anytype_Event.Block.Set.Text.Color()}
          set {_color = newValue}
        }
        /// Returns true if `color` has been explicitly set.
        public var hasColor: Bool {return self._color != nil}
        /// Clears the value of `color`. Subsequent reads from it will return its default value.
        public mutating func clearColor() {self._color = nil}

        public var iconEmoji: Anytype_Event.Block.Set.Text.IconEmoji {
          get {return _iconEmoji ?? Anytype_Event.Block.Set.Text.IconEmoji()}
          set {_iconEmoji = newValue}
        }
        /// Returns true if `iconEmoji` has been explicitly set.
        public var hasIconEmoji: Bool {return self._iconEmoji != nil}
        /// Clears the value of `iconEmoji`. Subsequent reads from it will return its default value.
        public mutating func clearIconEmoji() {self._iconEmoji = nil}

        public var iconImage: Anytype_Event.Block.Set.Text.IconImage {
          get {return _iconImage ?? Anytype_Event.Block.Set.Text.IconImage()}
          set {_iconImage = newValue}
        }
        /// Returns true if `iconImage` has been explicitly set.
        public var hasIconImage: Bool {return self._iconImage != nil}
        /// Clears the value of `iconImage`. Subsequent reads from it will return its default value.
        public mutating func clearIconImage() {self._iconImage = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Text {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Text.Style = .paragraph

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Marks {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Text.Marks {
            get {return _value ?? Anytype_Model_Block.Content.Text.Marks()}
            set {_value = newValue}
          }
          /// Returns true if `value` has been explicitly set.
          public var hasValue: Bool {return self._value != nil}
          /// Clears the value of `value`. Subsequent reads from it will return its default value.
          public mutating func clearValue() {self._value = nil}

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}

          fileprivate var _value: Anytype_Model_Block.Content.Text.Marks? = nil
        }

        public struct Checked {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Bool = false

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Color {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct IconEmoji {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct IconImage {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _text: Anytype_Event.Block.Set.Text.Text? = nil
        fileprivate var _style: Anytype_Event.Block.Set.Text.Style? = nil
        fileprivate var _marks: Anytype_Event.Block.Set.Text.Marks? = nil
        fileprivate var _checked: Anytype_Event.Block.Set.Text.Checked? = nil
        fileprivate var _color: Anytype_Event.Block.Set.Text.Color? = nil
        fileprivate var _iconEmoji: Anytype_Event.Block.Set.Text.IconEmoji? = nil
        fileprivate var _iconImage: Anytype_Event.Block.Set.Text.IconImage? = nil
      }

      public struct Latex {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var text: Anytype_Event.Block.Set.Latex.Text {
          get {return _text ?? Anytype_Event.Block.Set.Latex.Text()}
          set {_text = newValue}
        }
        /// Returns true if `text` has been explicitly set.
        public var hasText: Bool {return self._text != nil}
        /// Clears the value of `text`. Subsequent reads from it will return its default value.
        public mutating func clearText() {self._text = nil}

        public var processor: Anytype_Event.Block.Set.Latex.Processor {
          get {return _processor ?? Anytype_Event.Block.Set.Latex.Processor()}
          set {_processor = newValue}
        }
        /// Returns true if `processor` has been explicitly set.
        public var hasProcessor: Bool {return self._processor != nil}
        /// Clears the value of `processor`. Subsequent reads from it will return its default value.
        public mutating func clearProcessor() {self._processor = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Text {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Processor {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Latex.Processor = .latex

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _text: Anytype_Event.Block.Set.Latex.Text? = nil
        fileprivate var _processor: Anytype_Event.Block.Set.Latex.Processor? = nil
      }

      public struct Div {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var style: Anytype_Event.Block.Set.Div.Style {
          get {return _style ?? Anytype_Event.Block.Set.Div.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        public var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        public mutating func clearStyle() {self._style = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Div.Style = .line

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _style: Anytype_Event.Block.Set.Div.Style? = nil
      }

      public struct File {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var type: Anytype_Event.Block.Set.File.TypeMessage {
          get {return _type ?? Anytype_Event.Block.Set.File.TypeMessage()}
          set {_type = newValue}
        }
        /// Returns true if `type` has been explicitly set.
        public var hasType: Bool {return self._type != nil}
        /// Clears the value of `type`. Subsequent reads from it will return its default value.
        public mutating func clearType() {self._type = nil}

        public var state: Anytype_Event.Block.Set.File.State {
          get {return _state ?? Anytype_Event.Block.Set.File.State()}
          set {_state = newValue}
        }
        /// Returns true if `state` has been explicitly set.
        public var hasState: Bool {return self._state != nil}
        /// Clears the value of `state`. Subsequent reads from it will return its default value.
        public mutating func clearState() {self._state = nil}

        public var mime: Anytype_Event.Block.Set.File.Mime {
          get {return _mime ?? Anytype_Event.Block.Set.File.Mime()}
          set {_mime = newValue}
        }
        /// Returns true if `mime` has been explicitly set.
        public var hasMime: Bool {return self._mime != nil}
        /// Clears the value of `mime`. Subsequent reads from it will return its default value.
        public mutating func clearMime() {self._mime = nil}

        public var hash: Anytype_Event.Block.Set.File.Hash {
          get {return _hash ?? Anytype_Event.Block.Set.File.Hash()}
          set {_hash = newValue}
        }
        /// Returns true if `hash` has been explicitly set.
        public var hasHash: Bool {return self._hash != nil}
        /// Clears the value of `hash`. Subsequent reads from it will return its default value.
        public mutating func clearHash() {self._hash = nil}

        public var name: Anytype_Event.Block.Set.File.Name {
          get {return _name ?? Anytype_Event.Block.Set.File.Name()}
          set {_name = newValue}
        }
        /// Returns true if `name` has been explicitly set.
        public var hasName: Bool {return self._name != nil}
        /// Clears the value of `name`. Subsequent reads from it will return its default value.
        public mutating func clearName() {self._name = nil}

        public var size: Anytype_Event.Block.Set.File.Size {
          get {return _size ?? Anytype_Event.Block.Set.File.Size()}
          set {_size = newValue}
        }
        /// Returns true if `size` has been explicitly set.
        public var hasSize: Bool {return self._size != nil}
        /// Clears the value of `size`. Subsequent reads from it will return its default value.
        public mutating func clearSize() {self._size = nil}

        public var style: Anytype_Event.Block.Set.File.Style {
          get {return _style ?? Anytype_Event.Block.Set.File.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        public var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        public mutating func clearStyle() {self._style = nil}

        public var targetObjectID: Anytype_Event.Block.Set.File.TargetObjectId {
          get {return _targetObjectID ?? Anytype_Event.Block.Set.File.TargetObjectId()}
          set {_targetObjectID = newValue}
        }
        /// Returns true if `targetObjectID` has been explicitly set.
        public var hasTargetObjectID: Bool {return self._targetObjectID != nil}
        /// Clears the value of `targetObjectID`. Subsequent reads from it will return its default value.
        public mutating func clearTargetObjectID() {self._targetObjectID = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Name {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Width {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Int32 = 0

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct State {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.File.State = .empty

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct TypeMessage {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.File.TypeEnum = .none

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.File.Style = .auto

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Hash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Mime {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Size {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Int64 = 0

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct TargetObjectId {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _type: Anytype_Event.Block.Set.File.TypeMessage? = nil
        fileprivate var _state: Anytype_Event.Block.Set.File.State? = nil
        fileprivate var _mime: Anytype_Event.Block.Set.File.Mime? = nil
        fileprivate var _hash: Anytype_Event.Block.Set.File.Hash? = nil
        fileprivate var _name: Anytype_Event.Block.Set.File.Name? = nil
        fileprivate var _size: Anytype_Event.Block.Set.File.Size? = nil
        fileprivate var _style: Anytype_Event.Block.Set.File.Style? = nil
        fileprivate var _targetObjectID: Anytype_Event.Block.Set.File.TargetObjectId? = nil
      }

      public struct Link {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var targetBlockID: Anytype_Event.Block.Set.Link.TargetBlockId {
          get {return _targetBlockID ?? Anytype_Event.Block.Set.Link.TargetBlockId()}
          set {_targetBlockID = newValue}
        }
        /// Returns true if `targetBlockID` has been explicitly set.
        public var hasTargetBlockID: Bool {return self._targetBlockID != nil}
        /// Clears the value of `targetBlockID`. Subsequent reads from it will return its default value.
        public mutating func clearTargetBlockID() {self._targetBlockID = nil}

        public var style: Anytype_Event.Block.Set.Link.Style {
          get {return _style ?? Anytype_Event.Block.Set.Link.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        public var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        public mutating func clearStyle() {self._style = nil}

        public var fields: Anytype_Event.Block.Set.Link.Fields {
          get {return _fields ?? Anytype_Event.Block.Set.Link.Fields()}
          set {_fields = newValue}
        }
        /// Returns true if `fields` has been explicitly set.
        public var hasFields: Bool {return self._fields != nil}
        /// Clears the value of `fields`. Subsequent reads from it will return its default value.
        public mutating func clearFields() {self._fields = nil}

        public var iconSize: Anytype_Event.Block.Set.Link.IconSize {
          get {return _iconSize ?? Anytype_Event.Block.Set.Link.IconSize()}
          set {_iconSize = newValue}
        }
        /// Returns true if `iconSize` has been explicitly set.
        public var hasIconSize: Bool {return self._iconSize != nil}
        /// Clears the value of `iconSize`. Subsequent reads from it will return its default value.
        public mutating func clearIconSize() {self._iconSize = nil}

        public var cardStyle: Anytype_Event.Block.Set.Link.CardStyle {
          get {return _cardStyle ?? Anytype_Event.Block.Set.Link.CardStyle()}
          set {_cardStyle = newValue}
        }
        /// Returns true if `cardStyle` has been explicitly set.
        public var hasCardStyle: Bool {return self._cardStyle != nil}
        /// Clears the value of `cardStyle`. Subsequent reads from it will return its default value.
        public mutating func clearCardStyle() {self._cardStyle = nil}

        public var description_p: Anytype_Event.Block.Set.Link.Description {
          get {return _description_p ?? Anytype_Event.Block.Set.Link.Description()}
          set {_description_p = newValue}
        }
        /// Returns true if `description_p` has been explicitly set.
        public var hasDescription_p: Bool {return self._description_p != nil}
        /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
        public mutating func clearDescription_p() {self._description_p = nil}

        public var relations: Anytype_Event.Block.Set.Link.Relations {
          get {return _relations ?? Anytype_Event.Block.Set.Link.Relations()}
          set {_relations = newValue}
        }
        /// Returns true if `relations` has been explicitly set.
        public var hasRelations: Bool {return self._relations != nil}
        /// Clears the value of `relations`. Subsequent reads from it will return its default value.
        public mutating func clearRelations() {self._relations = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct TargetBlockId {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Link.Style = .page

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Fields {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: SwiftProtobuf.Google_Protobuf_Struct {
            get {return _value ?? SwiftProtobuf.Google_Protobuf_Struct()}
            set {_value = newValue}
          }
          /// Returns true if `value` has been explicitly set.
          public var hasValue: Bool {return self._value != nil}
          /// Clears the value of `value`. Subsequent reads from it will return its default value.
          public mutating func clearValue() {self._value = nil}

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}

          fileprivate var _value: SwiftProtobuf.Google_Protobuf_Struct? = nil
        }

        public struct IconSize {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Link.IconSize = .sizeNone

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct CardStyle {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Link.CardStyle = .text

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Description {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Link.Description = .none

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Relations {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: [String] = []

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _targetBlockID: Anytype_Event.Block.Set.Link.TargetBlockId? = nil
        fileprivate var _style: Anytype_Event.Block.Set.Link.Style? = nil
        fileprivate var _fields: Anytype_Event.Block.Set.Link.Fields? = nil
        fileprivate var _iconSize: Anytype_Event.Block.Set.Link.IconSize? = nil
        fileprivate var _cardStyle: Anytype_Event.Block.Set.Link.CardStyle? = nil
        fileprivate var _description_p: Anytype_Event.Block.Set.Link.Description? = nil
        fileprivate var _relations: Anytype_Event.Block.Set.Link.Relations? = nil
      }

      public struct Bookmark {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var url: Anytype_Event.Block.Set.Bookmark.Url {
          get {return _url ?? Anytype_Event.Block.Set.Bookmark.Url()}
          set {_url = newValue}
        }
        /// Returns true if `url` has been explicitly set.
        public var hasURL: Bool {return self._url != nil}
        /// Clears the value of `url`. Subsequent reads from it will return its default value.
        public mutating func clearURL() {self._url = nil}

        public var title: Anytype_Event.Block.Set.Bookmark.Title {
          get {return _title ?? Anytype_Event.Block.Set.Bookmark.Title()}
          set {_title = newValue}
        }
        /// Returns true if `title` has been explicitly set.
        public var hasTitle: Bool {return self._title != nil}
        /// Clears the value of `title`. Subsequent reads from it will return its default value.
        public mutating func clearTitle() {self._title = nil}

        public var description_p: Anytype_Event.Block.Set.Bookmark.Description {
          get {return _description_p ?? Anytype_Event.Block.Set.Bookmark.Description()}
          set {_description_p = newValue}
        }
        /// Returns true if `description_p` has been explicitly set.
        public var hasDescription_p: Bool {return self._description_p != nil}
        /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
        public mutating func clearDescription_p() {self._description_p = nil}

        public var imageHash: Anytype_Event.Block.Set.Bookmark.ImageHash {
          get {return _imageHash ?? Anytype_Event.Block.Set.Bookmark.ImageHash()}
          set {_imageHash = newValue}
        }
        /// Returns true if `imageHash` has been explicitly set.
        public var hasImageHash: Bool {return self._imageHash != nil}
        /// Clears the value of `imageHash`. Subsequent reads from it will return its default value.
        public mutating func clearImageHash() {self._imageHash = nil}

        public var faviconHash: Anytype_Event.Block.Set.Bookmark.FaviconHash {
          get {return _faviconHash ?? Anytype_Event.Block.Set.Bookmark.FaviconHash()}
          set {_faviconHash = newValue}
        }
        /// Returns true if `faviconHash` has been explicitly set.
        public var hasFaviconHash: Bool {return self._faviconHash != nil}
        /// Clears the value of `faviconHash`. Subsequent reads from it will return its default value.
        public mutating func clearFaviconHash() {self._faviconHash = nil}

        public var type: Anytype_Event.Block.Set.Bookmark.TypeMessage {
          get {return _type ?? Anytype_Event.Block.Set.Bookmark.TypeMessage()}
          set {_type = newValue}
        }
        /// Returns true if `type` has been explicitly set.
        public var hasType: Bool {return self._type != nil}
        /// Clears the value of `type`. Subsequent reads from it will return its default value.
        public mutating func clearType() {self._type = nil}

        public var targetObjectID: Anytype_Event.Block.Set.Bookmark.TargetObjectId {
          get {return _targetObjectID ?? Anytype_Event.Block.Set.Bookmark.TargetObjectId()}
          set {_targetObjectID = newValue}
        }
        /// Returns true if `targetObjectID` has been explicitly set.
        public var hasTargetObjectID: Bool {return self._targetObjectID != nil}
        /// Clears the value of `targetObjectID`. Subsequent reads from it will return its default value.
        public mutating func clearTargetObjectID() {self._targetObjectID = nil}

        public var state: Anytype_Event.Block.Set.Bookmark.State {
          get {return _state ?? Anytype_Event.Block.Set.Bookmark.State()}
          set {_state = newValue}
        }
        /// Returns true if `state` has been explicitly set.
        public var hasState: Bool {return self._state != nil}
        /// Clears the value of `state`. Subsequent reads from it will return its default value.
        public mutating func clearState() {self._state = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Url {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Title {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Description {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct ImageHash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct FaviconHash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct TypeMessage {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_LinkPreview.TypeEnum = .unknown

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct TargetObjectId {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct State {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Bookmark.State = .empty

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _url: Anytype_Event.Block.Set.Bookmark.Url? = nil
        fileprivate var _title: Anytype_Event.Block.Set.Bookmark.Title? = nil
        fileprivate var _description_p: Anytype_Event.Block.Set.Bookmark.Description? = nil
        fileprivate var _imageHash: Anytype_Event.Block.Set.Bookmark.ImageHash? = nil
        fileprivate var _faviconHash: Anytype_Event.Block.Set.Bookmark.FaviconHash? = nil
        fileprivate var _type: Anytype_Event.Block.Set.Bookmark.TypeMessage? = nil
        fileprivate var _targetObjectID: Anytype_Event.Block.Set.Bookmark.TargetObjectId? = nil
        fileprivate var _state: Anytype_Event.Block.Set.Bookmark.State? = nil
      }

      public struct TableRow {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var isHeader: Anytype_Event.Block.Set.TableRow.IsHeader {
          get {return _isHeader ?? Anytype_Event.Block.Set.TableRow.IsHeader()}
          set {_isHeader = newValue}
        }
        /// Returns true if `isHeader` has been explicitly set.
        public var hasIsHeader: Bool {return self._isHeader != nil}
        /// Clears the value of `isHeader`. Subsequent reads from it will return its default value.
        public mutating func clearIsHeader() {self._isHeader = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct IsHeader {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Bool = false

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _isHeader: Anytype_Event.Block.Set.TableRow.IsHeader? = nil
      }

      public struct Widget {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var layout: Anytype_Event.Block.Set.Widget.Layout {
          get {return _layout ?? Anytype_Event.Block.Set.Widget.Layout()}
          set {_layout = newValue}
        }
        /// Returns true if `layout` has been explicitly set.
        public var hasLayout: Bool {return self._layout != nil}
        /// Clears the value of `layout`. Subsequent reads from it will return its default value.
        public mutating func clearLayout() {self._layout = nil}

        public var limit: Anytype_Event.Block.Set.Widget.Limit {
          get {return _limit ?? Anytype_Event.Block.Set.Widget.Limit()}
          set {_limit = newValue}
        }
        /// Returns true if `limit` has been explicitly set.
        public var hasLimit: Bool {return self._limit != nil}
        /// Clears the value of `limit`. Subsequent reads from it will return its default value.
        public mutating func clearLimit() {self._limit = nil}

        public var viewID: Anytype_Event.Block.Set.Widget.ViewId {
          get {return _viewID ?? Anytype_Event.Block.Set.Widget.ViewId()}
          set {_viewID = newValue}
        }
        /// Returns true if `viewID` has been explicitly set.
        public var hasViewID: Bool {return self._viewID != nil}
        /// Clears the value of `viewID`. Subsequent reads from it will return its default value.
        public mutating func clearViewID() {self._viewID = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Layout {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Widget.Layout = .link

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Limit {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Int32 = 0

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct ViewId {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _layout: Anytype_Event.Block.Set.Widget.Layout? = nil
        fileprivate var _limit: Anytype_Event.Block.Set.Widget.Limit? = nil
        fileprivate var _viewID: Anytype_Event.Block.Set.Widget.ViewId? = nil
      }

      public init() {}
    }

    public struct Fill {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Details {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var details: SwiftProtobuf.Google_Protobuf_Struct {
          get {return _details ?? SwiftProtobuf.Google_Protobuf_Struct()}
          set {_details = newValue}
        }
        /// Returns true if `details` has been explicitly set.
        public var hasDetails: Bool {return self._details != nil}
        /// Clears the value of `details`. Subsequent reads from it will return its default value.
        public mutating func clearDetails() {self._details = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _details: SwiftProtobuf.Google_Protobuf_Struct? = nil
      }

      public struct DatabaseRecords {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var records: [SwiftProtobuf.Google_Protobuf_Struct] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Fields {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var fields: SwiftProtobuf.Google_Protobuf_Struct {
          get {return _fields ?? SwiftProtobuf.Google_Protobuf_Struct()}
          set {_fields = newValue}
        }
        /// Returns true if `fields` has been explicitly set.
        public var hasFields: Bool {return self._fields != nil}
        /// Clears the value of `fields`. Subsequent reads from it will return its default value.
        public mutating func clearFields() {self._fields = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _fields: SwiftProtobuf.Google_Protobuf_Struct? = nil
      }

      public struct ChildrenIds {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var childrenIds: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Restrictions {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var restrictions: Anytype_Model_Block.Restrictions {
          get {return _restrictions ?? Anytype_Model_Block.Restrictions()}
          set {_restrictions = newValue}
        }
        /// Returns true if `restrictions` has been explicitly set.
        public var hasRestrictions: Bool {return self._restrictions != nil}
        /// Clears the value of `restrictions`. Subsequent reads from it will return its default value.
        public mutating func clearRestrictions() {self._restrictions = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _restrictions: Anytype_Model_Block.Restrictions? = nil
      }

      public struct BackgroundColor {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var backgroundColor: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Align {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var align: Anytype_Model_Block.Align = .left

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Text {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var text: Anytype_Event.Block.Fill.Text.Text {
          get {return _text ?? Anytype_Event.Block.Fill.Text.Text()}
          set {_text = newValue}
        }
        /// Returns true if `text` has been explicitly set.
        public var hasText: Bool {return self._text != nil}
        /// Clears the value of `text`. Subsequent reads from it will return its default value.
        public mutating func clearText() {self._text = nil}

        public var style: Anytype_Event.Block.Fill.Text.Style {
          get {return _style ?? Anytype_Event.Block.Fill.Text.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        public var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        public mutating func clearStyle() {self._style = nil}

        public var marks: Anytype_Event.Block.Fill.Text.Marks {
          get {return _marks ?? Anytype_Event.Block.Fill.Text.Marks()}
          set {_marks = newValue}
        }
        /// Returns true if `marks` has been explicitly set.
        public var hasMarks: Bool {return self._marks != nil}
        /// Clears the value of `marks`. Subsequent reads from it will return its default value.
        public mutating func clearMarks() {self._marks = nil}

        public var checked: Anytype_Event.Block.Fill.Text.Checked {
          get {return _checked ?? Anytype_Event.Block.Fill.Text.Checked()}
          set {_checked = newValue}
        }
        /// Returns true if `checked` has been explicitly set.
        public var hasChecked: Bool {return self._checked != nil}
        /// Clears the value of `checked`. Subsequent reads from it will return its default value.
        public mutating func clearChecked() {self._checked = nil}

        public var color: Anytype_Event.Block.Fill.Text.Color {
          get {return _color ?? Anytype_Event.Block.Fill.Text.Color()}
          set {_color = newValue}
        }
        /// Returns true if `color` has been explicitly set.
        public var hasColor: Bool {return self._color != nil}
        /// Clears the value of `color`. Subsequent reads from it will return its default value.
        public mutating func clearColor() {self._color = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Text {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Text.Style = .paragraph

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Marks {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Text.Marks {
            get {return _value ?? Anytype_Model_Block.Content.Text.Marks()}
            set {_value = newValue}
          }
          /// Returns true if `value` has been explicitly set.
          public var hasValue: Bool {return self._value != nil}
          /// Clears the value of `value`. Subsequent reads from it will return its default value.
          public mutating func clearValue() {self._value = nil}

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}

          fileprivate var _value: Anytype_Model_Block.Content.Text.Marks? = nil
        }

        public struct Checked {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Bool = false

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Color {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _text: Anytype_Event.Block.Fill.Text.Text? = nil
        fileprivate var _style: Anytype_Event.Block.Fill.Text.Style? = nil
        fileprivate var _marks: Anytype_Event.Block.Fill.Text.Marks? = nil
        fileprivate var _checked: Anytype_Event.Block.Fill.Text.Checked? = nil
        fileprivate var _color: Anytype_Event.Block.Fill.Text.Color? = nil
      }

      public struct Div {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var style: Anytype_Event.Block.Fill.Div.Style {
          get {return _style ?? Anytype_Event.Block.Fill.Div.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        public var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        public mutating func clearStyle() {self._style = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Div.Style = .line

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _style: Anytype_Event.Block.Fill.Div.Style? = nil
      }

      public struct File {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var type: Anytype_Event.Block.Fill.File.TypeMessage {
          get {return _type ?? Anytype_Event.Block.Fill.File.TypeMessage()}
          set {_type = newValue}
        }
        /// Returns true if `type` has been explicitly set.
        public var hasType: Bool {return self._type != nil}
        /// Clears the value of `type`. Subsequent reads from it will return its default value.
        public mutating func clearType() {self._type = nil}

        public var state: Anytype_Event.Block.Fill.File.State {
          get {return _state ?? Anytype_Event.Block.Fill.File.State()}
          set {_state = newValue}
        }
        /// Returns true if `state` has been explicitly set.
        public var hasState: Bool {return self._state != nil}
        /// Clears the value of `state`. Subsequent reads from it will return its default value.
        public mutating func clearState() {self._state = nil}

        public var mime: Anytype_Event.Block.Fill.File.Mime {
          get {return _mime ?? Anytype_Event.Block.Fill.File.Mime()}
          set {_mime = newValue}
        }
        /// Returns true if `mime` has been explicitly set.
        public var hasMime: Bool {return self._mime != nil}
        /// Clears the value of `mime`. Subsequent reads from it will return its default value.
        public mutating func clearMime() {self._mime = nil}

        public var hash: Anytype_Event.Block.Fill.File.Hash {
          get {return _hash ?? Anytype_Event.Block.Fill.File.Hash()}
          set {_hash = newValue}
        }
        /// Returns true if `hash` has been explicitly set.
        public var hasHash: Bool {return self._hash != nil}
        /// Clears the value of `hash`. Subsequent reads from it will return its default value.
        public mutating func clearHash() {self._hash = nil}

        public var name: Anytype_Event.Block.Fill.File.Name {
          get {return _name ?? Anytype_Event.Block.Fill.File.Name()}
          set {_name = newValue}
        }
        /// Returns true if `name` has been explicitly set.
        public var hasName: Bool {return self._name != nil}
        /// Clears the value of `name`. Subsequent reads from it will return its default value.
        public mutating func clearName() {self._name = nil}

        public var size: Anytype_Event.Block.Fill.File.Size {
          get {return _size ?? Anytype_Event.Block.Fill.File.Size()}
          set {_size = newValue}
        }
        /// Returns true if `size` has been explicitly set.
        public var hasSize: Bool {return self._size != nil}
        /// Clears the value of `size`. Subsequent reads from it will return its default value.
        public mutating func clearSize() {self._size = nil}

        public var style: Anytype_Event.Block.Fill.File.Style {
          get {return _style ?? Anytype_Event.Block.Fill.File.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        public var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        public mutating func clearStyle() {self._style = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Name {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Width {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Int32 = 0

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct State {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.File.State = .empty

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct TypeMessage {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.File.TypeEnum = .none

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.File.Style = .auto

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Hash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Mime {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Size {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Int64 = 0

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _type: Anytype_Event.Block.Fill.File.TypeMessage? = nil
        fileprivate var _state: Anytype_Event.Block.Fill.File.State? = nil
        fileprivate var _mime: Anytype_Event.Block.Fill.File.Mime? = nil
        fileprivate var _hash: Anytype_Event.Block.Fill.File.Hash? = nil
        fileprivate var _name: Anytype_Event.Block.Fill.File.Name? = nil
        fileprivate var _size: Anytype_Event.Block.Fill.File.Size? = nil
        fileprivate var _style: Anytype_Event.Block.Fill.File.Style? = nil
      }

      public struct Link {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var targetBlockID: Anytype_Event.Block.Fill.Link.TargetBlockId {
          get {return _targetBlockID ?? Anytype_Event.Block.Fill.Link.TargetBlockId()}
          set {_targetBlockID = newValue}
        }
        /// Returns true if `targetBlockID` has been explicitly set.
        public var hasTargetBlockID: Bool {return self._targetBlockID != nil}
        /// Clears the value of `targetBlockID`. Subsequent reads from it will return its default value.
        public mutating func clearTargetBlockID() {self._targetBlockID = nil}

        public var style: Anytype_Event.Block.Fill.Link.Style {
          get {return _style ?? Anytype_Event.Block.Fill.Link.Style()}
          set {_style = newValue}
        }
        /// Returns true if `style` has been explicitly set.
        public var hasStyle: Bool {return self._style != nil}
        /// Clears the value of `style`. Subsequent reads from it will return its default value.
        public mutating func clearStyle() {self._style = nil}

        public var fields: Anytype_Event.Block.Fill.Link.Fields {
          get {return _fields ?? Anytype_Event.Block.Fill.Link.Fields()}
          set {_fields = newValue}
        }
        /// Returns true if `fields` has been explicitly set.
        public var hasFields: Bool {return self._fields != nil}
        /// Clears the value of `fields`. Subsequent reads from it will return its default value.
        public mutating func clearFields() {self._fields = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct TargetBlockId {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Style {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_Block.Content.Link.Style = .page

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Fields {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: SwiftProtobuf.Google_Protobuf_Struct {
            get {return _value ?? SwiftProtobuf.Google_Protobuf_Struct()}
            set {_value = newValue}
          }
          /// Returns true if `value` has been explicitly set.
          public var hasValue: Bool {return self._value != nil}
          /// Clears the value of `value`. Subsequent reads from it will return its default value.
          public mutating func clearValue() {self._value = nil}

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}

          fileprivate var _value: SwiftProtobuf.Google_Protobuf_Struct? = nil
        }

        public init() {}

        fileprivate var _targetBlockID: Anytype_Event.Block.Fill.Link.TargetBlockId? = nil
        fileprivate var _style: Anytype_Event.Block.Fill.Link.Style? = nil
        fileprivate var _fields: Anytype_Event.Block.Fill.Link.Fields? = nil
      }

      public struct Bookmark {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var url: Anytype_Event.Block.Fill.Bookmark.Url {
          get {return _url ?? Anytype_Event.Block.Fill.Bookmark.Url()}
          set {_url = newValue}
        }
        /// Returns true if `url` has been explicitly set.
        public var hasURL: Bool {return self._url != nil}
        /// Clears the value of `url`. Subsequent reads from it will return its default value.
        public mutating func clearURL() {self._url = nil}

        public var title: Anytype_Event.Block.Fill.Bookmark.Title {
          get {return _title ?? Anytype_Event.Block.Fill.Bookmark.Title()}
          set {_title = newValue}
        }
        /// Returns true if `title` has been explicitly set.
        public var hasTitle: Bool {return self._title != nil}
        /// Clears the value of `title`. Subsequent reads from it will return its default value.
        public mutating func clearTitle() {self._title = nil}

        public var description_p: Anytype_Event.Block.Fill.Bookmark.Description {
          get {return _description_p ?? Anytype_Event.Block.Fill.Bookmark.Description()}
          set {_description_p = newValue}
        }
        /// Returns true if `description_p` has been explicitly set.
        public var hasDescription_p: Bool {return self._description_p != nil}
        /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
        public mutating func clearDescription_p() {self._description_p = nil}

        public var imageHash: Anytype_Event.Block.Fill.Bookmark.ImageHash {
          get {return _imageHash ?? Anytype_Event.Block.Fill.Bookmark.ImageHash()}
          set {_imageHash = newValue}
        }
        /// Returns true if `imageHash` has been explicitly set.
        public var hasImageHash: Bool {return self._imageHash != nil}
        /// Clears the value of `imageHash`. Subsequent reads from it will return its default value.
        public mutating func clearImageHash() {self._imageHash = nil}

        public var faviconHash: Anytype_Event.Block.Fill.Bookmark.FaviconHash {
          get {return _faviconHash ?? Anytype_Event.Block.Fill.Bookmark.FaviconHash()}
          set {_faviconHash = newValue}
        }
        /// Returns true if `faviconHash` has been explicitly set.
        public var hasFaviconHash: Bool {return self._faviconHash != nil}
        /// Clears the value of `faviconHash`. Subsequent reads from it will return its default value.
        public mutating func clearFaviconHash() {self._faviconHash = nil}

        public var type: Anytype_Event.Block.Fill.Bookmark.TypeMessage {
          get {return _type ?? Anytype_Event.Block.Fill.Bookmark.TypeMessage()}
          set {_type = newValue}
        }
        /// Returns true if `type` has been explicitly set.
        public var hasType: Bool {return self._type != nil}
        /// Clears the value of `type`. Subsequent reads from it will return its default value.
        public mutating func clearType() {self._type = nil}

        public var targetObjectID: Anytype_Event.Block.Fill.Bookmark.TargetObjectId {
          get {return _targetObjectID ?? Anytype_Event.Block.Fill.Bookmark.TargetObjectId()}
          set {_targetObjectID = newValue}
        }
        /// Returns true if `targetObjectID` has been explicitly set.
        public var hasTargetObjectID: Bool {return self._targetObjectID != nil}
        /// Clears the value of `targetObjectID`. Subsequent reads from it will return its default value.
        public mutating func clearTargetObjectID() {self._targetObjectID = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Url {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Title {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Description {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct ImageHash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct FaviconHash {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct TypeMessage {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: Anytype_Model_LinkPreview.TypeEnum = .unknown

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct TargetObjectId {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var value: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _url: Anytype_Event.Block.Fill.Bookmark.Url? = nil
        fileprivate var _title: Anytype_Event.Block.Fill.Bookmark.Title? = nil
        fileprivate var _description_p: Anytype_Event.Block.Fill.Bookmark.Description? = nil
        fileprivate var _imageHash: Anytype_Event.Block.Fill.Bookmark.ImageHash? = nil
        fileprivate var _faviconHash: Anytype_Event.Block.Fill.Bookmark.FaviconHash? = nil
        fileprivate var _type: Anytype_Event.Block.Fill.Bookmark.TypeMessage? = nil
        fileprivate var _targetObjectID: Anytype_Event.Block.Fill.Bookmark.TargetObjectId? = nil
      }

      public init() {}
    }

    public struct Dataview {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum SliceOperation: SwiftProtobuf.Enum {
        public typealias RawValue = Int

        /// not used
        case none // = 0
        case add // = 1
        case move // = 2
        case remove // = 3
        case replace // = 4
        case UNRECOGNIZED(Int)

        public init() {
          self = .none
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .none
          case 1: self = .add
          case 2: self = .move
          case 3: self = .remove
          case 4: self = .replace
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .none: return 0
          case .add: return 1
          case .move: return 2
          case .remove: return 3
          case .replace: return 4
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      /// sent when the view have been changed or added
      public struct ViewSet {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String {
          get {return _storage._id}
          set {_uniqueStorage()._id = newValue}
        }

        /// view id, client should double check this to make sure client doesn't switch the active view in the middle
        public var viewID: String {
          get {return _storage._viewID}
          set {_uniqueStorage()._viewID = newValue}
        }

        public var view: Anytype_Model_Block.Content.Dataview.View {
          get {return _storage._view ?? Anytype_Model_Block.Content.Dataview.View()}
          set {_uniqueStorage()._view = newValue}
        }
        /// Returns true if `view` has been explicitly set.
        public var hasView: Bool {return _storage._view != nil}
        /// Clears the value of `view`. Subsequent reads from it will return its default value.
        public mutating func clearView() {_uniqueStorage()._view = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      public struct ViewUpdate {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var viewID: String = String()

        public var filter: [Anytype_Event.Block.Dataview.ViewUpdate.Filter] = []

        public var relation: [Anytype_Event.Block.Dataview.ViewUpdate.Relation] = []

        public var sort: [Anytype_Event.Block.Dataview.ViewUpdate.Sort] = []

        public var fields: Anytype_Event.Block.Dataview.ViewUpdate.Fields {
          get {return _fields ?? Anytype_Event.Block.Dataview.ViewUpdate.Fields()}
          set {_fields = newValue}
        }
        /// Returns true if `fields` has been explicitly set.
        public var hasFields: Bool {return self._fields != nil}
        /// Clears the value of `fields`. Subsequent reads from it will return its default value.
        public mutating func clearFields() {self._fields = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Fields {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var type: Anytype_Model_Block.Content.Dataview.View.TypeEnum = .table

          public var name: String = String()

          /// Relation used for cover in gallery
          public var coverRelationKey: String = String()

          /// Hide icon near name
          public var hideIcon: Bool = false

          /// Gallery card size
          public var cardSize: Anytype_Model_Block.Content.Dataview.View.Size = .small

          /// Image fits container
          public var coverFit: Bool = false

          /// Group view by this relationKey
          public var groupRelationKey: String = String()

          /// Enable backgrounds in groups
          public var groupBackgroundColors: Bool = false

          /// Limit of objects shown in widget
          public var pageLimit: Int32 = 0

          /// Id of template object set default for the view
          public var defaultTemplateID: String = String()

          /// Default object type that is chosen for new object created within the view
          public var defaultObjectTypeID: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Filter {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var operation: Anytype_Event.Block.Dataview.ViewUpdate.Filter.OneOf_Operation? = nil

          public var add: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add {
            get {
              if case .add(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add()
            }
            set {operation = .add(newValue)}
          }

          public var remove: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove {
            get {
              if case .remove(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove()
            }
            set {operation = .remove(newValue)}
          }

          public var update: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update {
            get {
              if case .update(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update()
            }
            set {operation = .update(newValue)}
          }

          public var move: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move {
            get {
              if case .move(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move()
            }
            set {operation = .move(newValue)}
          }

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum OneOf_Operation: Equatable {
            case add(Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add)
            case remove(Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove)
            case update(Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update)
            case move(Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move)

          #if !swift(>=4.1)
            public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.OneOf_Operation, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.OneOf_Operation) -> Bool {
              // The use of inline closures is to circumvent an issue where the compiler
              // allocates stack space for every case branch when no optimizations are
              // enabled. https://github.com/apple/swift-protobuf/issues/1034
              switch (lhs, rhs) {
              case (.add, .add): return {
                guard case .add(let l) = lhs, case .add(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.remove, .remove): return {
                guard case .remove(let l) = lhs, case .remove(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.update, .update): return {
                guard case .update(let l) = lhs, case .update(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.move, .move): return {
                guard case .move(let l) = lhs, case .move(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              default: return false
              }
            }
          #endif
          }

          public struct Add {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var afterID: String = String()

            public var items: [Anytype_Model_Block.Content.Dataview.Filter] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Remove {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var ids: [String] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Update {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var id: String = String()

            public var item: Anytype_Model_Block.Content.Dataview.Filter {
              get {return _item ?? Anytype_Model_Block.Content.Dataview.Filter()}
              set {_item = newValue}
            }
            /// Returns true if `item` has been explicitly set.
            public var hasItem: Bool {return self._item != nil}
            /// Clears the value of `item`. Subsequent reads from it will return its default value.
            public mutating func clearItem() {self._item = nil}

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}

            fileprivate var _item: Anytype_Model_Block.Content.Dataview.Filter? = nil
          }

          public struct Move {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var afterID: String = String()

            public var ids: [String] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public init() {}
        }

        public struct Relation {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var operation: Anytype_Event.Block.Dataview.ViewUpdate.Relation.OneOf_Operation? = nil

          public var add: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add {
            get {
              if case .add(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add()
            }
            set {operation = .add(newValue)}
          }

          public var remove: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove {
            get {
              if case .remove(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove()
            }
            set {operation = .remove(newValue)}
          }

          public var update: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update {
            get {
              if case .update(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update()
            }
            set {operation = .update(newValue)}
          }

          public var move: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move {
            get {
              if case .move(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move()
            }
            set {operation = .move(newValue)}
          }

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum OneOf_Operation: Equatable {
            case add(Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add)
            case remove(Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove)
            case update(Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update)
            case move(Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move)

          #if !swift(>=4.1)
            public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.OneOf_Operation, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.OneOf_Operation) -> Bool {
              // The use of inline closures is to circumvent an issue where the compiler
              // allocates stack space for every case branch when no optimizations are
              // enabled. https://github.com/apple/swift-protobuf/issues/1034
              switch (lhs, rhs) {
              case (.add, .add): return {
                guard case .add(let l) = lhs, case .add(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.remove, .remove): return {
                guard case .remove(let l) = lhs, case .remove(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.update, .update): return {
                guard case .update(let l) = lhs, case .update(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.move, .move): return {
                guard case .move(let l) = lhs, case .move(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              default: return false
              }
            }
          #endif
          }

          public struct Add {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var afterID: String = String()

            public var items: [Anytype_Model_Block.Content.Dataview.Relation] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Remove {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var ids: [String] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Update {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var id: String = String()

            public var item: Anytype_Model_Block.Content.Dataview.Relation {
              get {return _item ?? Anytype_Model_Block.Content.Dataview.Relation()}
              set {_item = newValue}
            }
            /// Returns true if `item` has been explicitly set.
            public var hasItem: Bool {return self._item != nil}
            /// Clears the value of `item`. Subsequent reads from it will return its default value.
            public mutating func clearItem() {self._item = nil}

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}

            fileprivate var _item: Anytype_Model_Block.Content.Dataview.Relation? = nil
          }

          public struct Move {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var afterID: String = String()

            public var ids: [String] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public init() {}
        }

        public struct Sort {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var operation: Anytype_Event.Block.Dataview.ViewUpdate.Sort.OneOf_Operation? = nil

          public var add: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add {
            get {
              if case .add(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add()
            }
            set {operation = .add(newValue)}
          }

          public var remove: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove {
            get {
              if case .remove(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove()
            }
            set {operation = .remove(newValue)}
          }

          public var update: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update {
            get {
              if case .update(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update()
            }
            set {operation = .update(newValue)}
          }

          public var move: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move {
            get {
              if case .move(let v)? = operation {return v}
              return Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move()
            }
            set {operation = .move(newValue)}
          }

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum OneOf_Operation: Equatable {
            case add(Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add)
            case remove(Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove)
            case update(Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update)
            case move(Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move)

          #if !swift(>=4.1)
            public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.OneOf_Operation, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.OneOf_Operation) -> Bool {
              // The use of inline closures is to circumvent an issue where the compiler
              // allocates stack space for every case branch when no optimizations are
              // enabled. https://github.com/apple/swift-protobuf/issues/1034
              switch (lhs, rhs) {
              case (.add, .add): return {
                guard case .add(let l) = lhs, case .add(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.remove, .remove): return {
                guard case .remove(let l) = lhs, case .remove(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.update, .update): return {
                guard case .update(let l) = lhs, case .update(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              case (.move, .move): return {
                guard case .move(let l) = lhs, case .move(let r) = rhs else { preconditionFailure() }
                return l == r
              }()
              default: return false
              }
            }
          #endif
          }

          public struct Add {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var afterID: String = String()

            public var items: [Anytype_Model_Block.Content.Dataview.Sort] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Remove {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var ids: [String] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Update {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var id: String = String()

            public var item: Anytype_Model_Block.Content.Dataview.Sort {
              get {return _item ?? Anytype_Model_Block.Content.Dataview.Sort()}
              set {_item = newValue}
            }
            /// Returns true if `item` has been explicitly set.
            public var hasItem: Bool {return self._item != nil}
            /// Clears the value of `item`. Subsequent reads from it will return its default value.
            public mutating func clearItem() {self._item = nil}

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}

            fileprivate var _item: Anytype_Model_Block.Content.Dataview.Sort? = nil
          }

          public struct Move {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var afterID: String = String()

            public var ids: [String] = []

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public init() {}
        }

        public init() {}

        fileprivate var _fields: Anytype_Event.Block.Dataview.ViewUpdate.Fields? = nil
      }

      public struct ViewDelete {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        /// view id to remove
        public var viewID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct ViewOrder {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        /// view ids in new order
        public var viewIds: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct SourceSet {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        public var source: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct OldRelationDelete {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        /// relation key to remove
        public var relationKey: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// sent when the dataview relation has been changed or added
      public struct OldRelationSet {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        /// relation key to update
        public var relationKey: String = String()

        public var relation: Anytype_Model_Relation {
          get {return _relation ?? Anytype_Model_Relation()}
          set {_relation = newValue}
        }
        /// Returns true if `relation` has been explicitly set.
        public var hasRelation: Bool {return self._relation != nil}
        /// Clears the value of `relation`. Subsequent reads from it will return its default value.
        public mutating func clearRelation() {self._relation = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _relation: Anytype_Model_Relation? = nil
      }

      public struct RelationDelete {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        /// relation key to remove
        public var relationKeys: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// sent when the dataview relation has been changed or added
      public struct RelationSet {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        /// relation id to update
        public var relationLinks: [Anytype_Model_RelationLink] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct GroupOrderUpdate {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        public var groupOrder: Anytype_Model_Block.Content.Dataview.GroupOrder {
          get {return _groupOrder ?? Anytype_Model_Block.Content.Dataview.GroupOrder()}
          set {_groupOrder = newValue}
        }
        /// Returns true if `groupOrder` has been explicitly set.
        public var hasGroupOrder: Bool {return self._groupOrder != nil}
        /// Clears the value of `groupOrder`. Subsequent reads from it will return its default value.
        public mutating func clearGroupOrder() {self._groupOrder = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _groupOrder: Anytype_Model_Block.Content.Dataview.GroupOrder? = nil
      }

      public struct ObjectOrderUpdate {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        public var viewID: String = String()

        public var groupID: String = String()

        public var sliceChanges: [Anytype_Event.Block.Dataview.SliceChange] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct SliceChange {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var op: Anytype_Event.Block.Dataview.SliceOperation = .none

        public var ids: [String] = []

        public var afterID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct TargetObjectIdSet {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        public var targetObjectID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct IsCollectionSet {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// dataview block's id
        public var id: String = String()

        public var value: Bool = false

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}
    }

    public init() {}
  }

  public struct User {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct Block {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      ///*
      ///  Middleware to front end event message, that will be sent in this scenario:
      /// Precondition: user A opened a block
      /// 1. User B opens the same block
      /// 2. User A receives a message about p.1
      public struct Join {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account of the user, that opened a block
        public var account: Anytype_Event.Account {
          get {return _account ?? Anytype_Event.Account()}
          set {_account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        public var hasAccount: Bool {return self._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        public mutating func clearAccount() {self._account = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _account: Anytype_Event.Account? = nil
      }

      ///*
      ///  Middleware to front end event message, that will be sent in this scenario:
      /// Precondition: user A and user B opened the same block
      /// 1. User B closes the block
      /// 2. User A receives a message about p.1
      public struct Left {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account of the user, that left the block
        public var account: Anytype_Event.Account {
          get {return _account ?? Anytype_Event.Account()}
          set {_account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        public var hasAccount: Bool {return self._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        public mutating func clearAccount() {self._account = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _account: Anytype_Event.Account? = nil
      }

      ///*
      /// Middleware to front end event message, that will be sent in this scenario:
      /// Precondition: user A and user B opened the same block
      /// 1. User B sets cursor or selects a text region into a text block
      /// 2. User A receives a message about p.1
      public struct TextRange {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account of the user, that selected a text
        public var account: Anytype_Event.Account {
          get {return _account ?? Anytype_Event.Account()}
          set {_account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        public var hasAccount: Bool {return self._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        public mutating func clearAccount() {self._account = nil}

        /// Id of the text block, that have a selection
        public var blockID: String = String()

        /// Range of the selection
        public var range: Anytype_Model_Range {
          get {return _range ?? Anytype_Model_Range()}
          set {_range = newValue}
        }
        /// Returns true if `range` has been explicitly set.
        public var hasRange: Bool {return self._range != nil}
        /// Clears the value of `range`. Subsequent reads from it will return its default value.
        public mutating func clearRange() {self._range = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _account: Anytype_Event.Account? = nil
        fileprivate var _range: Anytype_Model_Range? = nil
      }

      ///*
      /// Middleware to front end event message, that will be sent in this scenario:
      /// Precondition: user A and user B opened the same block
      /// 1. User B selects some inner blocks
      /// 2. User A receives a message about p.1
      public struct SelectRange {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account of the user, that selected blocks
        public var account: Anytype_Event.Account {
          get {return _account ?? Anytype_Event.Account()}
          set {_account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        public var hasAccount: Bool {return self._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        public mutating func clearAccount() {self._account = nil}

        /// Ids of selected blocks.
        public var blockIdsArray: [String] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _account: Anytype_Event.Account? = nil
      }

      public init() {}
    }

    public init() {}
  }

  public struct Ping {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var index: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Process {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct New {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var process: Anytype_Model.Process {
        get {return _process ?? Anytype_Model.Process()}
        set {_process = newValue}
      }
      /// Returns true if `process` has been explicitly set.
      public var hasProcess: Bool {return self._process != nil}
      /// Clears the value of `process`. Subsequent reads from it will return its default value.
      public mutating func clearProcess() {self._process = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _process: Anytype_Model.Process? = nil
    }

    public struct Update {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var process: Anytype_Model.Process {
        get {return _process ?? Anytype_Model.Process()}
        set {_process = newValue}
      }
      /// Returns true if `process` has been explicitly set.
      public var hasProcess: Bool {return self._process != nil}
      /// Clears the value of `process`. Subsequent reads from it will return its default value.
      public mutating func clearProcess() {self._process = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _process: Anytype_Model.Process? = nil
    }

    public struct Done {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var process: Anytype_Model.Process {
        get {return _process ?? Anytype_Model.Process()}
        set {_process = newValue}
      }
      /// Returns true if `process` has been explicitly set.
      public var hasProcess: Bool {return self._process != nil}
      /// Clears the value of `process`. Subsequent reads from it will return its default value.
      public mutating func clearProcess() {self._process = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _process: Anytype_Model.Process? = nil
    }

    public init() {}
  }

  public struct Status {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct Thread {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var summary: Anytype_Event.Status.Thread.Summary {
        get {return _summary ?? Anytype_Event.Status.Thread.Summary()}
        set {_summary = newValue}
      }
      /// Returns true if `summary` has been explicitly set.
      public var hasSummary: Bool {return self._summary != nil}
      /// Clears the value of `summary`. Subsequent reads from it will return its default value.
      public mutating func clearSummary() {self._summary = nil}

      public var cafe: Anytype_Event.Status.Thread.Cafe {
        get {return _cafe ?? Anytype_Event.Status.Thread.Cafe()}
        set {_cafe = newValue}
      }
      /// Returns true if `cafe` has been explicitly set.
      public var hasCafe: Bool {return self._cafe != nil}
      /// Clears the value of `cafe`. Subsequent reads from it will return its default value.
      public mutating func clearCafe() {self._cafe = nil}

      public var accounts: [Anytype_Event.Status.Thread.Account] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum SyncStatus: SwiftProtobuf.Enum {
        public typealias RawValue = Int
        case unknown // = 0
        case offline // = 1
        case syncing // = 2
        case synced // = 3
        case failed // = 4
        case incompatibleVersion // = 5
        case UNRECOGNIZED(Int)

        public init() {
          self = .unknown
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .unknown
          case 1: self = .offline
          case 2: self = .syncing
          case 3: self = .synced
          case 4: self = .failed
          case 5: self = .incompatibleVersion
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .unknown: return 0
          case .offline: return 1
          case .syncing: return 2
          case .synced: return 3
          case .failed: return 4
          case .incompatibleVersion: return 5
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      public struct Summary {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var status: Anytype_Event.Status.Thread.SyncStatus = .unknown

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Cafe {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var status: Anytype_Event.Status.Thread.SyncStatus = .unknown

        public var lastPulled: Int64 = 0

        public var lastPushSucceed: Bool = false

        public var files: Anytype_Event.Status.Thread.Cafe.PinStatus {
          get {return _files ?? Anytype_Event.Status.Thread.Cafe.PinStatus()}
          set {_files = newValue}
        }
        /// Returns true if `files` has been explicitly set.
        public var hasFiles: Bool {return self._files != nil}
        /// Clears the value of `files`. Subsequent reads from it will return its default value.
        public mutating func clearFiles() {self._files = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct PinStatus {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var pinning: Int32 = 0

          public var pinned: Int32 = 0

          public var failed: Int32 = 0

          public var updated: Int64 = 0

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public init() {}

        fileprivate var _files: Anytype_Event.Status.Thread.Cafe.PinStatus? = nil
      }

      public struct Account {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var id: String = String()

        public var name: String = String()

        public var imageHash: String = String()

        public var online: Bool = false

        public var lastPulled: Int64 = 0

        public var lastEdited: Int64 = 0

        public var devices: [Anytype_Event.Status.Thread.Device] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Device {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var name: String = String()

        public var online: Bool = false

        public var lastPulled: Int64 = 0

        public var lastEdited: Int64 = 0

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public init() {}

      fileprivate var _summary: Anytype_Event.Status.Thread.Summary? = nil
      fileprivate var _cafe: Anytype_Event.Status.Thread.Cafe? = nil
    }

    public init() {}
  }

  public struct File {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct LimitReached {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var spaceID: String = String()

      public var fileID: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct SpaceUsage {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var bytesUsage: UInt64 = 0

      public var spaceID: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct LocalUsage {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var localBytesUsage: UInt64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct LimitUpdated {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var bytesLimit: UInt64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public struct Membership {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct Update {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var data: Anytype_Model_Membership {
        get {return _data ?? Anytype_Model_Membership()}
        set {_data = newValue}
      }
      /// Returns true if `data` has been explicitly set.
      public var hasData: Bool {return self._data != nil}
      /// Clears the value of `data`. Subsequent reads from it will return its default value.
      public mutating func clearData() {self._data = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _data: Anytype_Model_Membership? = nil
    }

    public init() {}
  }

  public struct Notification {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct Send {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var notification: Anytype_Model_Notification {
        get {return _notification ?? Anytype_Model_Notification()}
        set {_notification = newValue}
      }
      /// Returns true if `notification` has been explicitly set.
      public var hasNotification: Bool {return self._notification != nil}
      /// Clears the value of `notification`. Subsequent reads from it will return its default value.
      public mutating func clearNotification() {self._notification = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _notification: Anytype_Model_Notification? = nil
    }

    public struct Update {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var notification: Anytype_Model_Notification {
        get {return _notification ?? Anytype_Model_Notification()}
        set {_notification = newValue}
      }
      /// Returns true if `notification` has been explicitly set.
      public var hasNotification: Bool {return self._notification != nil}
      /// Clears the value of `notification`. Subsequent reads from it will return its default value.
      public mutating func clearNotification() {self._notification = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _notification: Anytype_Model_Notification? = nil
    }

    public init() {}
  }

  public struct Payload {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct Broadcast {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var payload: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public init() {}

  fileprivate var _initiator: Anytype_Model_Account? = nil
}

#if swift(>=4.2)

extension Anytype_Event.Block.Dataview.SliceOperation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Anytype_Event.Block.Dataview.SliceOperation] = [
    .none,
    .add,
    .move,
    .remove,
    .replace,
  ]
}

extension Anytype_Event.Status.Thread.SyncStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Anytype_Event.Status.Thread.SyncStatus] = [
    .unknown,
    .offline,
    .syncing,
    .synced,
    .failed,
    .incompatibleVersion,
  ]
}

#endif  // swift(>=4.2)

public struct Anytype_ResponseEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var messages: [Anytype_Event.Message] = []

  public var contextID: String = String()

  public var traceID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Anytype_Model {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Process {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: String = String()

    public var type: Anytype_Model.Process.TypeEnum = .dropFiles

    public var state: Anytype_Model.Process.State = .none

    public var progress: Anytype_Model.Process.Progress {
      get {return _progress ?? Anytype_Model.Process.Progress()}
      set {_progress = newValue}
    }
    /// Returns true if `progress` has been explicitly set.
    public var hasProgress: Bool {return self._progress != nil}
    /// Clears the value of `progress`. Subsequent reads from it will return its default value.
    public mutating func clearProgress() {self._progress = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum TypeEnum: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case dropFiles // = 0
      case `import` // = 1
      case export // = 2
      case saveFile // = 3
      case recoverAccount // = 4
      case migration // = 5
      case UNRECOGNIZED(Int)

      public init() {
        self = .dropFiles
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .dropFiles
        case 1: self = .import
        case 2: self = .export
        case 3: self = .saveFile
        case 4: self = .recoverAccount
        case 5: self = .migration
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .dropFiles: return 0
        case .import: return 1
        case .export: return 2
        case .saveFile: return 3
        case .recoverAccount: return 4
        case .migration: return 5
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public enum State: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case none // = 0
      case running // = 1
      case done // = 2
      case canceled // = 3
      case error // = 4
      case UNRECOGNIZED(Int)

      public init() {
        self = .none
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .none
        case 1: self = .running
        case 2: self = .done
        case 3: self = .canceled
        case 4: self = .error
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .none: return 0
        case .running: return 1
        case .done: return 2
        case .canceled: return 3
        case .error: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public struct Progress {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var total: Int64 = 0

      public var done: Int64 = 0

      public var message: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _progress: Anytype_Model.Process.Progress? = nil
  }

  public init() {}
}

#if swift(>=4.2)

extension Anytype_Model.Process.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Anytype_Model.Process.TypeEnum] = [
    .dropFiles,
    .import,
    .export,
    .saveFile,
    .recoverAccount,
    .migration,
  ]
}

extension Anytype_Model.Process.State: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Anytype_Model.Process.State] = [
    .none,
    .running,
    .done,
    .canceled,
    .error,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Anytype_Event: @unchecked Sendable {}
extension Anytype_Event.Message: @unchecked Sendable {}
extension Anytype_Event.Message.OneOf_Value: @unchecked Sendable {}
extension Anytype_Event.Account: @unchecked Sendable {}
extension Anytype_Event.Account.Show: @unchecked Sendable {}
extension Anytype_Event.Account.Details: @unchecked Sendable {}
extension Anytype_Event.Account.Config: @unchecked Sendable {}
extension Anytype_Event.Account.Config.Update: @unchecked Sendable {}
extension Anytype_Event.Account.Update: @unchecked Sendable {}
extension Anytype_Event.Account.LinkChallenge: @unchecked Sendable {}
extension Anytype_Event.Account.LinkChallenge.ClientInfo: @unchecked Sendable {}
extension Anytype_Event.Object: @unchecked Sendable {}
extension Anytype_Event.Object.Details: @unchecked Sendable {}
extension Anytype_Event.Object.Details.Amend: @unchecked Sendable {}
extension Anytype_Event.Object.Details.Amend.KeyValue: @unchecked Sendable {}
extension Anytype_Event.Object.Details.Set: @unchecked Sendable {}
extension Anytype_Event.Object.Details.Unset: @unchecked Sendable {}
extension Anytype_Event.Object.Subscription: @unchecked Sendable {}
extension Anytype_Event.Object.Subscription.Add: @unchecked Sendable {}
extension Anytype_Event.Object.Subscription.Remove: @unchecked Sendable {}
extension Anytype_Event.Object.Subscription.Position: @unchecked Sendable {}
extension Anytype_Event.Object.Subscription.Counters: @unchecked Sendable {}
extension Anytype_Event.Object.Subscription.Groups: @unchecked Sendable {}
extension Anytype_Event.Object.Relations: @unchecked Sendable {}
extension Anytype_Event.Object.Relations.Amend: @unchecked Sendable {}
extension Anytype_Event.Object.Relations.Remove: @unchecked Sendable {}
extension Anytype_Event.Object.Remove: @unchecked Sendable {}
extension Anytype_Event.Object.Restrictions: @unchecked Sendable {}
extension Anytype_Event.Object.Restrictions.Set: @unchecked Sendable {}
extension Anytype_Event.Block: @unchecked Sendable {}
extension Anytype_Event.Block.Add: @unchecked Sendable {}
extension Anytype_Event.Block.FilesUpload: @unchecked Sendable {}
extension Anytype_Event.Block.Delete: @unchecked Sendable {}
extension Anytype_Event.Block.MarksInfo: @unchecked Sendable {}
extension Anytype_Event.Block.Set: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Relation: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Relation.Key: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Fields: @unchecked Sendable {}
extension Anytype_Event.Block.Set.ChildrenIds: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Restrictions: @unchecked Sendable {}
extension Anytype_Event.Block.Set.BackgroundColor: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Align: @unchecked Sendable {}
extension Anytype_Event.Block.Set.VerticalAlign: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Text: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Text.Text: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Text.Style: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Text.Marks: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Text.Checked: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Text.Color: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Text.IconEmoji: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Text.IconImage: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Latex: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Latex.Text: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Latex.Processor: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Div: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Div.Style: @unchecked Sendable {}
extension Anytype_Event.Block.Set.File: @unchecked Sendable {}
extension Anytype_Event.Block.Set.File.Name: @unchecked Sendable {}
extension Anytype_Event.Block.Set.File.Width: @unchecked Sendable {}
extension Anytype_Event.Block.Set.File.State: @unchecked Sendable {}
extension Anytype_Event.Block.Set.File.TypeMessage: @unchecked Sendable {}
extension Anytype_Event.Block.Set.File.Style: @unchecked Sendable {}
extension Anytype_Event.Block.Set.File.Hash: @unchecked Sendable {}
extension Anytype_Event.Block.Set.File.Mime: @unchecked Sendable {}
extension Anytype_Event.Block.Set.File.Size: @unchecked Sendable {}
extension Anytype_Event.Block.Set.File.TargetObjectId: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Link: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Link.TargetBlockId: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Link.Style: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Link.Fields: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Link.IconSize: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Link.CardStyle: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Link.Description: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Link.Relations: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Bookmark: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Bookmark.Url: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Bookmark.Title: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Bookmark.Description: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Bookmark.ImageHash: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Bookmark.FaviconHash: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Bookmark.TypeMessage: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Bookmark.TargetObjectId: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Bookmark.State: @unchecked Sendable {}
extension Anytype_Event.Block.Set.TableRow: @unchecked Sendable {}
extension Anytype_Event.Block.Set.TableRow.IsHeader: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Widget: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Widget.Layout: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Widget.Limit: @unchecked Sendable {}
extension Anytype_Event.Block.Set.Widget.ViewId: @unchecked Sendable {}
extension Anytype_Event.Block.Fill: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Details: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.DatabaseRecords: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Fields: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.ChildrenIds: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Restrictions: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.BackgroundColor: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Align: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Text: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Text.Text: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Text.Style: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Text.Marks: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Text.Checked: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Text.Color: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Div: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Div.Style: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.File: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.File.Name: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.File.Width: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.File.State: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.File.TypeMessage: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.File.Style: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.File.Hash: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.File.Mime: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.File.Size: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Link: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Link.TargetBlockId: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Link.Style: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Link.Fields: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Bookmark: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Bookmark.Url: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Bookmark.Title: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Bookmark.Description: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Bookmark.ImageHash: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Bookmark.FaviconHash: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Bookmark.TypeMessage: @unchecked Sendable {}
extension Anytype_Event.Block.Fill.Bookmark.TargetObjectId: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.SliceOperation: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewSet: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Fields: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Filter: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.OneOf_Operation: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Relation: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.OneOf_Operation: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Sort: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.OneOf_Operation: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewDelete: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ViewOrder: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.SourceSet: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.OldRelationDelete: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.OldRelationSet: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.RelationDelete: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.RelationSet: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.GroupOrderUpdate: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.ObjectOrderUpdate: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.SliceChange: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.TargetObjectIdSet: @unchecked Sendable {}
extension Anytype_Event.Block.Dataview.IsCollectionSet: @unchecked Sendable {}
extension Anytype_Event.User: @unchecked Sendable {}
extension Anytype_Event.User.Block: @unchecked Sendable {}
extension Anytype_Event.User.Block.Join: @unchecked Sendable {}
extension Anytype_Event.User.Block.Left: @unchecked Sendable {}
extension Anytype_Event.User.Block.TextRange: @unchecked Sendable {}
extension Anytype_Event.User.Block.SelectRange: @unchecked Sendable {}
extension Anytype_Event.Ping: @unchecked Sendable {}
extension Anytype_Event.Process: @unchecked Sendable {}
extension Anytype_Event.Process.New: @unchecked Sendable {}
extension Anytype_Event.Process.Update: @unchecked Sendable {}
extension Anytype_Event.Process.Done: @unchecked Sendable {}
extension Anytype_Event.Status: @unchecked Sendable {}
extension Anytype_Event.Status.Thread: @unchecked Sendable {}
extension Anytype_Event.Status.Thread.SyncStatus: @unchecked Sendable {}
extension Anytype_Event.Status.Thread.Summary: @unchecked Sendable {}
extension Anytype_Event.Status.Thread.Cafe: @unchecked Sendable {}
extension Anytype_Event.Status.Thread.Cafe.PinStatus: @unchecked Sendable {}
extension Anytype_Event.Status.Thread.Account: @unchecked Sendable {}
extension Anytype_Event.Status.Thread.Device: @unchecked Sendable {}
extension Anytype_Event.File: @unchecked Sendable {}
extension Anytype_Event.File.LimitReached: @unchecked Sendable {}
extension Anytype_Event.File.SpaceUsage: @unchecked Sendable {}
extension Anytype_Event.File.LocalUsage: @unchecked Sendable {}
extension Anytype_Event.File.LimitUpdated: @unchecked Sendable {}
extension Anytype_Event.Membership: @unchecked Sendable {}
extension Anytype_Event.Membership.Update: @unchecked Sendable {}
extension Anytype_Event.Notification: @unchecked Sendable {}
extension Anytype_Event.Notification.Send: @unchecked Sendable {}
extension Anytype_Event.Notification.Update: @unchecked Sendable {}
extension Anytype_Event.Payload: @unchecked Sendable {}
extension Anytype_Event.Payload.Broadcast: @unchecked Sendable {}
extension Anytype_ResponseEvent: @unchecked Sendable {}
extension Anytype_Model: @unchecked Sendable {}
extension Anytype_Model.Process: @unchecked Sendable {}
extension Anytype_Model.Process.TypeEnum: @unchecked Sendable {}
extension Anytype_Model.Process.State: @unchecked Sendable {}
extension Anytype_Model.Process.Progress: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"

extension Anytype_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Event"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
    2: .same(proto: "contextId"),
    3: .same(proto: "initiator"),
    4: .same(proto: "traceId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.messages) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contextID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._initiator) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.traceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 1)
    }
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 2)
    }
    try { if let v = self._initiator {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.traceID.isEmpty {
      try visitor.visitSingularStringField(value: self.traceID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event, rhs: Anytype_Event) -> Bool {
    if lhs.messages != rhs.messages {return false}
    if lhs.contextID != rhs.contextID {return false}
    if lhs._initiator != rhs._initiator {return false}
    if lhs.traceID != rhs.traceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accountShow"),
    201: .same(proto: "accountDetails"),
    202: .same(proto: "accountConfigUpdate"),
    203: .same(proto: "accountUpdate"),
    204: .same(proto: "accountLinkChallenge"),
    16: .same(proto: "objectDetailsSet"),
    50: .same(proto: "objectDetailsAmend"),
    51: .same(proto: "objectDetailsUnset"),
    52: .same(proto: "objectRelationsAmend"),
    53: .same(proto: "objectRelationsRemove"),
    54: .same(proto: "objectRemove"),
    55: .same(proto: "objectRestrictionsSet"),
    60: .same(proto: "subscriptionAdd"),
    61: .same(proto: "subscriptionRemove"),
    62: .same(proto: "subscriptionPosition"),
    63: .same(proto: "subscriptionCounters"),
    64: .same(proto: "subscriptionGroups"),
    2: .same(proto: "blockAdd"),
    3: .same(proto: "blockDelete"),
    4: .same(proto: "filesUpload"),
    5: .same(proto: "marksInfo"),
    6: .same(proto: "blockSetFields"),
    7: .same(proto: "blockSetChildrenIds"),
    8: .same(proto: "blockSetRestrictions"),
    9: .same(proto: "blockSetBackgroundColor"),
    10: .same(proto: "blockSetText"),
    11: .same(proto: "blockSetFile"),
    13: .same(proto: "blockSetLink"),
    14: .same(proto: "blockSetBookmark"),
    15: .same(proto: "blockSetAlign"),
    17: .same(proto: "blockSetDiv"),
    21: .same(proto: "blockSetRelation"),
    25: .same(proto: "blockSetLatex"),
    36: .same(proto: "blockSetVerticalAlign"),
    37: .same(proto: "blockSetTableRow"),
    40: .same(proto: "blockSetWidget"),
    19: .same(proto: "blockDataviewViewSet"),
    20: .same(proto: "blockDataviewViewDelete"),
    29: .same(proto: "blockDataviewViewOrder"),
    35: .same(proto: "blockDataviewSourceSet"),
    38: .same(proto: "blockDataViewGroupOrderUpdate"),
    39: .same(proto: "blockDataViewObjectOrderUpdate"),
    124: .same(proto: "blockDataviewRelationDelete"),
    123: .same(proto: "blockDataviewRelationSet"),
    125: .same(proto: "blockDataviewViewUpdate"),
    126: .same(proto: "blockDataviewTargetObjectIdSet"),
    127: .same(proto: "blockDataviewIsCollectionSet"),
    24: .same(proto: "blockDataviewOldRelationDelete"),
    23: .same(proto: "blockDataviewOldRelationSet"),
    31: .same(proto: "userBlockJoin"),
    32: .same(proto: "userBlockLeft"),
    33: .same(proto: "userBlockSelectRange"),
    34: .same(proto: "userBlockTextRange"),
    100: .same(proto: "ping"),
    101: .same(proto: "processNew"),
    102: .same(proto: "processUpdate"),
    103: .same(proto: "processDone"),
    110: .same(proto: "threadStatus"),
    111: .same(proto: "fileLimitReached"),
    112: .same(proto: "fileSpaceUsage"),
    113: .same(proto: "fileLocalUsage"),
    118: .same(proto: "fileLimitUpdated"),
    114: .same(proto: "notificationSend"),
    115: .same(proto: "notificationUpdate"),
    116: .same(proto: "payloadBroadcast"),
    117: .same(proto: "membershipUpdate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Anytype_Event.Account.Show?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .accountShow(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .accountShow(v)
        }
      }()
      case 2: try {
        var v: Anytype_Event.Block.Add?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockAdd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockAdd(v)
        }
      }()
      case 3: try {
        var v: Anytype_Event.Block.Delete?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDelete(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDelete(v)
        }
      }()
      case 4: try {
        var v: Anytype_Event.Block.FilesUpload?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .filesUpload(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .filesUpload(v)
        }
      }()
      case 5: try {
        var v: Anytype_Event.Block.MarksInfo?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .marksInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .marksInfo(v)
        }
      }()
      case 6: try {
        var v: Anytype_Event.Block.Set.Fields?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetFields(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetFields(v)
        }
      }()
      case 7: try {
        var v: Anytype_Event.Block.Set.ChildrenIds?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetChildrenIds(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetChildrenIds(v)
        }
      }()
      case 8: try {
        var v: Anytype_Event.Block.Set.Restrictions?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetRestrictions(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetRestrictions(v)
        }
      }()
      case 9: try {
        var v: Anytype_Event.Block.Set.BackgroundColor?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetBackgroundColor(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetBackgroundColor(v)
        }
      }()
      case 10: try {
        var v: Anytype_Event.Block.Set.Text?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetText(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetText(v)
        }
      }()
      case 11: try {
        var v: Anytype_Event.Block.Set.File?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetFile(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetFile(v)
        }
      }()
      case 13: try {
        var v: Anytype_Event.Block.Set.Link?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetLink(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetLink(v)
        }
      }()
      case 14: try {
        var v: Anytype_Event.Block.Set.Bookmark?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetBookmark(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetBookmark(v)
        }
      }()
      case 15: try {
        var v: Anytype_Event.Block.Set.Align?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetAlign(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetAlign(v)
        }
      }()
      case 16: try {
        var v: Anytype_Event.Object.Details.Set?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .objectDetailsSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .objectDetailsSet(v)
        }
      }()
      case 17: try {
        var v: Anytype_Event.Block.Set.Div?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetDiv(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetDiv(v)
        }
      }()
      case 19: try {
        var v: Anytype_Event.Block.Dataview.ViewSet?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataviewViewSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataviewViewSet(v)
        }
      }()
      case 20: try {
        var v: Anytype_Event.Block.Dataview.ViewDelete?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataviewViewDelete(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataviewViewDelete(v)
        }
      }()
      case 21: try {
        var v: Anytype_Event.Block.Set.Relation?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetRelation(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetRelation(v)
        }
      }()
      case 23: try {
        var v: Anytype_Event.Block.Dataview.OldRelationSet?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataviewOldRelationSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataviewOldRelationSet(v)
        }
      }()
      case 24: try {
        var v: Anytype_Event.Block.Dataview.OldRelationDelete?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataviewOldRelationDelete(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataviewOldRelationDelete(v)
        }
      }()
      case 25: try {
        var v: Anytype_Event.Block.Set.Latex?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetLatex(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetLatex(v)
        }
      }()
      case 29: try {
        var v: Anytype_Event.Block.Dataview.ViewOrder?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataviewViewOrder(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataviewViewOrder(v)
        }
      }()
      case 31: try {
        var v: Anytype_Event.User.Block.Join?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .userBlockJoin(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .userBlockJoin(v)
        }
      }()
      case 32: try {
        var v: Anytype_Event.User.Block.Left?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .userBlockLeft(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .userBlockLeft(v)
        }
      }()
      case 33: try {
        var v: Anytype_Event.User.Block.SelectRange?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .userBlockSelectRange(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .userBlockSelectRange(v)
        }
      }()
      case 34: try {
        var v: Anytype_Event.User.Block.TextRange?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .userBlockTextRange(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .userBlockTextRange(v)
        }
      }()
      case 35: try {
        var v: Anytype_Event.Block.Dataview.SourceSet?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataviewSourceSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataviewSourceSet(v)
        }
      }()
      case 36: try {
        var v: Anytype_Event.Block.Set.VerticalAlign?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetVerticalAlign(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetVerticalAlign(v)
        }
      }()
      case 37: try {
        var v: Anytype_Event.Block.Set.TableRow?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetTableRow(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetTableRow(v)
        }
      }()
      case 38: try {
        var v: Anytype_Event.Block.Dataview.GroupOrderUpdate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataViewGroupOrderUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataViewGroupOrderUpdate(v)
        }
      }()
      case 39: try {
        var v: Anytype_Event.Block.Dataview.ObjectOrderUpdate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataViewObjectOrderUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataViewObjectOrderUpdate(v)
        }
      }()
      case 40: try {
        var v: Anytype_Event.Block.Set.Widget?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockSetWidget(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockSetWidget(v)
        }
      }()
      case 50: try {
        var v: Anytype_Event.Object.Details.Amend?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .objectDetailsAmend(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .objectDetailsAmend(v)
        }
      }()
      case 51: try {
        var v: Anytype_Event.Object.Details.Unset?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .objectDetailsUnset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .objectDetailsUnset(v)
        }
      }()
      case 52: try {
        var v: Anytype_Event.Object.Relations.Amend?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .objectRelationsAmend(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .objectRelationsAmend(v)
        }
      }()
      case 53: try {
        var v: Anytype_Event.Object.Relations.Remove?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .objectRelationsRemove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .objectRelationsRemove(v)
        }
      }()
      case 54: try {
        var v: Anytype_Event.Object.Remove?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .objectRemove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .objectRemove(v)
        }
      }()
      case 55: try {
        var v: Anytype_Event.Object.Restrictions.Set?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .objectRestrictionsSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .objectRestrictionsSet(v)
        }
      }()
      case 60: try {
        var v: Anytype_Event.Object.Subscription.Add?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .subscriptionAdd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .subscriptionAdd(v)
        }
      }()
      case 61: try {
        var v: Anytype_Event.Object.Subscription.Remove?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .subscriptionRemove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .subscriptionRemove(v)
        }
      }()
      case 62: try {
        var v: Anytype_Event.Object.Subscription.Position?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .subscriptionPosition(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .subscriptionPosition(v)
        }
      }()
      case 63: try {
        var v: Anytype_Event.Object.Subscription.Counters?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .subscriptionCounters(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .subscriptionCounters(v)
        }
      }()
      case 64: try {
        var v: Anytype_Event.Object.Subscription.Groups?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .subscriptionGroups(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .subscriptionGroups(v)
        }
      }()
      case 100: try {
        var v: Anytype_Event.Ping?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .ping(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .ping(v)
        }
      }()
      case 101: try {
        var v: Anytype_Event.Process.New?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .processNew(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .processNew(v)
        }
      }()
      case 102: try {
        var v: Anytype_Event.Process.Update?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .processUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .processUpdate(v)
        }
      }()
      case 103: try {
        var v: Anytype_Event.Process.Done?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .processDone(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .processDone(v)
        }
      }()
      case 110: try {
        var v: Anytype_Event.Status.Thread?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .threadStatus(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .threadStatus(v)
        }
      }()
      case 111: try {
        var v: Anytype_Event.File.LimitReached?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .fileLimitReached(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .fileLimitReached(v)
        }
      }()
      case 112: try {
        var v: Anytype_Event.File.SpaceUsage?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .fileSpaceUsage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .fileSpaceUsage(v)
        }
      }()
      case 113: try {
        var v: Anytype_Event.File.LocalUsage?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .fileLocalUsage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .fileLocalUsage(v)
        }
      }()
      case 114: try {
        var v: Anytype_Event.Notification.Send?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .notificationSend(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .notificationSend(v)
        }
      }()
      case 115: try {
        var v: Anytype_Event.Notification.Update?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .notificationUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .notificationUpdate(v)
        }
      }()
      case 116: try {
        var v: Anytype_Event.Payload.Broadcast?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .payloadBroadcast(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .payloadBroadcast(v)
        }
      }()
      case 117: try {
        var v: Anytype_Event.Membership.Update?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .membershipUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .membershipUpdate(v)
        }
      }()
      case 118: try {
        var v: Anytype_Event.File.LimitUpdated?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .fileLimitUpdated(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .fileLimitUpdated(v)
        }
      }()
      case 123: try {
        var v: Anytype_Event.Block.Dataview.RelationSet?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataviewRelationSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataviewRelationSet(v)
        }
      }()
      case 124: try {
        var v: Anytype_Event.Block.Dataview.RelationDelete?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataviewRelationDelete(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataviewRelationDelete(v)
        }
      }()
      case 125: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataviewViewUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataviewViewUpdate(v)
        }
      }()
      case 126: try {
        var v: Anytype_Event.Block.Dataview.TargetObjectIdSet?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataviewTargetObjectIDSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataviewTargetObjectIDSet(v)
        }
      }()
      case 127: try {
        var v: Anytype_Event.Block.Dataview.IsCollectionSet?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDataviewIsCollectionSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDataviewIsCollectionSet(v)
        }
      }()
      case 201: try {
        var v: Anytype_Event.Account.Details?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .accountDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .accountDetails(v)
        }
      }()
      case 202: try {
        var v: Anytype_Event.Account.Config.Update?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .accountConfigUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .accountConfigUpdate(v)
        }
      }()
      case 203: try {
        var v: Anytype_Event.Account.Update?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .accountUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .accountUpdate(v)
        }
      }()
      case 204: try {
        var v: Anytype_Event.Account.LinkChallenge?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .accountLinkChallenge(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .accountLinkChallenge(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .accountShow?: try {
      guard case .accountShow(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .blockAdd?: try {
      guard case .blockAdd(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .blockDelete?: try {
      guard case .blockDelete(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .filesUpload?: try {
      guard case .filesUpload(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .marksInfo?: try {
      guard case .marksInfo(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .blockSetFields?: try {
      guard case .blockSetFields(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .blockSetChildrenIds?: try {
      guard case .blockSetChildrenIds(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .blockSetRestrictions?: try {
      guard case .blockSetRestrictions(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .blockSetBackgroundColor?: try {
      guard case .blockSetBackgroundColor(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .blockSetText?: try {
      guard case .blockSetText(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .blockSetFile?: try {
      guard case .blockSetFile(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .blockSetLink?: try {
      guard case .blockSetLink(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .blockSetBookmark?: try {
      guard case .blockSetBookmark(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .blockSetAlign?: try {
      guard case .blockSetAlign(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .objectDetailsSet?: try {
      guard case .objectDetailsSet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .blockSetDiv?: try {
      guard case .blockSetDiv(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .blockDataviewViewSet?: try {
      guard case .blockDataviewViewSet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .blockDataviewViewDelete?: try {
      guard case .blockDataviewViewDelete(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case .blockSetRelation?: try {
      guard case .blockSetRelation(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case .blockDataviewOldRelationSet?: try {
      guard case .blockDataviewOldRelationSet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
    }()
    case .blockDataviewOldRelationDelete?: try {
      guard case .blockDataviewOldRelationDelete(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
    }()
    case .blockSetLatex?: try {
      guard case .blockSetLatex(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
    }()
    case .blockDataviewViewOrder?: try {
      guard case .blockDataviewViewOrder(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
    }()
    case .userBlockJoin?: try {
      guard case .userBlockJoin(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
    }()
    case .userBlockLeft?: try {
      guard case .userBlockLeft(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
    }()
    case .userBlockSelectRange?: try {
      guard case .userBlockSelectRange(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
    }()
    case .userBlockTextRange?: try {
      guard case .userBlockTextRange(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
    }()
    case .blockDataviewSourceSet?: try {
      guard case .blockDataviewSourceSet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
    }()
    case .blockSetVerticalAlign?: try {
      guard case .blockSetVerticalAlign(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
    }()
    case .blockSetTableRow?: try {
      guard case .blockSetTableRow(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
    }()
    case .blockDataViewGroupOrderUpdate?: try {
      guard case .blockDataViewGroupOrderUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
    }()
    case .blockDataViewObjectOrderUpdate?: try {
      guard case .blockDataViewObjectOrderUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
    }()
    case .blockSetWidget?: try {
      guard case .blockSetWidget(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
    }()
    case .objectDetailsAmend?: try {
      guard case .objectDetailsAmend(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
    }()
    case .objectDetailsUnset?: try {
      guard case .objectDetailsUnset(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
    }()
    case .objectRelationsAmend?: try {
      guard case .objectRelationsAmend(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 52)
    }()
    case .objectRelationsRemove?: try {
      guard case .objectRelationsRemove(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 53)
    }()
    case .objectRemove?: try {
      guard case .objectRemove(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 54)
    }()
    case .objectRestrictionsSet?: try {
      guard case .objectRestrictionsSet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 55)
    }()
    case .subscriptionAdd?: try {
      guard case .subscriptionAdd(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
    }()
    case .subscriptionRemove?: try {
      guard case .subscriptionRemove(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
    }()
    case .subscriptionPosition?: try {
      guard case .subscriptionPosition(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 62)
    }()
    case .subscriptionCounters?: try {
      guard case .subscriptionCounters(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 63)
    }()
    case .subscriptionGroups?: try {
      guard case .subscriptionGroups(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 64)
    }()
    case .ping?: try {
      guard case .ping(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    }()
    case .processNew?: try {
      guard case .processNew(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
    }()
    case .processUpdate?: try {
      guard case .processUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
    }()
    case .processDone?: try {
      guard case .processDone(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
    }()
    case .threadStatus?: try {
      guard case .threadStatus(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 110)
    }()
    case .fileLimitReached?: try {
      guard case .fileLimitReached(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 111)
    }()
    case .fileSpaceUsage?: try {
      guard case .fileSpaceUsage(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
    }()
    case .fileLocalUsage?: try {
      guard case .fileLocalUsage(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 113)
    }()
    case .notificationSend?: try {
      guard case .notificationSend(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 114)
    }()
    case .notificationUpdate?: try {
      guard case .notificationUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 115)
    }()
    case .payloadBroadcast?: try {
      guard case .payloadBroadcast(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 116)
    }()
    case .membershipUpdate?: try {
      guard case .membershipUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 117)
    }()
    case .fileLimitUpdated?: try {
      guard case .fileLimitUpdated(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 118)
    }()
    case .blockDataviewRelationSet?: try {
      guard case .blockDataviewRelationSet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 123)
    }()
    case .blockDataviewRelationDelete?: try {
      guard case .blockDataviewRelationDelete(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 124)
    }()
    case .blockDataviewViewUpdate?: try {
      guard case .blockDataviewViewUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 125)
    }()
    case .blockDataviewTargetObjectIDSet?: try {
      guard case .blockDataviewTargetObjectIDSet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 126)
    }()
    case .blockDataviewIsCollectionSet?: try {
      guard case .blockDataviewIsCollectionSet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 127)
    }()
    case .accountDetails?: try {
      guard case .accountDetails(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 201)
    }()
    case .accountConfigUpdate?: try {
      guard case .accountConfigUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 202)
    }()
    case .accountUpdate?: try {
      guard case .accountUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 203)
    }()
    case .accountLinkChallenge?: try {
      guard case .accountLinkChallenge(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 204)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Message, rhs: Anytype_Event.Message) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".Account"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Account, rhs: Anytype_Event.Account) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account.Show: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Account.protoMessageName + ".Show"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "account"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    try { if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Account.Show, rhs: Anytype_Event.Account.Show) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs._account != rhs._account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account.Details: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Account.protoMessageName + ".Details"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profileId"),
    2: .same(proto: "details"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.profileID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._details) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.profileID.isEmpty {
      try visitor.visitSingularStringField(value: self.profileID, fieldNumber: 1)
    }
    try { if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Account.Details, rhs: Anytype_Event.Account.Details) -> Bool {
    if lhs.profileID != rhs.profileID {return false}
    if lhs._details != rhs._details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account.Config: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Account.protoMessageName + ".Config"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Account.Config, rhs: Anytype_Event.Account.Config) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account.Config.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Account.Config.protoMessageName + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "config"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Account.Config.Update, rhs: Anytype_Event.Account.Config.Update) -> Bool {
    if lhs._config != rhs._config {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Account.protoMessageName + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "config"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Account.Update, rhs: Anytype_Event.Account.Update) -> Bool {
    if lhs._config != rhs._config {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account.LinkChallenge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Account.protoMessageName + ".LinkChallenge"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "challenge"),
    2: .same(proto: "clientInfo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.challenge) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._clientInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.challenge.isEmpty {
      try visitor.visitSingularStringField(value: self.challenge, fieldNumber: 1)
    }
    try { if let v = self._clientInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Account.LinkChallenge, rhs: Anytype_Event.Account.LinkChallenge) -> Bool {
    if lhs.challenge != rhs.challenge {return false}
    if lhs._clientInfo != rhs._clientInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Account.LinkChallenge.ClientInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Account.LinkChallenge.protoMessageName + ".ClientInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "processName"),
    2: .same(proto: "processPath"),
    3: .same(proto: "signatureVerified"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.processName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.processPath) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.signatureVerified) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.processName.isEmpty {
      try visitor.visitSingularStringField(value: self.processName, fieldNumber: 1)
    }
    if !self.processPath.isEmpty {
      try visitor.visitSingularStringField(value: self.processPath, fieldNumber: 2)
    }
    if self.signatureVerified != false {
      try visitor.visitSingularBoolField(value: self.signatureVerified, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Account.LinkChallenge.ClientInfo, rhs: Anytype_Event.Account.LinkChallenge.ClientInfo) -> Bool {
    if lhs.processName != rhs.processName {return false}
    if lhs.processPath != rhs.processPath {return false}
    if lhs.signatureVerified != rhs.signatureVerified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".Object"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object, rhs: Anytype_Event.Object) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Details: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.protoMessageName + ".Details"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Details, rhs: Anytype_Event.Object.Details) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Details.Amend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.Details.protoMessageName + ".Amend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "details"),
    3: .same(proto: "subIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.details) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.subIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.details.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.details, fieldNumber: 2)
    }
    if !self.subIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.subIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Details.Amend, rhs: Anytype_Event.Object.Details.Amend) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.details != rhs.details {return false}
    if lhs.subIds != rhs.subIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Details.Amend.KeyValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.Details.Amend.protoMessageName + ".KeyValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Details.Amend.KeyValue, rhs: Anytype_Event.Object.Details.Amend.KeyValue) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Details.Set: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.Details.protoMessageName + ".Set"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "details"),
    3: .same(proto: "subIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._details) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.subIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.subIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.subIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Details.Set, rhs: Anytype_Event.Object.Details.Set) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._details != rhs._details {return false}
    if lhs.subIds != rhs.subIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Details.Unset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.Details.protoMessageName + ".Unset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "keys"),
    3: .same(proto: "subIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.keys) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.subIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.keys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.keys, fieldNumber: 2)
    }
    if !self.subIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.subIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Details.Unset, rhs: Anytype_Event.Object.Details.Unset) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.subIds != rhs.subIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Subscription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.protoMessageName + ".Subscription"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Subscription, rhs: Anytype_Event.Object.Subscription) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Subscription.Add: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.Subscription.protoMessageName + ".Add"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "afterId"),
    3: .same(proto: "subId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.subID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 2)
    }
    if !self.subID.isEmpty {
      try visitor.visitSingularStringField(value: self.subID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Subscription.Add, rhs: Anytype_Event.Object.Subscription.Add) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.afterID != rhs.afterID {return false}
    if lhs.subID != rhs.subID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Subscription.Remove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.Subscription.protoMessageName + ".Remove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "subId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.subID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.subID.isEmpty {
      try visitor.visitSingularStringField(value: self.subID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Subscription.Remove, rhs: Anytype_Event.Object.Subscription.Remove) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.subID != rhs.subID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Subscription.Position: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.Subscription.protoMessageName + ".Position"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "afterId"),
    3: .same(proto: "subId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.subID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 2)
    }
    if !self.subID.isEmpty {
      try visitor.visitSingularStringField(value: self.subID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Subscription.Position, rhs: Anytype_Event.Object.Subscription.Position) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.afterID != rhs.afterID {return false}
    if lhs.subID != rhs.subID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Subscription.Counters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.Subscription.protoMessageName + ".Counters"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "nextCount"),
    3: .same(proto: "prevCount"),
    4: .same(proto: "subId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.total) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.nextCount) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.prevCount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.subID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 1)
    }
    if self.nextCount != 0 {
      try visitor.visitSingularInt64Field(value: self.nextCount, fieldNumber: 2)
    }
    if self.prevCount != 0 {
      try visitor.visitSingularInt64Field(value: self.prevCount, fieldNumber: 3)
    }
    if !self.subID.isEmpty {
      try visitor.visitSingularStringField(value: self.subID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Subscription.Counters, rhs: Anytype_Event.Object.Subscription.Counters) -> Bool {
    if lhs.total != rhs.total {return false}
    if lhs.nextCount != rhs.nextCount {return false}
    if lhs.prevCount != rhs.prevCount {return false}
    if lhs.subID != rhs.subID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Subscription.Groups: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.Subscription.protoMessageName + ".Groups"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subId"),
    2: .same(proto: "group"),
    3: .same(proto: "remove"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.subID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._group) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.remove) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.subID.isEmpty {
      try visitor.visitSingularStringField(value: self.subID, fieldNumber: 1)
    }
    try { if let v = self._group {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.remove != false {
      try visitor.visitSingularBoolField(value: self.remove, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Subscription.Groups, rhs: Anytype_Event.Object.Subscription.Groups) -> Bool {
    if lhs.subID != rhs.subID {return false}
    if lhs._group != rhs._group {return false}
    if lhs.remove != rhs.remove {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Relations: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.protoMessageName + ".Relations"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Relations, rhs: Anytype_Event.Object.Relations) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Relations.Amend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.Relations.protoMessageName + ".Amend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "relationLinks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.relationLinks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.relationLinks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.relationLinks, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Relations.Amend, rhs: Anytype_Event.Object.Relations.Amend) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.relationLinks != rhs.relationLinks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Relations.Remove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.Relations.protoMessageName + ".Remove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "relationKeys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.relationKeys) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.relationKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.relationKeys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Relations.Remove, rhs: Anytype_Event.Object.Relations.Remove) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.relationKeys != rhs.relationKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Remove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.protoMessageName + ".Remove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Remove, rhs: Anytype_Event.Object.Remove) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Restrictions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.protoMessageName + ".Restrictions"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Restrictions, rhs: Anytype_Event.Object.Restrictions) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Object.Restrictions.Set: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Object.Restrictions.protoMessageName + ".Set"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "restrictions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._restrictions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._restrictions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Object.Restrictions.Set, rhs: Anytype_Event.Object.Restrictions.Set) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._restrictions != rhs._restrictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".Block"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block, rhs: Anytype_Event.Block) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Add: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Add"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blocks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.blocks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Add, rhs: Anytype_Event.Block.Add) -> Bool {
    if lhs.blocks != rhs.blocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.FilesUpload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".FilesUpload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blockId"),
    2: .same(proto: "filePath"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.blockID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.filePath) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 1)
    }
    if !self.filePath.isEmpty {
      try visitor.visitRepeatedStringField(value: self.filePath, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.FilesUpload, rhs: Anytype_Event.Block.FilesUpload) -> Bool {
    if lhs.blockID != rhs.blockID {return false}
    if lhs.filePath != rhs.filePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Delete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Delete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blockIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.blockIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Delete, rhs: Anytype_Event.Block.Delete) -> Bool {
    if lhs.blockIds != rhs.blockIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.MarksInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".MarksInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "marksInRange"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.marksInRange) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.marksInRange.isEmpty {
      try visitor.visitPackedEnumField(value: self.marksInRange, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.MarksInfo, rhs: Anytype_Event.Block.MarksInfo) -> Bool {
    if lhs.marksInRange != rhs.marksInRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Set"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set, rhs: Anytype_Event.Block.Set) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Relation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Relation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._key) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Relation, rhs: Anytype_Event.Block.Set.Relation) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._key != rhs._key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Relation.Key: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Relation.protoMessageName + ".Key"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Relation.Key, rhs: Anytype_Event.Block.Set.Relation.Key) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Fields"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "fields"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fields) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Fields, rhs: Anytype_Event.Block.Set.Fields) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.ChildrenIds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".ChildrenIds"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "childrenIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.childrenIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.childrenIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.childrenIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.ChildrenIds, rhs: Anytype_Event.Block.Set.ChildrenIds) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.childrenIds != rhs.childrenIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Restrictions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Restrictions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "restrictions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._restrictions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._restrictions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Restrictions, rhs: Anytype_Event.Block.Set.Restrictions) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._restrictions != rhs._restrictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.BackgroundColor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".BackgroundColor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "backgroundColor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.backgroundColor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.backgroundColor.isEmpty {
      try visitor.visitSingularStringField(value: self.backgroundColor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.BackgroundColor, rhs: Anytype_Event.Block.Set.BackgroundColor) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.backgroundColor != rhs.backgroundColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Align: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Align"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "align"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.align) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.align != .left {
      try visitor.visitSingularEnumField(value: self.align, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Align, rhs: Anytype_Event.Block.Set.Align) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.align != rhs.align {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.VerticalAlign: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".VerticalAlign"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "verticalAlign"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.verticalAlign) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.verticalAlign != .top {
      try visitor.visitSingularEnumField(value: self.verticalAlign, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.VerticalAlign, rhs: Anytype_Event.Block.Set.VerticalAlign) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.verticalAlign != rhs.verticalAlign {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Text"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "text"),
    3: .same(proto: "style"),
    4: .same(proto: "marks"),
    5: .same(proto: "checked"),
    6: .same(proto: "color"),
    7: .same(proto: "iconEmoji"),
    8: .same(proto: "iconImage"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._text) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._style) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._marks) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._checked) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._color) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._iconEmoji) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._iconImage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._text {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._marks {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._checked {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._iconEmoji {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._iconImage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Text, rhs: Anytype_Event.Block.Set.Text) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._text != rhs._text {return false}
    if lhs._style != rhs._style {return false}
    if lhs._marks != rhs._marks {return false}
    if lhs._checked != rhs._checked {return false}
    if lhs._color != rhs._color {return false}
    if lhs._iconEmoji != rhs._iconEmoji {return false}
    if lhs._iconImage != rhs._iconImage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Text"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Text.Text, rhs: Anytype_Event.Block.Set.Text.Text) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Style"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .paragraph {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Text.Style, rhs: Anytype_Event.Block.Set.Text.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Marks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Marks"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Text.Marks, rhs: Anytype_Event.Block.Set.Text.Marks) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Checked: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Checked"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Text.Checked, rhs: Anytype_Event.Block.Set.Text.Checked) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".Color"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Text.Color, rhs: Anytype_Event.Block.Set.Text.Color) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.IconEmoji: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".IconEmoji"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Text.IconEmoji, rhs: Anytype_Event.Block.Set.Text.IconEmoji) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Text.IconImage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Text.protoMessageName + ".IconImage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Text.IconImage, rhs: Anytype_Event.Block.Set.Text.IconImage) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Latex: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Latex"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "text"),
    3: .same(proto: "processor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._text) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._processor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._text {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._processor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Latex, rhs: Anytype_Event.Block.Set.Latex) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._text != rhs._text {return false}
    if lhs._processor != rhs._processor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Latex.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Latex.protoMessageName + ".Text"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Latex.Text, rhs: Anytype_Event.Block.Set.Latex.Text) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Latex.Processor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Latex.protoMessageName + ".Processor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .latex {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Latex.Processor, rhs: Anytype_Event.Block.Set.Latex.Processor) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Div: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Div"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "style"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._style) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Div, rhs: Anytype_Event.Block.Set.Div) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._style != rhs._style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Div.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Div.protoMessageName + ".Style"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .line {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Div.Style, rhs: Anytype_Event.Block.Set.Div.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".File"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "state"),
    4: .same(proto: "mime"),
    5: .same(proto: "hash"),
    6: .same(proto: "name"),
    7: .same(proto: "size"),
    8: .same(proto: "style"),
    9: .same(proto: "targetObjectId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._state) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._mime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._hash) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._name) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._size) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._style) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._targetObjectID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._state {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._mime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._hash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._targetObjectID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.File, rhs: Anytype_Event.Block.Set.File) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._type != rhs._type {return false}
    if lhs._state != rhs._state {return false}
    if lhs._mime != rhs._mime {return false}
    if lhs._hash != rhs._hash {return false}
    if lhs._name != rhs._name {return false}
    if lhs._size != rhs._size {return false}
    if lhs._style != rhs._style {return false}
    if lhs._targetObjectID != rhs._targetObjectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Name: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Name"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.File.Name, rhs: Anytype_Event.Block.Set.File.Name) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Width: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Width"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.File.Width, rhs: Anytype_Event.Block.Set.File.Width) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".State"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .empty {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.File.State, rhs: Anytype_Event.Block.Set.File.State) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.TypeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Type"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .none {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.File.TypeMessage, rhs: Anytype_Event.Block.Set.File.TypeMessage) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Style"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .auto {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.File.Style, rhs: Anytype_Event.Block.Set.File.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Hash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Hash"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.File.Hash, rhs: Anytype_Event.Block.Set.File.Hash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Mime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Mime"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.File.Mime, rhs: Anytype_Event.Block.Set.File.Mime) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.Size: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".Size"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.File.Size, rhs: Anytype_Event.Block.Set.File.Size) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.File.TargetObjectId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.File.protoMessageName + ".TargetObjectId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.File.TargetObjectId, rhs: Anytype_Event.Block.Set.File.TargetObjectId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Link"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "targetBlockId"),
    3: .same(proto: "style"),
    4: .same(proto: "fields"),
    5: .same(proto: "iconSize"),
    6: .same(proto: "cardStyle"),
    7: .same(proto: "description"),
    8: .same(proto: "relations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._targetBlockID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._style) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._fields) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._iconSize) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._cardStyle) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._relations) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._targetBlockID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._iconSize {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._cardStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._relations {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Link, rhs: Anytype_Event.Block.Set.Link) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._targetBlockID != rhs._targetBlockID {return false}
    if lhs._style != rhs._style {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs._iconSize != rhs._iconSize {return false}
    if lhs._cardStyle != rhs._cardStyle {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._relations != rhs._relations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.TargetBlockId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".TargetBlockId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Link.TargetBlockId, rhs: Anytype_Event.Block.Set.Link.TargetBlockId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".Style"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .page {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Link.Style, rhs: Anytype_Event.Block.Set.Link.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".Fields"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Link.Fields, rhs: Anytype_Event.Block.Set.Link.Fields) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.IconSize: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".IconSize"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .sizeNone {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Link.IconSize, rhs: Anytype_Event.Block.Set.Link.IconSize) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.CardStyle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".CardStyle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .text {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Link.CardStyle, rhs: Anytype_Event.Block.Set.Link.CardStyle) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.Description: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".Description"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .none {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Link.Description, rhs: Anytype_Event.Block.Set.Link.Description) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Link.Relations: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Link.protoMessageName + ".Relations"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitRepeatedStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Link.Relations, rhs: Anytype_Event.Block.Set.Link.Relations) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Bookmark"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "url"),
    3: .same(proto: "title"),
    4: .same(proto: "description"),
    5: .same(proto: "imageHash"),
    6: .same(proto: "faviconHash"),
    7: .same(proto: "type"),
    8: .same(proto: "targetObjectId"),
    9: .same(proto: "state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._url) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._title) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._imageHash) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._faviconHash) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._targetObjectID) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._state) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._url {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._title {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._imageHash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._faviconHash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._targetObjectID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._state {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Bookmark, rhs: Anytype_Event.Block.Set.Bookmark) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._url != rhs._url {return false}
    if lhs._title != rhs._title {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._imageHash != rhs._imageHash {return false}
    if lhs._faviconHash != rhs._faviconHash {return false}
    if lhs._type != rhs._type {return false}
    if lhs._targetObjectID != rhs._targetObjectID {return false}
    if lhs._state != rhs._state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.Url: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".Url"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Bookmark.Url, rhs: Anytype_Event.Block.Set.Bookmark.Url) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.Title: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".Title"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Bookmark.Title, rhs: Anytype_Event.Block.Set.Bookmark.Title) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.Description: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".Description"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Bookmark.Description, rhs: Anytype_Event.Block.Set.Bookmark.Description) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.ImageHash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".ImageHash"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Bookmark.ImageHash, rhs: Anytype_Event.Block.Set.Bookmark.ImageHash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.FaviconHash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".FaviconHash"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Bookmark.FaviconHash, rhs: Anytype_Event.Block.Set.Bookmark.FaviconHash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.TypeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".Type"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .unknown {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Bookmark.TypeMessage, rhs: Anytype_Event.Block.Set.Bookmark.TypeMessage) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.TargetObjectId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".TargetObjectId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Bookmark.TargetObjectId, rhs: Anytype_Event.Block.Set.Bookmark.TargetObjectId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Bookmark.State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Bookmark.protoMessageName + ".State"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .empty {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Bookmark.State, rhs: Anytype_Event.Block.Set.Bookmark.State) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.TableRow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".TableRow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "isHeader"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._isHeader) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._isHeader {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.TableRow, rhs: Anytype_Event.Block.Set.TableRow) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._isHeader != rhs._isHeader {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.TableRow.IsHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.TableRow.protoMessageName + ".IsHeader"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.TableRow.IsHeader, rhs: Anytype_Event.Block.Set.TableRow.IsHeader) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Widget: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.protoMessageName + ".Widget"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "layout"),
    3: .same(proto: "limit"),
    4: .same(proto: "viewId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._layout) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._limit) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._viewID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._layout {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._limit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._viewID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Widget, rhs: Anytype_Event.Block.Set.Widget) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._layout != rhs._layout {return false}
    if lhs._limit != rhs._limit {return false}
    if lhs._viewID != rhs._viewID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Widget.Layout: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Widget.protoMessageName + ".Layout"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .link {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Widget.Layout, rhs: Anytype_Event.Block.Set.Widget.Layout) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Widget.Limit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Widget.protoMessageName + ".Limit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Widget.Limit, rhs: Anytype_Event.Block.Set.Widget.Limit) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Set.Widget.ViewId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Set.Widget.protoMessageName + ".ViewId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Set.Widget.ViewId, rhs: Anytype_Event.Block.Set.Widget.ViewId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Fill"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill, rhs: Anytype_Event.Block.Fill) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Details: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Details"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "details"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._details) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Details, rhs: Anytype_Event.Block.Fill.Details) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._details != rhs._details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.DatabaseRecords: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".DatabaseRecords"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "records"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.records) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.records.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.records, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.DatabaseRecords, rhs: Anytype_Event.Block.Fill.DatabaseRecords) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.records != rhs.records {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Fields"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "fields"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fields) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Fields, rhs: Anytype_Event.Block.Fill.Fields) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.ChildrenIds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".ChildrenIds"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "childrenIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.childrenIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.childrenIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.childrenIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.ChildrenIds, rhs: Anytype_Event.Block.Fill.ChildrenIds) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.childrenIds != rhs.childrenIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Restrictions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Restrictions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "restrictions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._restrictions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._restrictions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Restrictions, rhs: Anytype_Event.Block.Fill.Restrictions) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._restrictions != rhs._restrictions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.BackgroundColor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".BackgroundColor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "backgroundColor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.backgroundColor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.backgroundColor.isEmpty {
      try visitor.visitSingularStringField(value: self.backgroundColor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.BackgroundColor, rhs: Anytype_Event.Block.Fill.BackgroundColor) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.backgroundColor != rhs.backgroundColor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Align: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Align"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "align"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.align) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.align != .left {
      try visitor.visitSingularEnumField(value: self.align, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Align, rhs: Anytype_Event.Block.Fill.Align) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.align != rhs.align {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Text"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "text"),
    3: .same(proto: "style"),
    4: .same(proto: "marks"),
    5: .same(proto: "checked"),
    6: .same(proto: "color"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._text) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._style) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._marks) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._checked) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._color) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._text {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._marks {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._checked {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Text, rhs: Anytype_Event.Block.Fill.Text) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._text != rhs._text {return false}
    if lhs._style != rhs._style {return false}
    if lhs._marks != rhs._marks {return false}
    if lhs._checked != rhs._checked {return false}
    if lhs._color != rhs._color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Text.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Text.protoMessageName + ".Text"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Text.Text, rhs: Anytype_Event.Block.Fill.Text.Text) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Text.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Text.protoMessageName + ".Style"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .paragraph {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Text.Style, rhs: Anytype_Event.Block.Fill.Text.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Text.Marks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Text.protoMessageName + ".Marks"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Text.Marks, rhs: Anytype_Event.Block.Fill.Text.Marks) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Text.Checked: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Text.protoMessageName + ".Checked"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Text.Checked, rhs: Anytype_Event.Block.Fill.Text.Checked) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Text.Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Text.protoMessageName + ".Color"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Text.Color, rhs: Anytype_Event.Block.Fill.Text.Color) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Div: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Div"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "style"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._style) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Div, rhs: Anytype_Event.Block.Fill.Div) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._style != rhs._style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Div.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Div.protoMessageName + ".Style"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .line {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Div.Style, rhs: Anytype_Event.Block.Fill.Div.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".File"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "state"),
    4: .same(proto: "mime"),
    5: .same(proto: "hash"),
    6: .same(proto: "name"),
    7: .same(proto: "size"),
    8: .same(proto: "style"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._state) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._mime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._hash) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._name) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._size) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._style) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._state {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._mime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._hash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.File, rhs: Anytype_Event.Block.Fill.File) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._type != rhs._type {return false}
    if lhs._state != rhs._state {return false}
    if lhs._mime != rhs._mime {return false}
    if lhs._hash != rhs._hash {return false}
    if lhs._name != rhs._name {return false}
    if lhs._size != rhs._size {return false}
    if lhs._style != rhs._style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.Name: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Name"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.File.Name, rhs: Anytype_Event.Block.Fill.File.Name) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.Width: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Width"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.File.Width, rhs: Anytype_Event.Block.Fill.File.Width) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".State"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .empty {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.File.State, rhs: Anytype_Event.Block.Fill.File.State) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.TypeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Type"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .none {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.File.TypeMessage, rhs: Anytype_Event.Block.Fill.File.TypeMessage) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Style"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .auto {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.File.Style, rhs: Anytype_Event.Block.Fill.File.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.Hash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Hash"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.File.Hash, rhs: Anytype_Event.Block.Fill.File.Hash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.Mime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Mime"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.File.Mime, rhs: Anytype_Event.Block.Fill.File.Mime) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.File.Size: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.File.protoMessageName + ".Size"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.File.Size, rhs: Anytype_Event.Block.Fill.File.Size) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Link"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "targetBlockId"),
    3: .same(proto: "style"),
    4: .same(proto: "fields"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._targetBlockID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._style) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._fields) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._targetBlockID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Link, rhs: Anytype_Event.Block.Fill.Link) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._targetBlockID != rhs._targetBlockID {return false}
    if lhs._style != rhs._style {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Link.TargetBlockId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Link.protoMessageName + ".TargetBlockId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Link.TargetBlockId, rhs: Anytype_Event.Block.Fill.Link.TargetBlockId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Link.Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Link.protoMessageName + ".Style"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .page {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Link.Style, rhs: Anytype_Event.Block.Fill.Link.Style) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Link.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Link.protoMessageName + ".Fields"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Link.Fields, rhs: Anytype_Event.Block.Fill.Link.Fields) -> Bool {
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.protoMessageName + ".Bookmark"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "url"),
    3: .same(proto: "title"),
    4: .same(proto: "description"),
    5: .same(proto: "imageHash"),
    6: .same(proto: "faviconHash"),
    7: .same(proto: "type"),
    8: .same(proto: "targetObjectId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._url) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._title) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._imageHash) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._faviconHash) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._targetObjectID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._url {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._title {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._imageHash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._faviconHash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._targetObjectID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Bookmark, rhs: Anytype_Event.Block.Fill.Bookmark) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._url != rhs._url {return false}
    if lhs._title != rhs._title {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._imageHash != rhs._imageHash {return false}
    if lhs._faviconHash != rhs._faviconHash {return false}
    if lhs._type != rhs._type {return false}
    if lhs._targetObjectID != rhs._targetObjectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.Url: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".Url"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.Url, rhs: Anytype_Event.Block.Fill.Bookmark.Url) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.Title: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".Title"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.Title, rhs: Anytype_Event.Block.Fill.Bookmark.Title) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.Description: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".Description"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.Description, rhs: Anytype_Event.Block.Fill.Bookmark.Description) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.ImageHash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".ImageHash"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.ImageHash, rhs: Anytype_Event.Block.Fill.Bookmark.ImageHash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.FaviconHash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".FaviconHash"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.FaviconHash, rhs: Anytype_Event.Block.Fill.Bookmark.FaviconHash) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.TypeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".Type"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != .unknown {
      try visitor.visitSingularEnumField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.TypeMessage, rhs: Anytype_Event.Block.Fill.Bookmark.TypeMessage) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Fill.Bookmark.TargetObjectId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Fill.Bookmark.protoMessageName + ".TargetObjectId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Fill.Bookmark.TargetObjectId, rhs: Anytype_Event.Block.Fill.Bookmark.TargetObjectId) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.protoMessageName + ".Dataview"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview, rhs: Anytype_Event.Block.Dataview) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.SliceOperation: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SliceOperationNone"),
    1: .same(proto: "SliceOperationAdd"),
    2: .same(proto: "SliceOperationMove"),
    3: .same(proto: "SliceOperationRemove"),
    4: .same(proto: "SliceOperationReplace"),
  ]
}

extension Anytype_Event.Block.Dataview.ViewSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".ViewSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewId"),
    3: .same(proto: "view"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _viewID: String = String()
    var _view: Anytype_Model_Block.Content.Dataview.View? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _viewID = source._viewID
      _view = source._view
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._viewID) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._view) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._viewID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._viewID, fieldNumber: 2)
      }
      try { if let v = _storage._view {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewSet, rhs: Anytype_Event.Block.Dataview.ViewSet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._viewID != rhs_storage._viewID {return false}
        if _storage._view != rhs_storage._view {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".ViewUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewId"),
    3: .same(proto: "filter"),
    4: .same(proto: "relation"),
    5: .same(proto: "sort"),
    6: .same(proto: "fields"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.viewID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.filter) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.relation) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.sort) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._fields) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.viewID.isEmpty {
      try visitor.visitSingularStringField(value: self.viewID, fieldNumber: 2)
    }
    if !self.filter.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.filter, fieldNumber: 3)
    }
    if !self.relation.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.relation, fieldNumber: 4)
    }
    if !self.sort.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sort, fieldNumber: 5)
    }
    try { if let v = self._fields {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate, rhs: Anytype_Event.Block.Dataview.ViewUpdate) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.viewID != rhs.viewID {return false}
    if lhs.filter != rhs.filter {return false}
    if lhs.relation != rhs.relation {return false}
    if lhs.sort != rhs.sort {return false}
    if lhs._fields != rhs._fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Fields: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.protoMessageName + ".Fields"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "name"),
    3: .same(proto: "coverRelationKey"),
    4: .same(proto: "hideIcon"),
    5: .same(proto: "cardSize"),
    6: .same(proto: "coverFit"),
    7: .same(proto: "groupRelationKey"),
    8: .same(proto: "groupBackgroundColors"),
    9: .same(proto: "pageLimit"),
    10: .same(proto: "defaultTemplateId"),
    15: .same(proto: "defaultObjectTypeId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.coverRelationKey) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.hideIcon) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.cardSize) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.coverFit) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.groupRelationKey) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.groupBackgroundColors) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.pageLimit) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.defaultTemplateID) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.defaultObjectTypeID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .table {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.coverRelationKey.isEmpty {
      try visitor.visitSingularStringField(value: self.coverRelationKey, fieldNumber: 3)
    }
    if self.hideIcon != false {
      try visitor.visitSingularBoolField(value: self.hideIcon, fieldNumber: 4)
    }
    if self.cardSize != .small {
      try visitor.visitSingularEnumField(value: self.cardSize, fieldNumber: 5)
    }
    if self.coverFit != false {
      try visitor.visitSingularBoolField(value: self.coverFit, fieldNumber: 6)
    }
    if !self.groupRelationKey.isEmpty {
      try visitor.visitSingularStringField(value: self.groupRelationKey, fieldNumber: 7)
    }
    if self.groupBackgroundColors != false {
      try visitor.visitSingularBoolField(value: self.groupBackgroundColors, fieldNumber: 8)
    }
    if self.pageLimit != 0 {
      try visitor.visitSingularInt32Field(value: self.pageLimit, fieldNumber: 9)
    }
    if !self.defaultTemplateID.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultTemplateID, fieldNumber: 10)
    }
    if !self.defaultObjectTypeID.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultObjectTypeID, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Fields, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Fields) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.name != rhs.name {return false}
    if lhs.coverRelationKey != rhs.coverRelationKey {return false}
    if lhs.hideIcon != rhs.hideIcon {return false}
    if lhs.cardSize != rhs.cardSize {return false}
    if lhs.coverFit != rhs.coverFit {return false}
    if lhs.groupRelationKey != rhs.groupRelationKey {return false}
    if lhs.groupBackgroundColors != rhs.groupBackgroundColors {return false}
    if lhs.pageLimit != rhs.pageLimit {return false}
    if lhs.defaultTemplateID != rhs.defaultTemplateID {return false}
    if lhs.defaultObjectTypeID != rhs.defaultObjectTypeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Filter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.protoMessageName + ".Filter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "add"),
    2: .same(proto: "remove"),
    3: .same(proto: "update"),
    4: .same(proto: "move"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .add(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .add(v)
        }
      }()
      case 2: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .remove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .remove(v)
        }
      }()
      case 3: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .update(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .update(v)
        }
      }()
      case 4: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .move(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .move(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.operation {
    case .add?: try {
      guard case .add(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .remove?: try {
      guard case .remove(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .update?: try {
      guard case .update(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .move?: try {
      guard case .move(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter) -> Bool {
    if lhs.operation != rhs.operation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Filter.protoMessageName + ".Add"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Add) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Filter.protoMessageName + ".Remove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Remove) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Filter.protoMessageName + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Update) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._item != rhs._item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Filter.protoMessageName + ".Move"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Filter.Move) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Relation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.protoMessageName + ".Relation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "add"),
    2: .same(proto: "remove"),
    3: .same(proto: "update"),
    4: .same(proto: "move"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .add(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .add(v)
        }
      }()
      case 2: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .remove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .remove(v)
        }
      }()
      case 3: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .update(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .update(v)
        }
      }()
      case 4: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .move(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .move(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.operation {
    case .add?: try {
      guard case .add(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .remove?: try {
      guard case .remove(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .update?: try {
      guard case .update(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .move?: try {
      guard case .move(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation) -> Bool {
    if lhs.operation != rhs.operation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Relation.protoMessageName + ".Add"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Add) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Relation.protoMessageName + ".Remove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Remove) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Relation.protoMessageName + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Update) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._item != rhs._item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Relation.protoMessageName + ".Move"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Relation.Move) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Sort: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.protoMessageName + ".Sort"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "add"),
    2: .same(proto: "remove"),
    3: .same(proto: "update"),
    4: .same(proto: "move"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .add(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .add(v)
        }
      }()
      case 2: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .remove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .remove(v)
        }
      }()
      case 3: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .update(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .update(v)
        }
      }()
      case 4: try {
        var v: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .move(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .move(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.operation {
    case .add?: try {
      guard case .add(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .remove?: try {
      guard case .remove(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .update?: try {
      guard case .update(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .move?: try {
      guard case .move(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort) -> Bool {
    if lhs.operation != rhs.operation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Sort.protoMessageName + ".Add"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Add) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Sort.protoMessageName + ".Remove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Remove) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Sort.protoMessageName + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._item) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._item {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Update) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._item != rhs._item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.ViewUpdate.Sort.protoMessageName + ".Move"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move, rhs: Anytype_Event.Block.Dataview.ViewUpdate.Sort.Move) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".ViewDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.viewID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.viewID.isEmpty {
      try visitor.visitSingularStringField(value: self.viewID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewDelete, rhs: Anytype_Event.Block.Dataview.ViewDelete) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.viewID != rhs.viewID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ViewOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".ViewOrder"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.viewIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.viewIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.viewIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ViewOrder, rhs: Anytype_Event.Block.Dataview.ViewOrder) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.viewIds != rhs.viewIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.SourceSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".SourceSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "source"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.source) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.source.isEmpty {
      try visitor.visitRepeatedStringField(value: self.source, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.SourceSet, rhs: Anytype_Event.Block.Dataview.SourceSet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.OldRelationDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".OldRelationDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "relationKey"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.relationKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.relationKey.isEmpty {
      try visitor.visitSingularStringField(value: self.relationKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.OldRelationDelete, rhs: Anytype_Event.Block.Dataview.OldRelationDelete) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.relationKey != rhs.relationKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.OldRelationSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".OldRelationSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "relationKey"),
    3: .same(proto: "relation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.relationKey) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._relation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.relationKey.isEmpty {
      try visitor.visitSingularStringField(value: self.relationKey, fieldNumber: 2)
    }
    try { if let v = self._relation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.OldRelationSet, rhs: Anytype_Event.Block.Dataview.OldRelationSet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.relationKey != rhs.relationKey {return false}
    if lhs._relation != rhs._relation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.RelationDelete: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".RelationDelete"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "relationKeys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.relationKeys) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.relationKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.relationKeys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.RelationDelete, rhs: Anytype_Event.Block.Dataview.RelationDelete) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.relationKeys != rhs.relationKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.RelationSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".RelationSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "relationLinks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.relationLinks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.relationLinks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.relationLinks, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.RelationSet, rhs: Anytype_Event.Block.Dataview.RelationSet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.relationLinks != rhs.relationLinks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.GroupOrderUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".GroupOrderUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "groupOrder"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._groupOrder) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._groupOrder {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.GroupOrderUpdate, rhs: Anytype_Event.Block.Dataview.GroupOrderUpdate) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._groupOrder != rhs._groupOrder {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.ObjectOrderUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".ObjectOrderUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "viewId"),
    3: .same(proto: "groupId"),
    4: .same(proto: "sliceChanges"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.viewID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.groupID) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.sliceChanges) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.viewID.isEmpty {
      try visitor.visitSingularStringField(value: self.viewID, fieldNumber: 2)
    }
    if !self.groupID.isEmpty {
      try visitor.visitSingularStringField(value: self.groupID, fieldNumber: 3)
    }
    if !self.sliceChanges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sliceChanges, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.ObjectOrderUpdate, rhs: Anytype_Event.Block.Dataview.ObjectOrderUpdate) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.viewID != rhs.viewID {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.sliceChanges != rhs.sliceChanges {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.SliceChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".SliceChange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "op"),
    2: .same(proto: "ids"),
    3: .same(proto: "afterId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.op) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.op != .none {
      try visitor.visitSingularEnumField(value: self.op, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.SliceChange, rhs: Anytype_Event.Block.Dataview.SliceChange) -> Bool {
    if lhs.op != rhs.op {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.afterID != rhs.afterID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.TargetObjectIdSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".TargetObjectIdSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "targetObjectId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.targetObjectID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.targetObjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetObjectID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.TargetObjectIdSet, rhs: Anytype_Event.Block.Dataview.TargetObjectIdSet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.targetObjectID != rhs.targetObjectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Block.Dataview.IsCollectionSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Block.Dataview.protoMessageName + ".IsCollectionSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Block.Dataview.IsCollectionSet, rhs: Anytype_Event.Block.Dataview.IsCollectionSet) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".User"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.User, rhs: Anytype_Event.User) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.User.protoMessageName + ".Block"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.User.Block, rhs: Anytype_Event.User.Block) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block.Join: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.User.Block.protoMessageName + ".Join"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.User.Block.Join, rhs: Anytype_Event.User.Block.Join) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block.Left: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.User.Block.protoMessageName + ".Left"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.User.Block.Left, rhs: Anytype_Event.User.Block.Left) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block.TextRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.User.Block.protoMessageName + ".TextRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "blockId"),
    3: .same(proto: "range"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.blockID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._range) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.blockID.isEmpty {
      try visitor.visitSingularStringField(value: self.blockID, fieldNumber: 2)
    }
    try { if let v = self._range {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.User.Block.TextRange, rhs: Anytype_Event.User.Block.TextRange) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs.blockID != rhs.blockID {return false}
    if lhs._range != rhs._range {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.User.Block.SelectRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.User.Block.protoMessageName + ".SelectRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "blockIdsArray"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.blockIdsArray) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.blockIdsArray.isEmpty {
      try visitor.visitRepeatedStringField(value: self.blockIdsArray, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.User.Block.SelectRange, rhs: Anytype_Event.User.Block.SelectRange) -> Bool {
    if lhs._account != rhs._account {return false}
    if lhs.blockIdsArray != rhs.blockIdsArray {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Ping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".Ping"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.index) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Ping, rhs: Anytype_Event.Ping) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Process: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".Process"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Process, rhs: Anytype_Event.Process) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Process.New: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Process.protoMessageName + ".New"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "process"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._process) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._process {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Process.New, rhs: Anytype_Event.Process.New) -> Bool {
    if lhs._process != rhs._process {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Process.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Process.protoMessageName + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "process"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._process) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._process {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Process.Update, rhs: Anytype_Event.Process.Update) -> Bool {
    if lhs._process != rhs._process {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Process.Done: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Process.protoMessageName + ".Done"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "process"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._process) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._process {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Process.Done, rhs: Anytype_Event.Process.Done) -> Bool {
    if lhs._process != rhs._process {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Status: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".Status"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status, rhs: Anytype_Event.Status) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Status.Thread: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Status.protoMessageName + ".Thread"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "summary"),
    2: .same(proto: "cafe"),
    3: .same(proto: "accounts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._summary) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._cafe) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.accounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._summary {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._cafe {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.accounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accounts, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status.Thread, rhs: Anytype_Event.Status.Thread) -> Bool {
    if lhs._summary != rhs._summary {return false}
    if lhs._cafe != rhs._cafe {return false}
    if lhs.accounts != rhs.accounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Status.Thread.SyncStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unknown"),
    1: .same(proto: "Offline"),
    2: .same(proto: "Syncing"),
    3: .same(proto: "Synced"),
    4: .same(proto: "Failed"),
    5: .same(proto: "IncompatibleVersion"),
  ]
}

extension Anytype_Event.Status.Thread.Summary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Status.Thread.protoMessageName + ".Summary"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status.Thread.Summary, rhs: Anytype_Event.Status.Thread.Summary) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Status.Thread.Cafe: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Status.Thread.protoMessageName + ".Cafe"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "lastPulled"),
    3: .same(proto: "lastPushSucceed"),
    4: .same(proto: "files"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.lastPulled) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.lastPushSucceed) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._files) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if self.lastPulled != 0 {
      try visitor.visitSingularInt64Field(value: self.lastPulled, fieldNumber: 2)
    }
    if self.lastPushSucceed != false {
      try visitor.visitSingularBoolField(value: self.lastPushSucceed, fieldNumber: 3)
    }
    try { if let v = self._files {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status.Thread.Cafe, rhs: Anytype_Event.Status.Thread.Cafe) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.lastPulled != rhs.lastPulled {return false}
    if lhs.lastPushSucceed != rhs.lastPushSucceed {return false}
    if lhs._files != rhs._files {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Status.Thread.Cafe.PinStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Status.Thread.Cafe.protoMessageName + ".PinStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pinning"),
    2: .same(proto: "pinned"),
    3: .same(proto: "failed"),
    4: .same(proto: "updated"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.pinning) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.pinned) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.failed) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.updated) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pinning != 0 {
      try visitor.visitSingularInt32Field(value: self.pinning, fieldNumber: 1)
    }
    if self.pinned != 0 {
      try visitor.visitSingularInt32Field(value: self.pinned, fieldNumber: 2)
    }
    if self.failed != 0 {
      try visitor.visitSingularInt32Field(value: self.failed, fieldNumber: 3)
    }
    if self.updated != 0 {
      try visitor.visitSingularInt64Field(value: self.updated, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status.Thread.Cafe.PinStatus, rhs: Anytype_Event.Status.Thread.Cafe.PinStatus) -> Bool {
    if lhs.pinning != rhs.pinning {return false}
    if lhs.pinned != rhs.pinned {return false}
    if lhs.failed != rhs.failed {return false}
    if lhs.updated != rhs.updated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Status.Thread.Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Status.Thread.protoMessageName + ".Account"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "imageHash"),
    4: .same(proto: "online"),
    5: .same(proto: "lastPulled"),
    6: .same(proto: "lastEdited"),
    7: .same(proto: "devices"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.imageHash) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.online) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.lastPulled) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.lastEdited) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.devices) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.imageHash.isEmpty {
      try visitor.visitSingularStringField(value: self.imageHash, fieldNumber: 3)
    }
    if self.online != false {
      try visitor.visitSingularBoolField(value: self.online, fieldNumber: 4)
    }
    if self.lastPulled != 0 {
      try visitor.visitSingularInt64Field(value: self.lastPulled, fieldNumber: 5)
    }
    if self.lastEdited != 0 {
      try visitor.visitSingularInt64Field(value: self.lastEdited, fieldNumber: 6)
    }
    if !self.devices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.devices, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status.Thread.Account, rhs: Anytype_Event.Status.Thread.Account) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.imageHash != rhs.imageHash {return false}
    if lhs.online != rhs.online {return false}
    if lhs.lastPulled != rhs.lastPulled {return false}
    if lhs.lastEdited != rhs.lastEdited {return false}
    if lhs.devices != rhs.devices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Status.Thread.Device: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Status.Thread.protoMessageName + ".Device"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "online"),
    3: .same(proto: "lastPulled"),
    4: .same(proto: "lastEdited"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.online) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.lastPulled) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.lastEdited) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.online != false {
      try visitor.visitSingularBoolField(value: self.online, fieldNumber: 2)
    }
    if self.lastPulled != 0 {
      try visitor.visitSingularInt64Field(value: self.lastPulled, fieldNumber: 3)
    }
    if self.lastEdited != 0 {
      try visitor.visitSingularInt64Field(value: self.lastEdited, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Status.Thread.Device, rhs: Anytype_Event.Status.Thread.Device) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.online != rhs.online {return false}
    if lhs.lastPulled != rhs.lastPulled {return false}
    if lhs.lastEdited != rhs.lastEdited {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.File: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".File"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.File, rhs: Anytype_Event.File) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.File.LimitReached: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.File.protoMessageName + ".LimitReached"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "spaceId"),
    2: .same(proto: "fileId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.spaceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.fileID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.spaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceID, fieldNumber: 1)
    }
    if !self.fileID.isEmpty {
      try visitor.visitSingularStringField(value: self.fileID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.File.LimitReached, rhs: Anytype_Event.File.LimitReached) -> Bool {
    if lhs.spaceID != rhs.spaceID {return false}
    if lhs.fileID != rhs.fileID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.File.SpaceUsage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.File.protoMessageName + ".SpaceUsage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bytesUsage"),
    2: .same(proto: "spaceId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.bytesUsage) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.spaceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bytesUsage != 0 {
      try visitor.visitSingularUInt64Field(value: self.bytesUsage, fieldNumber: 1)
    }
    if !self.spaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.File.SpaceUsage, rhs: Anytype_Event.File.SpaceUsage) -> Bool {
    if lhs.bytesUsage != rhs.bytesUsage {return false}
    if lhs.spaceID != rhs.spaceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.File.LocalUsage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.File.protoMessageName + ".LocalUsage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "localBytesUsage"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.localBytesUsage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.localBytesUsage != 0 {
      try visitor.visitSingularUInt64Field(value: self.localBytesUsage, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.File.LocalUsage, rhs: Anytype_Event.File.LocalUsage) -> Bool {
    if lhs.localBytesUsage != rhs.localBytesUsage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.File.LimitUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.File.protoMessageName + ".LimitUpdated"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bytesLimit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.bytesLimit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bytesLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.bytesLimit, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.File.LimitUpdated, rhs: Anytype_Event.File.LimitUpdated) -> Bool {
    if lhs.bytesLimit != rhs.bytesLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Membership: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".Membership"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Membership, rhs: Anytype_Event.Membership) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Membership.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Membership.protoMessageName + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Membership.Update, rhs: Anytype_Event.Membership.Update) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Notification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".Notification"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Notification, rhs: Anytype_Event.Notification) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Notification.Send: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Notification.protoMessageName + ".Send"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "notification"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._notification) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._notification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Notification.Send, rhs: Anytype_Event.Notification.Send) -> Bool {
    if lhs._notification != rhs._notification {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Notification.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Notification.protoMessageName + ".Update"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "notification"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._notification) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._notification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Notification.Update, rhs: Anytype_Event.Notification.Update) -> Bool {
    if lhs._notification != rhs._notification {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Payload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.protoMessageName + ".Payload"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Payload, rhs: Anytype_Event.Payload) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Event.Payload.Broadcast: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Event.Payload.protoMessageName + ".Broadcast"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.payload) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.payload.isEmpty {
      try visitor.visitSingularStringField(value: self.payload, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Event.Payload.Broadcast, rhs: Anytype_Event.Payload.Broadcast) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_ResponseEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResponseEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messages"),
    2: .same(proto: "contextId"),
    4: .same(proto: "traceId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.messages) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contextID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.traceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 1)
    }
    if !self.contextID.isEmpty {
      try visitor.visitSingularStringField(value: self.contextID, fieldNumber: 2)
    }
    if !self.traceID.isEmpty {
      try visitor.visitSingularStringField(value: self.traceID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_ResponseEvent, rhs: Anytype_ResponseEvent) -> Bool {
    if lhs.messages != rhs.messages {return false}
    if lhs.contextID != rhs.contextID {return false}
    if lhs.traceID != rhs.traceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Model"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model, rhs: Anytype_Model) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model.Process: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model.protoMessageName + ".Process"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "state"),
    4: .same(proto: "progress"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._progress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.type != .dropFiles {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.state != .none {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    try { if let v = self._progress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model.Process, rhs: Anytype_Model.Process) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.state != rhs.state {return false}
    if lhs._progress != rhs._progress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model.Process.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DropFiles"),
    1: .same(proto: "Import"),
    2: .same(proto: "Export"),
    3: .same(proto: "SaveFile"),
    4: .same(proto: "RecoverAccount"),
    5: .same(proto: "Migration"),
  ]
}

extension Anytype_Model.Process.State: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "Running"),
    2: .same(proto: "Done"),
    3: .same(proto: "Canceled"),
    4: .same(proto: "Error"),
  ]
}

extension Anytype_Model.Process.Progress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Model.Process.protoMessageName + ".Progress"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "done"),
    3: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.total) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.done) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 1)
    }
    if self.done != 0 {
      try visitor.visitSingularInt64Field(value: self.done, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model.Process.Progress, rhs: Anytype_Model.Process.Progress) -> Bool {
    if lhs.total != rhs.total {return false}
    if lhs.done != rhs.done {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
