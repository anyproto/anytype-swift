// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Rpc.Account {
    public struct Create: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      ///*
      /// Front end to middleware request-to-create-an account
      public struct Request: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Account name
        public var name: String = String()

        ///TODO: Remove if not needed, GO-1926
        public var avatar: Anytype_Rpc.Account.Create.Request.OneOf_Avatar? = nil

        /// Path to an image, that will be used as an avatar of this account
        public var avatarLocalPath: String {
          get {
            if case .avatarLocalPath(let v)? = avatar {return v}
            return String()
          }
          set {avatar = .avatarLocalPath(newValue)}
        }

        /// Path to local storage
        public var storePath: String = String()

        /// Option of pre-installed icon
        public var icon: Int64 = 0

        /// Disable local network discovery
        public var disableLocalNetworkSync: Bool = false

        /// optional, default is DefaultConfig
        public var networkMode: Anytype_Rpc.Account.NetworkMode = .defaultConfig

        /// config path for the custom network mode            }
        public var networkCustomConfigFilePath: String = String()

        /// optional, default is false, recommended in case of problems with QUIC transport
        public var preferYamuxTransport: Bool = false

        /// optional, if empty json api will not be started; 127.0.0.1:31009 should be the default one
        public var jsonApiListenAddr: String = String()

        /// anytype:// schema URL to join an embed stream
        public var joinStreamURL: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        ///TODO: Remove if not needed, GO-1926
        public enum OneOf_Avatar: Equatable, Sendable {
          /// Path to an image, that will be used as an avatar of this account
          case avatarLocalPath(String)

        }

        public init() {}
      }

      ///*
      /// Middleware-to-front-end response for an account creation request, that can contain a NULL error and created account or a non-NULL error and an empty account
      public struct Response: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Error while trying to create an account
        public var error: Anytype_Rpc.Account.Create.Response.Error {
          get {return _error ?? Anytype_Rpc.Account.Create.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        public var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        public mutating func clearError() {self._error = nil}

        /// A newly created account; In case of a failure, i.e. error is non-NULL, the account model should contain empty/default-value fields
        public var account: Anytype_Model_Account {
          get {return _account ?? Anytype_Model_Account()}
          set {_account = newValue}
        }
        /// Returns true if `account` has been explicitly set.
        public var hasAccount: Bool {return self._account != nil}
        /// Clears the value of `account`. Subsequent reads from it will return its default value.
        public mutating func clearAccount() {self._account = nil}

        /// deprecated, use account, GO-1926
        public var config: Anytype_Rpc.Account.Config {
          get {return _config ?? Anytype_Rpc.Account.Config()}
          set {_config = newValue}
        }
        /// Returns true if `config` has been explicitly set.
        public var hasConfig: Bool {return self._config != nil}
        /// Clears the value of `config`. Subsequent reads from it will return its default value.
        public mutating func clearConfig() {self._config = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Error: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var code: Anytype_Rpc.Account.Create.Response.Error.Code = .null

          public var description_p: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum Code: SwiftProtobuf.Enum, Swift.CaseIterable {
            public typealias RawValue = Int

            /// No error; Account should be non-empty
            case null // = 0

            /// Any other errors
            case unknownError // = 1

            /// Avatar or name is not correct
            case badInput // = 2
            case accountCreatedButFailedToStartNode // = 101
            case accountCreatedButFailedToSetName // = 102
            case failedToStopRunningNode // = 104
            case failedToWriteConfig // = 105
            case failedToCreateLocalRepo // = 106
            case accountCreationIsCanceled // = 107
            case configFileNotFound // = 200
            case configFileInvalid // = 201
            case configFileNetworkIDMismatch // = 202
            case UNRECOGNIZED(Int)

            public init() {
              self = .null
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 101: self = .accountCreatedButFailedToStartNode
              case 102: self = .accountCreatedButFailedToSetName
              case 104: self = .failedToStopRunningNode
              case 105: self = .failedToWriteConfig
              case 106: self = .failedToCreateLocalRepo
              case 107: self = .accountCreationIsCanceled
              case 200: self = .configFileNotFound
              case 201: self = .configFileInvalid
              case 202: self = .configFileNetworkIDMismatch
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .accountCreatedButFailedToStartNode: return 101
              case .accountCreatedButFailedToSetName: return 102
              case .failedToStopRunningNode: return 104
              case .failedToWriteConfig: return 105
              case .failedToCreateLocalRepo: return 106
              case .accountCreationIsCanceled: return 107
              case .configFileNotFound: return 200
              case .configFileInvalid: return 201
              case .configFileNetworkIDMismatch: return 202
              case .UNRECOGNIZED(let i): return i
              }
            }

            // The compiler won't synthesize support with the UNRECOGNIZED case.
            public static let allCases: [Anytype_Rpc.Account.Create.Response.Error.Code] = [
              .null,
              .unknownError,
              .badInput,
              .accountCreatedButFailedToStartNode,
              .accountCreatedButFailedToSetName,
              .failedToStopRunningNode,
              .failedToWriteConfig,
              .failedToCreateLocalRepo,
              .accountCreationIsCanceled,
              .configFileNotFound,
              .configFileInvalid,
              .configFileNetworkIDMismatch,
            ]

          }

          public init() {}
        }

        public init() {}

        fileprivate var _error: Anytype_Rpc.Account.Create.Response.Error? = nil
        fileprivate var _account: Anytype_Model_Account? = nil
        fileprivate var _config: Anytype_Rpc.Account.Config? = nil
      }

      public init() {}
    }    
}

extension Anytype_Rpc.Account.Create: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.protoMessageName + ".Create"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.Create, rhs: Anytype_Rpc.Account.Create) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Create.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.Create.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}avatarLocalPath\0\u{1}storePath\0\u{1}icon\0\u{1}disableLocalNetworkSync\0\u{1}networkMode\0\u{1}networkCustomConfigFilePath\0\u{1}preferYamuxTransport\0\u{1}jsonApiListenAddr\0\u{1}joinStreamUrl\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.avatar != nil {try decoder.handleConflictingOneOf()}
          self.avatar = .avatarLocalPath(v)
        }
      }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.storePath) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.icon) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.disableLocalNetworkSync) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.networkMode) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.networkCustomConfigFilePath) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.preferYamuxTransport) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.jsonApiListenAddr) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.joinStreamURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if case .avatarLocalPath(let v)? = self.avatar {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.storePath.isEmpty {
      try visitor.visitSingularStringField(value: self.storePath, fieldNumber: 3)
    }
    if self.icon != 0 {
      try visitor.visitSingularInt64Field(value: self.icon, fieldNumber: 4)
    }
    if self.disableLocalNetworkSync != false {
      try visitor.visitSingularBoolField(value: self.disableLocalNetworkSync, fieldNumber: 5)
    }
    if self.networkMode != .defaultConfig {
      try visitor.visitSingularEnumField(value: self.networkMode, fieldNumber: 6)
    }
    if !self.networkCustomConfigFilePath.isEmpty {
      try visitor.visitSingularStringField(value: self.networkCustomConfigFilePath, fieldNumber: 7)
    }
    if self.preferYamuxTransport != false {
      try visitor.visitSingularBoolField(value: self.preferYamuxTransport, fieldNumber: 8)
    }
    if !self.jsonApiListenAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.jsonApiListenAddr, fieldNumber: 9)
    }
    if !self.joinStreamURL.isEmpty {
      try visitor.visitSingularStringField(value: self.joinStreamURL, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.Create.Request, rhs: Anytype_Rpc.Account.Create.Request) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.storePath != rhs.storePath {return false}
    if lhs.icon != rhs.icon {return false}
    if lhs.disableLocalNetworkSync != rhs.disableLocalNetworkSync {return false}
    if lhs.networkMode != rhs.networkMode {return false}
    if lhs.networkCustomConfigFilePath != rhs.networkCustomConfigFilePath {return false}
    if lhs.preferYamuxTransport != rhs.preferYamuxTransport {return false}
    if lhs.jsonApiListenAddr != rhs.jsonApiListenAddr {return false}
    if lhs.joinStreamURL != rhs.joinStreamURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Create.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.Create.protoMessageName + ".Response"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}error\0\u{1}account\0\u{1}config\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.Create.Response, rhs: Anytype_Rpc.Account.Create.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._account != rhs._account {return false}
    if lhs._config != rhs._config {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Create.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.Create.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}description\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.Create.Response.Error, rhs: Anytype_Rpc.Account.Create.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.Create.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NULL\0\u{1}UNKNOWN_ERROR\0\u{1}BAD_INPUT\0\u{2}c\u{1}ACCOUNT_CREATED_BUT_FAILED_TO_START_NODE\0\u{1}ACCOUNT_CREATED_BUT_FAILED_TO_SET_NAME\0\u{2}\u{2}FAILED_TO_STOP_RUNNING_NODE\0\u{1}FAILED_TO_WRITE_CONFIG\0\u{1}FAILED_TO_CREATE_LOCAL_REPO\0\u{1}ACCOUNT_CREATION_IS_CANCELED\0\u{2}]\u{1}CONFIG_FILE_NOT_FOUND\0\u{1}CONFIG_FILE_INVALID\0\u{1}CONFIG_FILE_NETWORK_ID_MISMATCH\0")
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
