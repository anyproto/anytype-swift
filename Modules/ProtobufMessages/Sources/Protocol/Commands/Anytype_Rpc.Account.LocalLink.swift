// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Rpc.Account {
    public struct LocalLink: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct NewChallenge: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Request: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// just for info, not secure to rely on
          public var appName: String = String()

          public var scope: Anytype_Model_Account.Auth.LocalApiScope = .limited

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Response: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var error: Anytype_Rpc.Account.LocalLink.NewChallenge.Response.Error {
            get {return _error ?? Anytype_Rpc.Account.LocalLink.NewChallenge.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          public var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          public mutating func clearError() {self._error = nil}

          public var challengeID: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public struct Error: Sendable {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var code: Anytype_Rpc.Account.LocalLink.NewChallenge.Response.Error.Code = .null

            public var description_p: String = String()

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public enum Code: SwiftProtobuf.Enum, Swift.CaseIterable {
              public typealias RawValue = Int
              case null // = 0
              case unknownError // = 1
              case badInput // = 2
              case accountIsNotRunning // = 101

              /// protection from overuse
              case tooManyRequests // = 102
              case UNRECOGNIZED(Int)

              public init() {
                self = .null
              }

              public init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                case 101: self = .accountIsNotRunning
                case 102: self = .tooManyRequests
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              public var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .accountIsNotRunning: return 101
                case .tooManyRequests: return 102
                case .UNRECOGNIZED(let i): return i
                }
              }

              // The compiler won't synthesize support with the UNRECOGNIZED case.
              public static let allCases: [Anytype_Rpc.Account.LocalLink.NewChallenge.Response.Error.Code] = [
                .null,
                .unknownError,
                .badInput,
                .accountIsNotRunning,
                .tooManyRequests,
              ]

            }

            public init() {}
          }

          public init() {}

          fileprivate var _error: Anytype_Rpc.Account.LocalLink.NewChallenge.Response.Error? = nil
        }

        public init() {}
      }

      public struct SolveChallenge: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Request: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var challengeID: String = String()

          public var answer: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Response: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var error: Anytype_Rpc.Account.LocalLink.SolveChallenge.Response.Error {
            get {return _error ?? Anytype_Rpc.Account.LocalLink.SolveChallenge.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          public var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          public mutating func clearError() {self._error = nil}

          /// ephemeral token for the session
          public var sessionToken: String = String()

          /// persistent key, that can be used to restore session via CreateSession
          public var appKey: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public struct Error: Sendable {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var code: Anytype_Rpc.Account.LocalLink.SolveChallenge.Response.Error.Code = .null

            public var description_p: String = String()

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public enum Code: SwiftProtobuf.Enum, Swift.CaseIterable {
              public typealias RawValue = Int
              case null // = 0
              case unknownError // = 1
              case badInput // = 2
              case accountIsNotRunning // = 101
              case invalidChallengeID // = 102
              case challengeAttemptsExceeded // = 103
              case incorrectAnswer // = 104
              case UNRECOGNIZED(Int)

              public init() {
                self = .null
              }

              public init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                case 101: self = .accountIsNotRunning
                case 102: self = .invalidChallengeID
                case 103: self = .challengeAttemptsExceeded
                case 104: self = .incorrectAnswer
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              public var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .accountIsNotRunning: return 101
                case .invalidChallengeID: return 102
                case .challengeAttemptsExceeded: return 103
                case .incorrectAnswer: return 104
                case .UNRECOGNIZED(let i): return i
                }
              }

              // The compiler won't synthesize support with the UNRECOGNIZED case.
              public static let allCases: [Anytype_Rpc.Account.LocalLink.SolveChallenge.Response.Error.Code] = [
                .null,
                .unknownError,
                .badInput,
                .accountIsNotRunning,
                .invalidChallengeID,
                .challengeAttemptsExceeded,
                .incorrectAnswer,
              ]

            }

            public init() {}
          }

          public init() {}

          fileprivate var _error: Anytype_Rpc.Account.LocalLink.SolveChallenge.Response.Error? = nil
        }

        public init() {}
      }

      public struct ListApps: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Request: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Response: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var error: Anytype_Rpc.Account.LocalLink.ListApps.Response.Error {
            get {return _error ?? Anytype_Rpc.Account.LocalLink.ListApps.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          public var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          public mutating func clearError() {self._error = nil}

          public var app: [Anytype_Model_Account.Auth.AppInfo] = []

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public struct Error: Sendable {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var code: Anytype_Rpc.Account.LocalLink.ListApps.Response.Error.Code = .null

            public var description_p: String = String()

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public enum Code: SwiftProtobuf.Enum, Swift.CaseIterable {
              public typealias RawValue = Int
              case null // = 0
              case unknownError // = 1
              case badInput // = 2
              case accountIsNotRunning // = 101
              case UNRECOGNIZED(Int)

              public init() {
                self = .null
              }

              public init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                case 101: self = .accountIsNotRunning
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              public var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .accountIsNotRunning: return 101
                case .UNRECOGNIZED(let i): return i
                }
              }

              // The compiler won't synthesize support with the UNRECOGNIZED case.
              public static let allCases: [Anytype_Rpc.Account.LocalLink.ListApps.Response.Error.Code] = [
                .null,
                .unknownError,
                .badInput,
                .accountIsNotRunning,
              ]

            }

            public init() {}
          }

          public init() {}

          fileprivate var _error: Anytype_Rpc.Account.LocalLink.ListApps.Response.Error? = nil
        }

        public init() {}
      }

      public struct CreateApp: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Request: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var app: Anytype_Model_Account.Auth.AppInfo {
            get {return _app ?? Anytype_Model_Account.Auth.AppInfo()}
            set {_app = newValue}
          }
          /// Returns true if `app` has been explicitly set.
          public var hasApp: Bool {return self._app != nil}
          /// Clears the value of `app`. Subsequent reads from it will return its default value.
          public mutating func clearApp() {self._app = nil}

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}

          fileprivate var _app: Anytype_Model_Account.Auth.AppInfo? = nil
        }

        public struct Response: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var error: Anytype_Rpc.Account.LocalLink.CreateApp.Response.Error {
            get {return _error ?? Anytype_Rpc.Account.LocalLink.CreateApp.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          public var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          public mutating func clearError() {self._error = nil}

          /// persistent key, that can be used to restore session via CreateSession or for JSON API
          public var appKey: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public struct Error: Sendable {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var code: Anytype_Rpc.Account.LocalLink.CreateApp.Response.Error.Code = .null

            public var description_p: String = String()

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public enum Code: SwiftProtobuf.Enum, Swift.CaseIterable {
              public typealias RawValue = Int
              case null // = 0
              case unknownError // = 1
              case badInput // = 2
              case accountIsNotRunning // = 101
              case UNRECOGNIZED(Int)

              public init() {
                self = .null
              }

              public init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                case 101: self = .accountIsNotRunning
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              public var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .accountIsNotRunning: return 101
                case .UNRECOGNIZED(let i): return i
                }
              }

              // The compiler won't synthesize support with the UNRECOGNIZED case.
              public static let allCases: [Anytype_Rpc.Account.LocalLink.CreateApp.Response.Error.Code] = [
                .null,
                .unknownError,
                .badInput,
                .accountIsNotRunning,
              ]

            }

            public init() {}
          }

          public init() {}

          fileprivate var _error: Anytype_Rpc.Account.LocalLink.CreateApp.Response.Error? = nil
        }

        public init() {}
      }

      public struct RevokeApp: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Request: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var appHash: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct Response: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var error: Anytype_Rpc.Account.LocalLink.RevokeApp.Response.Error {
            get {return _error ?? Anytype_Rpc.Account.LocalLink.RevokeApp.Response.Error()}
            set {_error = newValue}
          }
          /// Returns true if `error` has been explicitly set.
          public var hasError: Bool {return self._error != nil}
          /// Clears the value of `error`. Subsequent reads from it will return its default value.
          public mutating func clearError() {self._error = nil}

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public struct Error: Sendable {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var code: Anytype_Rpc.Account.LocalLink.RevokeApp.Response.Error.Code = .null

            public var description_p: String = String()

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public enum Code: SwiftProtobuf.Enum, Swift.CaseIterable {
              public typealias RawValue = Int
              case null // = 0
              case unknownError // = 1
              case badInput // = 2
              case notFound // = 3
              case accountIsNotRunning // = 101
              case UNRECOGNIZED(Int)

              public init() {
                self = .null
              }

              public init?(rawValue: Int) {
                switch rawValue {
                case 0: self = .null
                case 1: self = .unknownError
                case 2: self = .badInput
                case 3: self = .notFound
                case 101: self = .accountIsNotRunning
                default: self = .UNRECOGNIZED(rawValue)
                }
              }

              public var rawValue: Int {
                switch self {
                case .null: return 0
                case .unknownError: return 1
                case .badInput: return 2
                case .notFound: return 3
                case .accountIsNotRunning: return 101
                case .UNRECOGNIZED(let i): return i
                }
              }

              // The compiler won't synthesize support with the UNRECOGNIZED case.
              public static let allCases: [Anytype_Rpc.Account.LocalLink.RevokeApp.Response.Error.Code] = [
                .null,
                .unknownError,
                .badInput,
                .notFound,
                .accountIsNotRunning,
              ]

            }

            public init() {}
          }

          public init() {}

          fileprivate var _error: Anytype_Rpc.Account.LocalLink.RevokeApp.Response.Error? = nil
        }

        public init() {}
      }

      public init() {}
    }    
}

extension Anytype_Rpc.Account.LocalLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.protoMessageName + ".LocalLink"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink, rhs: Anytype_Rpc.Account.LocalLink) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.NewChallenge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.protoMessageName + ".NewChallenge"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.NewChallenge, rhs: Anytype_Rpc.Account.LocalLink.NewChallenge) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.NewChallenge.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.NewChallenge.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}appName\0\u{1}scope\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appName) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.scope) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appName.isEmpty {
      try visitor.visitSingularStringField(value: self.appName, fieldNumber: 1)
    }
    if self.scope != .limited {
      try visitor.visitSingularEnumField(value: self.scope, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.NewChallenge.Request, rhs: Anytype_Rpc.Account.LocalLink.NewChallenge.Request) -> Bool {
    if lhs.appName != rhs.appName {return false}
    if lhs.scope != rhs.scope {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.NewChallenge.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.NewChallenge.protoMessageName + ".Response"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}error\0\u{1}challengeId\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.challengeID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.challengeID.isEmpty {
      try visitor.visitSingularStringField(value: self.challengeID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.NewChallenge.Response, rhs: Anytype_Rpc.Account.LocalLink.NewChallenge.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.challengeID != rhs.challengeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.NewChallenge.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.NewChallenge.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}description\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.NewChallenge.Response.Error, rhs: Anytype_Rpc.Account.LocalLink.NewChallenge.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.NewChallenge.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NULL\0\u{1}UNKNOWN_ERROR\0\u{1}BAD_INPUT\0\u{2}c\u{1}ACCOUNT_IS_NOT_RUNNING\0\u{1}TOO_MANY_REQUESTS\0")
}

extension Anytype_Rpc.Account.LocalLink.SolveChallenge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.protoMessageName + ".SolveChallenge"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.SolveChallenge, rhs: Anytype_Rpc.Account.LocalLink.SolveChallenge) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.SolveChallenge.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.SolveChallenge.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}challengeId\0\u{1}answer\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.challengeID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.answer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.challengeID.isEmpty {
      try visitor.visitSingularStringField(value: self.challengeID, fieldNumber: 1)
    }
    if !self.answer.isEmpty {
      try visitor.visitSingularStringField(value: self.answer, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.SolveChallenge.Request, rhs: Anytype_Rpc.Account.LocalLink.SolveChallenge.Request) -> Bool {
    if lhs.challengeID != rhs.challengeID {return false}
    if lhs.answer != rhs.answer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.SolveChallenge.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.SolveChallenge.protoMessageName + ".Response"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}error\0\u{1}sessionToken\0\u{1}appKey\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sessionToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.appKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.sessionToken.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionToken, fieldNumber: 2)
    }
    if !self.appKey.isEmpty {
      try visitor.visitSingularStringField(value: self.appKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.SolveChallenge.Response, rhs: Anytype_Rpc.Account.LocalLink.SolveChallenge.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.sessionToken != rhs.sessionToken {return false}
    if lhs.appKey != rhs.appKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.SolveChallenge.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.SolveChallenge.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}description\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.SolveChallenge.Response.Error, rhs: Anytype_Rpc.Account.LocalLink.SolveChallenge.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.SolveChallenge.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NULL\0\u{1}UNKNOWN_ERROR\0\u{1}BAD_INPUT\0\u{2}c\u{1}ACCOUNT_IS_NOT_RUNNING\0\u{1}INVALID_CHALLENGE_ID\0\u{1}CHALLENGE_ATTEMPTS_EXCEEDED\0\u{1}INCORRECT_ANSWER\0")
}

extension Anytype_Rpc.Account.LocalLink.ListApps: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.protoMessageName + ".ListApps"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.ListApps, rhs: Anytype_Rpc.Account.LocalLink.ListApps) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.ListApps.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.ListApps.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.ListApps.Request, rhs: Anytype_Rpc.Account.LocalLink.ListApps.Request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.ListApps.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.ListApps.protoMessageName + ".Response"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}error\0\u{1}app\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.app) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.app.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.app, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.ListApps.Response, rhs: Anytype_Rpc.Account.LocalLink.ListApps.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.app != rhs.app {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.ListApps.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.ListApps.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}description\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.ListApps.Response.Error, rhs: Anytype_Rpc.Account.LocalLink.ListApps.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.ListApps.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NULL\0\u{1}UNKNOWN_ERROR\0\u{1}BAD_INPUT\0\u{2}c\u{1}ACCOUNT_IS_NOT_RUNNING\0")
}

extension Anytype_Rpc.Account.LocalLink.CreateApp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.protoMessageName + ".CreateApp"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.CreateApp, rhs: Anytype_Rpc.Account.LocalLink.CreateApp) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.CreateApp.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.CreateApp.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}app\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._app) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._app {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.CreateApp.Request, rhs: Anytype_Rpc.Account.LocalLink.CreateApp.Request) -> Bool {
    if lhs._app != rhs._app {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.CreateApp.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.CreateApp.protoMessageName + ".Response"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}error\0\u{1}appKey\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.appKey.isEmpty {
      try visitor.visitSingularStringField(value: self.appKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.CreateApp.Response, rhs: Anytype_Rpc.Account.LocalLink.CreateApp.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.appKey != rhs.appKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.CreateApp.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.CreateApp.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}description\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.CreateApp.Response.Error, rhs: Anytype_Rpc.Account.LocalLink.CreateApp.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.CreateApp.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NULL\0\u{1}UNKNOWN_ERROR\0\u{1}BAD_INPUT\0\u{2}c\u{1}ACCOUNT_IS_NOT_RUNNING\0")
}

extension Anytype_Rpc.Account.LocalLink.RevokeApp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.protoMessageName + ".RevokeApp"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.RevokeApp, rhs: Anytype_Rpc.Account.LocalLink.RevokeApp) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.RevokeApp.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.RevokeApp.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}appHash\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appHash.isEmpty {
      try visitor.visitSingularStringField(value: self.appHash, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.RevokeApp.Request, rhs: Anytype_Rpc.Account.LocalLink.RevokeApp.Request) -> Bool {
    if lhs.appHash != rhs.appHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.RevokeApp.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.RevokeApp.protoMessageName + ".Response"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}error\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.RevokeApp.Response, rhs: Anytype_Rpc.Account.LocalLink.RevokeApp.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.RevokeApp.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Account.LocalLink.RevokeApp.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}description\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Account.LocalLink.RevokeApp.Response.Error, rhs: Anytype_Rpc.Account.LocalLink.RevokeApp.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Account.LocalLink.RevokeApp.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NULL\0\u{1}UNKNOWN_ERROR\0\u{1}BAD_INPUT\0\u{1}NOT_FOUND\0\u{2}b\u{1}ACCOUNT_IS_NOT_RUNNING\0")
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
