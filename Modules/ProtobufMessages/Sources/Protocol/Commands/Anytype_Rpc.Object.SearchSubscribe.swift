// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Rpc.Object {
    public struct SearchSubscribe: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Request: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var spaceID: String = String()

        /// (optional) subscription identifier
        /// client can provide some string or middleware will generate it automatically
        /// if subId is already registered on middleware, the new query will replace previous subscription
        public var subID: String = String()

        /// filters
        public var filters: [Anytype_Model_Block.Content.Dataview.Filter] = []

        /// sorts
        public var sorts: [Anytype_Model_Block.Content.Dataview.Sort] = []

        /// results limit
        public var limit: Int64 = 0

        /// initial offset; middleware will find afterId
        public var offset: Int64 = 0

        /// (required)  needed keys in details for return, for object fields mw will return (and subscribe) objects as dependent
        public var keys: [String] = []

        /// (optional) pagination: middleware will return results after given id
        public var afterID: String = String()

        /// (optional) pagination: middleware will return results before given id
        public var beforeID: String = String()

        public var source: [String] = []

        /// disable dependent subscription
        public var noDepSubscription: Bool = false

        public var collectionID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Response: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var error: Anytype_Rpc.Object.SearchSubscribe.Response.Error {
          get {return _error ?? Anytype_Rpc.Object.SearchSubscribe.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        public var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        public mutating func clearError() {self._error = nil}

        public var records: [SwiftProtobuf.Google_Protobuf_Struct] = []

        public var dependencies: [SwiftProtobuf.Google_Protobuf_Struct] = []

        public var subID: String = String()

        public var counters: Anytype_Event.Object.Subscription.Counters {
          get {return _counters ?? Anytype_Event.Object.Subscription.Counters()}
          set {_counters = newValue}
        }
        /// Returns true if `counters` has been explicitly set.
        public var hasCounters: Bool {return self._counters != nil}
        /// Clears the value of `counters`. Subsequent reads from it will return its default value.
        public mutating func clearCounters() {self._counters = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Error: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var code: Anytype_Rpc.Object.SearchSubscribe.Response.Error.Code = .null

          public var description_p: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum Code: SwiftProtobuf.Enum, Swift.CaseIterable {
            public typealias RawValue = Int
            case null // = 0
            case unknownError // = 1

            /// ...
            case badInput // = 2
            case UNRECOGNIZED(Int)

            public init() {
              self = .null
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .UNRECOGNIZED(let i): return i
              }
            }

            // The compiler won't synthesize support with the UNRECOGNIZED case.
            public static let allCases: [Anytype_Rpc.Object.SearchSubscribe.Response.Error.Code] = [
              .null,
              .unknownError,
              .badInput,
            ]

          }

          public init() {}
        }

        public init() {}

        fileprivate var _error: Anytype_Rpc.Object.SearchSubscribe.Response.Error? = nil
        fileprivate var _counters: Anytype_Event.Object.Subscription.Counters? = nil
      }

      public init() {}
    }    
}

extension Anytype_Rpc.Object.SearchSubscribe: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.protoMessageName + ".SearchSubscribe"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.SearchSubscribe, rhs: Anytype_Rpc.Object.SearchSubscribe) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.SearchSubscribe.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.SearchSubscribe.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}subId\0\u{1}filters\0\u{1}sorts\0\u{2}\u{2}limit\0\u{1}offset\0\u{1}keys\0\u{1}afterId\0\u{1}beforeId\0\u{1}source\0\u{2}\u{3}noDepSubscription\0\u{1}collectionId\0\u{1}spaceId\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.subID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.filters) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.sorts) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.limit) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.offset) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.keys) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.beforeID) }()
      case 10: try { try decoder.decodeRepeatedStringField(value: &self.source) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self.noDepSubscription) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.collectionID) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.spaceID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subID.isEmpty {
      try visitor.visitSingularStringField(value: self.subID, fieldNumber: 1)
    }
    if !self.filters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.filters, fieldNumber: 2)
    }
    if !self.sorts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sorts, fieldNumber: 3)
    }
    if self.limit != 0 {
      try visitor.visitSingularInt64Field(value: self.limit, fieldNumber: 5)
    }
    if self.offset != 0 {
      try visitor.visitSingularInt64Field(value: self.offset, fieldNumber: 6)
    }
    if !self.keys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.keys, fieldNumber: 7)
    }
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 8)
    }
    if !self.beforeID.isEmpty {
      try visitor.visitSingularStringField(value: self.beforeID, fieldNumber: 9)
    }
    if !self.source.isEmpty {
      try visitor.visitRepeatedStringField(value: self.source, fieldNumber: 10)
    }
    if self.noDepSubscription != false {
      try visitor.visitSingularBoolField(value: self.noDepSubscription, fieldNumber: 13)
    }
    if !self.collectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.collectionID, fieldNumber: 14)
    }
    if !self.spaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceID, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.SearchSubscribe.Request, rhs: Anytype_Rpc.Object.SearchSubscribe.Request) -> Bool {
    if lhs.spaceID != rhs.spaceID {return false}
    if lhs.subID != rhs.subID {return false}
    if lhs.filters != rhs.filters {return false}
    if lhs.sorts != rhs.sorts {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.afterID != rhs.afterID {return false}
    if lhs.beforeID != rhs.beforeID {return false}
    if lhs.source != rhs.source {return false}
    if lhs.noDepSubscription != rhs.noDepSubscription {return false}
    if lhs.collectionID != rhs.collectionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.SearchSubscribe.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.SearchSubscribe.protoMessageName + ".Response"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}error\0\u{1}records\0\u{1}dependencies\0\u{1}subId\0\u{1}counters\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.records) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.dependencies) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.subID) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._counters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.records.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.records, fieldNumber: 2)
    }
    if !self.dependencies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dependencies, fieldNumber: 3)
    }
    if !self.subID.isEmpty {
      try visitor.visitSingularStringField(value: self.subID, fieldNumber: 4)
    }
    try { if let v = self._counters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.SearchSubscribe.Response, rhs: Anytype_Rpc.Object.SearchSubscribe.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.records != rhs.records {return false}
    if lhs.dependencies != rhs.dependencies {return false}
    if lhs.subID != rhs.subID {return false}
    if lhs._counters != rhs._counters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.SearchSubscribe.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.SearchSubscribe.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}description\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.SearchSubscribe.Response.Error, rhs: Anytype_Rpc.Object.SearchSubscribe.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.SearchSubscribe.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NULL\0\u{1}UNKNOWN_ERROR\0\u{1}BAD_INPUT\0")
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
