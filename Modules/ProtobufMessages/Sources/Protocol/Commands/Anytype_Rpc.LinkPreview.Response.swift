// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Rpc.LinkPreview {
    public struct Response: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var error: Anytype_Rpc.LinkPreview.Response.Error {
        get {return _error ?? Anytype_Rpc.LinkPreview.Response.Error()}
        set {_error = newValue}
      }
      /// Returns true if `error` has been explicitly set.
      public var hasError: Bool {return self._error != nil}
      /// Clears the value of `error`. Subsequent reads from it will return its default value.
      public mutating func clearError() {self._error = nil}

      public var linkPreview: Anytype_Model_LinkPreview {
        get {return _linkPreview ?? Anytype_Model_LinkPreview()}
        set {_linkPreview = newValue}
      }
      /// Returns true if `linkPreview` has been explicitly set.
      public var hasLinkPreview: Bool {return self._linkPreview != nil}
      /// Clears the value of `linkPreview`. Subsequent reads from it will return its default value.
      public mutating func clearLinkPreview() {self._linkPreview = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Error: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var code: Anytype_Rpc.LinkPreview.Response.Error.Code = .null

        public var description_p: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public enum Code: SwiftProtobuf.Enum, Swift.CaseIterable {
          public typealias RawValue = Int
          case null // = 0
          case unknownError // = 1
          case badInput // = 2
          case privateLink // = 3
          case UNRECOGNIZED(Int)

          public init() {
            self = .null
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .null
            case 1: self = .unknownError
            case 2: self = .badInput
            case 3: self = .privateLink
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .null: return 0
            case .unknownError: return 1
            case .badInput: return 2
            case .privateLink: return 3
            case .UNRECOGNIZED(let i): return i
            }
          }

          // The compiler won't synthesize support with the UNRECOGNIZED case.
          public static let allCases: [Anytype_Rpc.LinkPreview.Response.Error.Code] = [
            .null,
            .unknownError,
            .badInput,
            .privateLink,
          ]

        }

        public init() {}
      }

      public init() {}

      fileprivate var _error: Anytype_Rpc.LinkPreview.Response.Error? = nil
      fileprivate var _linkPreview: Anytype_Model_LinkPreview? = nil
    }    
}

extension Anytype_Rpc.LinkPreview.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.LinkPreview.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "linkPreview"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._linkPreview) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._linkPreview {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.LinkPreview.Response, rhs: Anytype_Rpc.LinkPreview.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._linkPreview != rhs._linkPreview {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.LinkPreview.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.LinkPreview.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.LinkPreview.Response.Error, rhs: Anytype_Rpc.LinkPreview.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.LinkPreview.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    3: .same(proto: "PRIVATE_LINK"),
  ]
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
