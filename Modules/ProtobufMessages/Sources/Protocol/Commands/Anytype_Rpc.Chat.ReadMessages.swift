// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Rpc.Chat {
    public struct ReadMessages: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum ReadType: SwiftProtobuf.Enum, Swift.CaseIterable {
        public typealias RawValue = Int
        case messages // = 0
        case mentions // = 1
        case UNRECOGNIZED(Int)

        public init() {
          self = .messages
        }

        public init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .messages
          case 1: self = .mentions
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        public var rawValue: Int {
          switch self {
          case .messages: return 0
          case .mentions: return 1
          case .UNRECOGNIZED(let i): return i
          }
        }

        // The compiler won't synthesize support with the UNRECOGNIZED case.
        public static let allCases: [Anytype_Rpc.Chat.ReadMessages.ReadType] = [
          .messages,
          .mentions,
        ]

      }

      public struct Request: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var type: Anytype_Rpc.Chat.ReadMessages.ReadType = .messages

        /// id of the chat object
        public var chatObjectID: String = String()

        /// read from this orderId; if empty - read from the beginning of the chat
        public var afterOrderID: String = String()

        /// read til this orderId
        public var beforeOrderID: String = String()

        /// stateId from the last processed ChatState event(or GetMessages). Used to prevent race conditions
        public var lastStateID: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct Response: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var error: Anytype_Rpc.Chat.ReadMessages.Response.Error {
          get {return _error ?? Anytype_Rpc.Chat.ReadMessages.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        public var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        public mutating func clearError() {self._error = nil}

        public var event: Anytype_ResponseEvent {
          get {return _event ?? Anytype_ResponseEvent()}
          set {_event = newValue}
        }
        /// Returns true if `event` has been explicitly set.
        public var hasEvent: Bool {return self._event != nil}
        /// Clears the value of `event`. Subsequent reads from it will return its default value.
        public mutating func clearEvent() {self._event = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Error: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var code: Anytype_Rpc.Chat.ReadMessages.Response.Error.Code = .null

          public var description_p: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum Code: SwiftProtobuf.Enum, Swift.CaseIterable {
            public typealias RawValue = Int
            case null // = 0
            case unknownError // = 1
            case badInput // = 2

            /// chat is empty or invalid beforeOrderId/lastDbState
            case messagesNotFound // = 100
            case UNRECOGNIZED(Int)

            public init() {
              self = .null
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 100: self = .messagesNotFound
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .messagesNotFound: return 100
              case .UNRECOGNIZED(let i): return i
              }
            }

            // The compiler won't synthesize support with the UNRECOGNIZED case.
            public static let allCases: [Anytype_Rpc.Chat.ReadMessages.Response.Error.Code] = [
              .null,
              .unknownError,
              .badInput,
              .messagesNotFound,
            ]

          }

          public init() {}
        }

        public init() {}

        fileprivate var _error: Anytype_Rpc.Chat.ReadMessages.Response.Error? = nil
        fileprivate var _event: Anytype_ResponseEvent? = nil
      }

      public init() {}
    }    
}

extension Anytype_Rpc.Chat.ReadMessages: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Chat.protoMessageName + ".ReadMessages"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Chat.ReadMessages, rhs: Anytype_Rpc.Chat.ReadMessages) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Chat.ReadMessages.ReadType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Messages"),
    1: .same(proto: "Mentions"),
  ]
}

extension Anytype_Rpc.Chat.ReadMessages.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Chat.ReadMessages.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "chatObjectId"),
    3: .same(proto: "afterOrderId"),
    4: .same(proto: "beforeOrderId"),
    5: .same(proto: "lastStateId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.chatObjectID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.afterOrderID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.beforeOrderID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.lastStateID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .messages {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.chatObjectID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatObjectID, fieldNumber: 2)
    }
    if !self.afterOrderID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterOrderID, fieldNumber: 3)
    }
    if !self.beforeOrderID.isEmpty {
      try visitor.visitSingularStringField(value: self.beforeOrderID, fieldNumber: 4)
    }
    if !self.lastStateID.isEmpty {
      try visitor.visitSingularStringField(value: self.lastStateID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Chat.ReadMessages.Request, rhs: Anytype_Rpc.Chat.ReadMessages.Request) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.chatObjectID != rhs.chatObjectID {return false}
    if lhs.afterOrderID != rhs.afterOrderID {return false}
    if lhs.beforeOrderID != rhs.beforeOrderID {return false}
    if lhs.lastStateID != rhs.lastStateID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Chat.ReadMessages.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Chat.ReadMessages.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "event"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._event) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Chat.ReadMessages.Response, rhs: Anytype_Rpc.Chat.ReadMessages.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Chat.ReadMessages.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Chat.ReadMessages.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Chat.ReadMessages.Response.Error, rhs: Anytype_Rpc.Chat.ReadMessages.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Chat.ReadMessages.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "UNKNOWN_ERROR"),
    2: .same(proto: "BAD_INPUT"),
    100: .same(proto: "MESSAGES_NOT_FOUND"),
  ]
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
