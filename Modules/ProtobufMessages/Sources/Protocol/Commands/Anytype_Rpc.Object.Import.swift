// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Rpc.Object {
    public struct Import: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Request: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var spaceID: String = String()

        public var params: Anytype_Rpc.Object.Import.Request.OneOf_Params? = nil

        public var notionParams: Anytype_Rpc.Object.Import.Request.NotionParams {
          get {
            if case .notionParams(let v)? = params {return v}
            return Anytype_Rpc.Object.Import.Request.NotionParams()
          }
          set {params = .notionParams(newValue)}
        }

        ///for internal use
        public var bookmarksParams: Anytype_Rpc.Object.Import.Request.BookmarksParams {
          get {
            if case .bookmarksParams(let v)? = params {return v}
            return Anytype_Rpc.Object.Import.Request.BookmarksParams()
          }
          set {params = .bookmarksParams(newValue)}
        }

        public var markdownParams: Anytype_Rpc.Object.Import.Request.MarkdownParams {
          get {
            if case .markdownParams(let v)? = params {return v}
            return Anytype_Rpc.Object.Import.Request.MarkdownParams()
          }
          set {params = .markdownParams(newValue)}
        }

        public var htmlParams: Anytype_Rpc.Object.Import.Request.HtmlParams {
          get {
            if case .htmlParams(let v)? = params {return v}
            return Anytype_Rpc.Object.Import.Request.HtmlParams()
          }
          set {params = .htmlParams(newValue)}
        }

        public var txtParams: Anytype_Rpc.Object.Import.Request.TxtParams {
          get {
            if case .txtParams(let v)? = params {return v}
            return Anytype_Rpc.Object.Import.Request.TxtParams()
          }
          set {params = .txtParams(newValue)}
        }

        public var pbParams: Anytype_Rpc.Object.Import.Request.PbParams {
          get {
            if case .pbParams(let v)? = params {return v}
            return Anytype_Rpc.Object.Import.Request.PbParams()
          }
          set {params = .pbParams(newValue)}
        }

        public var csvParams: Anytype_Rpc.Object.Import.Request.CsvParams {
          get {
            if case .csvParams(let v)? = params {return v}
            return Anytype_Rpc.Object.Import.Request.CsvParams()
          }
          set {params = .csvParams(newValue)}
        }

        /// optional, for external developers usage
        public var snapshots: [Anytype_Rpc.Object.Import.Request.Snapshot] = []

        public var updateExistingObjects: Bool = false

        public var type: Anytype_Model_Import.TypeEnum = .notion

        public var mode: Anytype_Rpc.Object.Import.Request.Mode = .allOrNothing

        public var noProgress: Bool = false

        public var isMigration: Bool = false

        public var isNewSpace: Bool = false

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public enum OneOf_Params: Equatable, Sendable {
          case notionParams(Anytype_Rpc.Object.Import.Request.NotionParams)
          ///for internal use
          case bookmarksParams(Anytype_Rpc.Object.Import.Request.BookmarksParams)
          case markdownParams(Anytype_Rpc.Object.Import.Request.MarkdownParams)
          case htmlParams(Anytype_Rpc.Object.Import.Request.HtmlParams)
          case txtParams(Anytype_Rpc.Object.Import.Request.TxtParams)
          case pbParams(Anytype_Rpc.Object.Import.Request.PbParams)
          case csvParams(Anytype_Rpc.Object.Import.Request.CsvParams)

        }

        public enum Mode: SwiftProtobuf.Enum, Swift.CaseIterable {
          public typealias RawValue = Int
          case allOrNothing // = 0
          case ignoreErrors // = 1
          case UNRECOGNIZED(Int)

          public init() {
            self = .allOrNothing
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .allOrNothing
            case 1: self = .ignoreErrors
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .allOrNothing: return 0
            case .ignoreErrors: return 1
            case .UNRECOGNIZED(let i): return i
            }
          }

          // The compiler won't synthesize support with the UNRECOGNIZED case.
          public static let allCases: [Anytype_Rpc.Object.Import.Request.Mode] = [
            .allOrNothing,
            .ignoreErrors,
          ]

        }

        public struct NotionParams: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var apiKey: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct MarkdownParams: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var path: [String] = []

          public var createDirectoryPages: Bool = false

          public var includePropertiesAsBlock: Bool = false

          public var noCollection: Bool = false

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct BookmarksParams: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var url: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct HtmlParams: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var path: [String] = []

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct TxtParams: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var path: [String] = []

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}
        }

        public struct PbParams: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var path: [String] = []

          public var noCollection: Bool = false

          public var collectionTitle: String = String()

          public var importType: Anytype_Rpc.Object.Import.Request.PbParams.TypeEnum = .space

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum TypeEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
            public typealias RawValue = Int
            case space // = 0
            case experience // = 1
            case UNRECOGNIZED(Int)

            public init() {
              self = .space
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .space
              case 1: self = .experience
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .space: return 0
              case .experience: return 1
              case .UNRECOGNIZED(let i): return i
              }
            }

            // The compiler won't synthesize support with the UNRECOGNIZED case.
            public static let allCases: [Anytype_Rpc.Object.Import.Request.PbParams.TypeEnum] = [
              .space,
              .experience,
            ]

          }

          public init() {}
        }

        public struct CsvParams: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var path: [String] = []

          public var mode: Anytype_Rpc.Object.Import.Request.CsvParams.Mode = .collection

          public var useFirstRowForRelations: Bool = false

          public var delimiter: String = String()

          public var transposeRowsAndColumns: Bool = false

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum Mode: SwiftProtobuf.Enum, Swift.CaseIterable {
            public typealias RawValue = Int
            case collection // = 0
            case table // = 1
            case UNRECOGNIZED(Int)

            public init() {
              self = .collection
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .collection
              case 1: self = .table
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .collection: return 0
              case .table: return 1
              case .UNRECOGNIZED(let i): return i
              }
            }

            // The compiler won't synthesize support with the UNRECOGNIZED case.
            public static let allCases: [Anytype_Rpc.Object.Import.Request.CsvParams.Mode] = [
              .collection,
              .table,
            ]

          }

          public init() {}
        }

        public struct Snapshot: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var id: String = String()

          public var snapshot: Anytype_Model_SmartBlockSnapshotBase {
            get {return _snapshot ?? Anytype_Model_SmartBlockSnapshotBase()}
            set {_snapshot = newValue}
          }
          /// Returns true if `snapshot` has been explicitly set.
          public var hasSnapshot: Bool {return self._snapshot != nil}
          /// Clears the value of `snapshot`. Subsequent reads from it will return its default value.
          public mutating func clearSnapshot() {self._snapshot = nil}

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}

          fileprivate var _snapshot: Anytype_Model_SmartBlockSnapshotBase? = nil
        }

        public init() {}
      }

      public struct Response: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// deprecated
        public var error: Anytype_Rpc.Object.Import.Response.Error {
          get {return _error ?? Anytype_Rpc.Object.Import.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        public var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        public mutating func clearError() {self._error = nil}

        /// deprecated
        public var collectionID: String = String()

        /// deprecated
        public var objectsCount: Int64 = 0

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Error: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var code: Anytype_Rpc.Object.Import.Response.Error.Code = .null

          public var description_p: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum Code: SwiftProtobuf.Enum, Swift.CaseIterable {
            public typealias RawValue = Int
            case null // = 0
            case unknownError // = 1
            case badInput // = 2
            case internalError // = 3
            case noObjectsToImport // = 5
            case importIsCanceled // = 6
            case limitOfRowsOrRelationsExceeded // = 7
            case fileLoadError // = 8
            case insufficientPermissions // = 9
            case UNRECOGNIZED(Int)

            public init() {
              self = .null
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 3: self = .internalError
              case 5: self = .noObjectsToImport
              case 6: self = .importIsCanceled
              case 7: self = .limitOfRowsOrRelationsExceeded
              case 8: self = .fileLoadError
              case 9: self = .insufficientPermissions
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .internalError: return 3
              case .noObjectsToImport: return 5
              case .importIsCanceled: return 6
              case .limitOfRowsOrRelationsExceeded: return 7
              case .fileLoadError: return 8
              case .insufficientPermissions: return 9
              case .UNRECOGNIZED(let i): return i
              }
            }

            // The compiler won't synthesize support with the UNRECOGNIZED case.
            public static let allCases: [Anytype_Rpc.Object.Import.Response.Error.Code] = [
              .null,
              .unknownError,
              .badInput,
              .internalError,
              .noObjectsToImport,
              .importIsCanceled,
              .limitOfRowsOrRelationsExceeded,
              .fileLoadError,
              .insufficientPermissions,
            ]

          }

          public init() {}
        }

        public init() {}

        fileprivate var _error: Anytype_Rpc.Object.Import.Response.Error? = nil
      }

      public struct Notion: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct ValidateToken: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public struct Request: Sendable {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var token: String = String()

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          public struct Response: Sendable {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            public var error: Anytype_Rpc.Object.Import.Notion.ValidateToken.Response.Error {
              get {return _error ?? Anytype_Rpc.Object.Import.Notion.ValidateToken.Response.Error()}
              set {_error = newValue}
            }
            /// Returns true if `error` has been explicitly set.
            public var hasError: Bool {return self._error != nil}
            /// Clears the value of `error`. Subsequent reads from it will return its default value.
            public mutating func clearError() {self._error = nil}

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public struct Error: Sendable {
              // SwiftProtobuf.Message conformance is added in an extension below. See the
              // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
              // methods supported on all messages.

              public var code: Anytype_Rpc.Object.Import.Notion.ValidateToken.Response.Error.Code = .null

              public var description_p: String = String()

              public var unknownFields = SwiftProtobuf.UnknownStorage()

              public enum Code: SwiftProtobuf.Enum, Swift.CaseIterable {
                public typealias RawValue = Int
                case null // = 0
                case unknownError // = 1
                case badInput // = 2
                case internalError // = 3
                case unauthorized // = 4
                case forbidden // = 5
                case serviceUnavailable // = 6
                case accountIsNotRunning // = 7
                case UNRECOGNIZED(Int)

                public init() {
                  self = .null
                }

                public init?(rawValue: Int) {
                  switch rawValue {
                  case 0: self = .null
                  case 1: self = .unknownError
                  case 2: self = .badInput
                  case 3: self = .internalError
                  case 4: self = .unauthorized
                  case 5: self = .forbidden
                  case 6: self = .serviceUnavailable
                  case 7: self = .accountIsNotRunning
                  default: self = .UNRECOGNIZED(rawValue)
                  }
                }

                public var rawValue: Int {
                  switch self {
                  case .null: return 0
                  case .unknownError: return 1
                  case .badInput: return 2
                  case .internalError: return 3
                  case .unauthorized: return 4
                  case .forbidden: return 5
                  case .serviceUnavailable: return 6
                  case .accountIsNotRunning: return 7
                  case .UNRECOGNIZED(let i): return i
                  }
                }

                // The compiler won't synthesize support with the UNRECOGNIZED case.
                public static let allCases: [Anytype_Rpc.Object.Import.Notion.ValidateToken.Response.Error.Code] = [
                  .null,
                  .unknownError,
                  .badInput,
                  .internalError,
                  .unauthorized,
                  .forbidden,
                  .serviceUnavailable,
                  .accountIsNotRunning,
                ]

              }

              public init() {}
            }

            public init() {}

            fileprivate var _error: Anytype_Rpc.Object.Import.Notion.ValidateToken.Response.Error? = nil
          }

          public init() {}
        }

        public init() {}
      }

      public init() {}
    }    
}

extension Anytype_Rpc.Object.Import: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.protoMessageName + ".Import"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import, rhs: Anytype_Rpc.Object.Import) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}notionParams\0\u{1}bookmarksParams\0\u{1}markdownParams\0\u{1}htmlParams\0\u{1}txtParams\0\u{1}pbParams\0\u{1}csvParams\0\u{1}snapshots\0\u{1}updateExistingObjects\0\u{1}type\0\u{1}mode\0\u{1}noProgress\0\u{1}isMigration\0\u{1}spaceId\0\u{1}isNewSpace\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Anytype_Rpc.Object.Import.Request.NotionParams?
        var hadOneofValue = false
        if let current = self.params {
          hadOneofValue = true
          if case .notionParams(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.params = .notionParams(v)
        }
      }()
      case 2: try {
        var v: Anytype_Rpc.Object.Import.Request.BookmarksParams?
        var hadOneofValue = false
        if let current = self.params {
          hadOneofValue = true
          if case .bookmarksParams(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.params = .bookmarksParams(v)
        }
      }()
      case 3: try {
        var v: Anytype_Rpc.Object.Import.Request.MarkdownParams?
        var hadOneofValue = false
        if let current = self.params {
          hadOneofValue = true
          if case .markdownParams(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.params = .markdownParams(v)
        }
      }()
      case 4: try {
        var v: Anytype_Rpc.Object.Import.Request.HtmlParams?
        var hadOneofValue = false
        if let current = self.params {
          hadOneofValue = true
          if case .htmlParams(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.params = .htmlParams(v)
        }
      }()
      case 5: try {
        var v: Anytype_Rpc.Object.Import.Request.TxtParams?
        var hadOneofValue = false
        if let current = self.params {
          hadOneofValue = true
          if case .txtParams(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.params = .txtParams(v)
        }
      }()
      case 6: try {
        var v: Anytype_Rpc.Object.Import.Request.PbParams?
        var hadOneofValue = false
        if let current = self.params {
          hadOneofValue = true
          if case .pbParams(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.params = .pbParams(v)
        }
      }()
      case 7: try {
        var v: Anytype_Rpc.Object.Import.Request.CsvParams?
        var hadOneofValue = false
        if let current = self.params {
          hadOneofValue = true
          if case .csvParams(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.params = .csvParams(v)
        }
      }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.snapshots) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.updateExistingObjects) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 11: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.noProgress) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self.isMigration) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.spaceID) }()
      case 15: try { try decoder.decodeSingularBoolField(value: &self.isNewSpace) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.params {
    case .notionParams?: try {
      guard case .notionParams(let v)? = self.params else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .bookmarksParams?: try {
      guard case .bookmarksParams(let v)? = self.params else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .markdownParams?: try {
      guard case .markdownParams(let v)? = self.params else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .htmlParams?: try {
      guard case .htmlParams(let v)? = self.params else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .txtParams?: try {
      guard case .txtParams(let v)? = self.params else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .pbParams?: try {
      guard case .pbParams(let v)? = self.params else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .csvParams?: try {
      guard case .csvParams(let v)? = self.params else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    if !self.snapshots.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.snapshots, fieldNumber: 8)
    }
    if self.updateExistingObjects != false {
      try visitor.visitSingularBoolField(value: self.updateExistingObjects, fieldNumber: 9)
    }
    if self.type != .notion {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 10)
    }
    if self.mode != .allOrNothing {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 11)
    }
    if self.noProgress != false {
      try visitor.visitSingularBoolField(value: self.noProgress, fieldNumber: 12)
    }
    if self.isMigration != false {
      try visitor.visitSingularBoolField(value: self.isMigration, fieldNumber: 13)
    }
    if !self.spaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.spaceID, fieldNumber: 14)
    }
    if self.isNewSpace != false {
      try visitor.visitSingularBoolField(value: self.isNewSpace, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Request, rhs: Anytype_Rpc.Object.Import.Request) -> Bool {
    if lhs.spaceID != rhs.spaceID {return false}
    if lhs.params != rhs.params {return false}
    if lhs.snapshots != rhs.snapshots {return false}
    if lhs.updateExistingObjects != rhs.updateExistingObjects {return false}
    if lhs.type != rhs.type {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.noProgress != rhs.noProgress {return false}
    if lhs.isMigration != rhs.isMigration {return false}
    if lhs.isNewSpace != rhs.isNewSpace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Request.Mode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0ALL_OR_NOTHING\0\u{1}IGNORE_ERRORS\0")
}

extension Anytype_Rpc.Object.Import.Request.NotionParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Request.protoMessageName + ".NotionParams"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}apiKey\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.apiKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.apiKey.isEmpty {
      try visitor.visitSingularStringField(value: self.apiKey, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Request.NotionParams, rhs: Anytype_Rpc.Object.Import.Request.NotionParams) -> Bool {
    if lhs.apiKey != rhs.apiKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Request.MarkdownParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Request.protoMessageName + ".MarkdownParams"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}path\0\u{1}createDirectoryPages\0\u{1}includePropertiesAsBlock\0\u{1}noCollection\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.createDirectoryPages) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.includePropertiesAsBlock) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.noCollection) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitRepeatedStringField(value: self.path, fieldNumber: 1)
    }
    if self.createDirectoryPages != false {
      try visitor.visitSingularBoolField(value: self.createDirectoryPages, fieldNumber: 2)
    }
    if self.includePropertiesAsBlock != false {
      try visitor.visitSingularBoolField(value: self.includePropertiesAsBlock, fieldNumber: 3)
    }
    if self.noCollection != false {
      try visitor.visitSingularBoolField(value: self.noCollection, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Request.MarkdownParams, rhs: Anytype_Rpc.Object.Import.Request.MarkdownParams) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.createDirectoryPages != rhs.createDirectoryPages {return false}
    if lhs.includePropertiesAsBlock != rhs.includePropertiesAsBlock {return false}
    if lhs.noCollection != rhs.noCollection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Request.BookmarksParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Request.protoMessageName + ".BookmarksParams"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}url\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Request.BookmarksParams, rhs: Anytype_Rpc.Object.Import.Request.BookmarksParams) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Request.HtmlParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Request.protoMessageName + ".HtmlParams"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}path\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.path) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitRepeatedStringField(value: self.path, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Request.HtmlParams, rhs: Anytype_Rpc.Object.Import.Request.HtmlParams) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Request.TxtParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Request.protoMessageName + ".TxtParams"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}path\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.path) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitRepeatedStringField(value: self.path, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Request.TxtParams, rhs: Anytype_Rpc.Object.Import.Request.TxtParams) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Request.PbParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Request.protoMessageName + ".PbParams"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}path\0\u{1}noCollection\0\u{1}collectionTitle\0\u{1}importType\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.noCollection) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.collectionTitle) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.importType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitRepeatedStringField(value: self.path, fieldNumber: 1)
    }
    if self.noCollection != false {
      try visitor.visitSingularBoolField(value: self.noCollection, fieldNumber: 2)
    }
    if !self.collectionTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.collectionTitle, fieldNumber: 3)
    }
    if self.importType != .space {
      try visitor.visitSingularEnumField(value: self.importType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Request.PbParams, rhs: Anytype_Rpc.Object.Import.Request.PbParams) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.noCollection != rhs.noCollection {return false}
    if lhs.collectionTitle != rhs.collectionTitle {return false}
    if lhs.importType != rhs.importType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Request.PbParams.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0SPACE\0\u{1}EXPERIENCE\0")
}

extension Anytype_Rpc.Object.Import.Request.CsvParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Request.protoMessageName + ".CsvParams"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}path\0\u{1}mode\0\u{1}useFirstRowForRelations\0\u{1}delimiter\0\u{1}transposeRowsAndColumns\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.useFirstRowForRelations) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.delimiter) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.transposeRowsAndColumns) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitRepeatedStringField(value: self.path, fieldNumber: 1)
    }
    if self.mode != .collection {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 2)
    }
    if self.useFirstRowForRelations != false {
      try visitor.visitSingularBoolField(value: self.useFirstRowForRelations, fieldNumber: 3)
    }
    if !self.delimiter.isEmpty {
      try visitor.visitSingularStringField(value: self.delimiter, fieldNumber: 4)
    }
    if self.transposeRowsAndColumns != false {
      try visitor.visitSingularBoolField(value: self.transposeRowsAndColumns, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Request.CsvParams, rhs: Anytype_Rpc.Object.Import.Request.CsvParams) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.useFirstRowForRelations != rhs.useFirstRowForRelations {return false}
    if lhs.delimiter != rhs.delimiter {return false}
    if lhs.transposeRowsAndColumns != rhs.transposeRowsAndColumns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Request.CsvParams.Mode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0COLLECTION\0\u{1}TABLE\0")
}

extension Anytype_Rpc.Object.Import.Request.Snapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Request.protoMessageName + ".Snapshot"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}snapshot\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._snapshot) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._snapshot {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Request.Snapshot, rhs: Anytype_Rpc.Object.Import.Request.Snapshot) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._snapshot != rhs._snapshot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.protoMessageName + ".Response"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}error\0\u{1}collectionId\0\u{1}objectsCount\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collectionID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.objectsCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.collectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.collectionID, fieldNumber: 2)
    }
    if self.objectsCount != 0 {
      try visitor.visitSingularInt64Field(value: self.objectsCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Response, rhs: Anytype_Rpc.Object.Import.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.collectionID != rhs.collectionID {return false}
    if lhs.objectsCount != rhs.objectsCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}description\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Response.Error, rhs: Anytype_Rpc.Object.Import.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NULL\0\u{1}UNKNOWN_ERROR\0\u{1}BAD_INPUT\0\u{1}INTERNAL_ERROR\0\u{2}\u{2}NO_OBJECTS_TO_IMPORT\0\u{1}IMPORT_IS_CANCELED\0\u{1}LIMIT_OF_ROWS_OR_RELATIONS_EXCEEDED\0\u{1}FILE_LOAD_ERROR\0\u{1}INSUFFICIENT_PERMISSIONS\0")
}

extension Anytype_Rpc.Object.Import.Notion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.protoMessageName + ".Notion"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Notion, rhs: Anytype_Rpc.Object.Import.Notion) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Notion.ValidateToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Notion.protoMessageName + ".ValidateToken"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Notion.ValidateToken, rhs: Anytype_Rpc.Object.Import.Notion.ValidateToken) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Notion.ValidateToken.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Notion.ValidateToken.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}token\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Notion.ValidateToken.Request, rhs: Anytype_Rpc.Object.Import.Notion.ValidateToken.Request) -> Bool {
    if lhs.token != rhs.token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Notion.ValidateToken.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Notion.ValidateToken.protoMessageName + ".Response"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}error\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Notion.ValidateToken.Response, rhs: Anytype_Rpc.Object.Import.Notion.ValidateToken.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Notion.ValidateToken.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.Object.Import.Notion.ValidateToken.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}description\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.Object.Import.Notion.ValidateToken.Response.Error, rhs: Anytype_Rpc.Object.Import.Notion.ValidateToken.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.Object.Import.Notion.ValidateToken.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NULL\0\u{1}UNKNOWN_ERROR\0\u{1}BAD_INPUT\0\u{1}INTERNAL_ERROR\0\u{1}UNAUTHORIZED\0\u{1}FORBIDDEN\0\u{1}SERVICE_UNAVAILABLE\0\u{1}ACCOUNT_IS_NOT_RUNNING\0")
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
