// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: commands.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

extension Anytype_Rpc.AI {
    public struct WritingTools: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public struct Request: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var config: Anytype_Rpc.AI.ProviderConfig {
          get {return _config ?? Anytype_Rpc.AI.ProviderConfig()}
          set {_config = newValue}
        }
        /// Returns true if `config` has been explicitly set.
        public var hasConfig: Bool {return self._config != nil}
        /// Clears the value of `config`. Subsequent reads from it will return its default value.
        public mutating func clearConfig() {self._config = nil}

        public var mode: Anytype_Rpc.AI.WritingTools.Request.WritingMode = .default

        public var language: Anytype_Rpc.AI.WritingTools.Request.Language = .en

        public var text: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public enum WritingMode: SwiftProtobuf.Enum, Swift.CaseIterable {
          public typealias RawValue = Int
          case `default` // = 0
          case summarize // = 1
          case grammar // = 2
          case shorten // = 3
          case expand // = 4
          case bullet // = 5
          case table // = 6
          case casual // = 7
          case funny // = 8
          case confident // = 9
          case straightforward // = 10
          case professional // = 11

          /// ...
          case translate // = 12
          case UNRECOGNIZED(Int)

          public init() {
            self = .default
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .default
            case 1: self = .summarize
            case 2: self = .grammar
            case 3: self = .shorten
            case 4: self = .expand
            case 5: self = .bullet
            case 6: self = .table
            case 7: self = .casual
            case 8: self = .funny
            case 9: self = .confident
            case 10: self = .straightforward
            case 11: self = .professional
            case 12: self = .translate
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .default: return 0
            case .summarize: return 1
            case .grammar: return 2
            case .shorten: return 3
            case .expand: return 4
            case .bullet: return 5
            case .table: return 6
            case .casual: return 7
            case .funny: return 8
            case .confident: return 9
            case .straightforward: return 10
            case .professional: return 11
            case .translate: return 12
            case .UNRECOGNIZED(let i): return i
            }
          }

          // The compiler won't synthesize support with the UNRECOGNIZED case.
          public static let allCases: [Anytype_Rpc.AI.WritingTools.Request.WritingMode] = [
            .default,
            .summarize,
            .grammar,
            .shorten,
            .expand,
            .bullet,
            .table,
            .casual,
            .funny,
            .confident,
            .straightforward,
            .professional,
            .translate,
          ]

        }

        public enum Language: SwiftProtobuf.Enum, Swift.CaseIterable {
          public typealias RawValue = Int
          case en // = 0
          case es // = 1
          case fr // = 2
          case de // = 3
          case it // = 4
          case pt // = 5
          case hi // = 6

          /// ...
          case th // = 7
          case UNRECOGNIZED(Int)

          public init() {
            self = .en
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .en
            case 1: self = .es
            case 2: self = .fr
            case 3: self = .de
            case 4: self = .it
            case 5: self = .pt
            case 6: self = .hi
            case 7: self = .th
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .en: return 0
            case .es: return 1
            case .fr: return 2
            case .de: return 3
            case .it: return 4
            case .pt: return 5
            case .hi: return 6
            case .th: return 7
            case .UNRECOGNIZED(let i): return i
            }
          }

          // The compiler won't synthesize support with the UNRECOGNIZED case.
          public static let allCases: [Anytype_Rpc.AI.WritingTools.Request.Language] = [
            .en,
            .es,
            .fr,
            .de,
            .it,
            .pt,
            .hi,
            .th,
          ]

        }

        public init() {}

        fileprivate var _config: Anytype_Rpc.AI.ProviderConfig? = nil
      }

      public struct Response: Sendable {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var error: Anytype_Rpc.AI.WritingTools.Response.Error {
          get {return _error ?? Anytype_Rpc.AI.WritingTools.Response.Error()}
          set {_error = newValue}
        }
        /// Returns true if `error` has been explicitly set.
        public var hasError: Bool {return self._error != nil}
        /// Clears the value of `error`. Subsequent reads from it will return its default value.
        public mutating func clearError() {self._error = nil}

        public var text: String = String()

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Error: Sendable {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var code: Anytype_Rpc.AI.WritingTools.Response.Error.Code = .null

          public var description_p: String = String()

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum Code: SwiftProtobuf.Enum, Swift.CaseIterable {
            public typealias RawValue = Int
            case null // = 0
            case unknownError // = 1
            case badInput // = 2
            case rateLimitExceeded // = 100
            case endpointNotReachable // = 101
            case modelNotFound // = 102
            case authRequired // = 103

            /// ...
            case languageNotSupported // = 104
            case UNRECOGNIZED(Int)

            public init() {
              self = .null
            }

            public init?(rawValue: Int) {
              switch rawValue {
              case 0: self = .null
              case 1: self = .unknownError
              case 2: self = .badInput
              case 100: self = .rateLimitExceeded
              case 101: self = .endpointNotReachable
              case 102: self = .modelNotFound
              case 103: self = .authRequired
              case 104: self = .languageNotSupported
              default: self = .UNRECOGNIZED(rawValue)
              }
            }

            public var rawValue: Int {
              switch self {
              case .null: return 0
              case .unknownError: return 1
              case .badInput: return 2
              case .rateLimitExceeded: return 100
              case .endpointNotReachable: return 101
              case .modelNotFound: return 102
              case .authRequired: return 103
              case .languageNotSupported: return 104
              case .UNRECOGNIZED(let i): return i
              }
            }

            // The compiler won't synthesize support with the UNRECOGNIZED case.
            public static let allCases: [Anytype_Rpc.AI.WritingTools.Response.Error.Code] = [
              .null,
              .unknownError,
              .badInput,
              .rateLimitExceeded,
              .endpointNotReachable,
              .modelNotFound,
              .authRequired,
              .languageNotSupported,
            ]

          }

          public init() {}
        }

        public init() {}

        fileprivate var _error: Anytype_Rpc.AI.WritingTools.Response.Error? = nil
      }

      public init() {}
    }    
}

extension Anytype_Rpc.AI.WritingTools: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.AI.protoMessageName + ".WritingTools"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.AI.WritingTools, rhs: Anytype_Rpc.AI.WritingTools) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.AI.WritingTools.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.AI.WritingTools.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}config\0\u{1}mode\0\u{1}language\0\u{1}text\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.language) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.mode != .default {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 2)
    }
    if self.language != .en {
      try visitor.visitSingularEnumField(value: self.language, fieldNumber: 3)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.AI.WritingTools.Request, rhs: Anytype_Rpc.AI.WritingTools.Request) -> Bool {
    if lhs._config != rhs._config {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.language != rhs.language {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.AI.WritingTools.Request.WritingMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0DEFAULT\0\u{1}SUMMARIZE\0\u{1}GRAMMAR\0\u{1}SHORTEN\0\u{1}EXPAND\0\u{1}BULLET\0\u{1}TABLE\0\u{1}CASUAL\0\u{1}FUNNY\0\u{1}CONFIDENT\0\u{1}STRAIGHTFORWARD\0\u{1}PROFESSIONAL\0\u{1}TRANSLATE\0")
}

extension Anytype_Rpc.AI.WritingTools.Request.Language: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0EN\0\u{1}ES\0\u{1}FR\0\u{1}DE\0\u{1}IT\0\u{1}PT\0\u{1}HI\0\u{1}TH\0")
}

extension Anytype_Rpc.AI.WritingTools.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.AI.WritingTools.protoMessageName + ".Response"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}error\0\u{1}text\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.AI.WritingTools.Response, rhs: Anytype_Rpc.AI.WritingTools.Response) -> Bool {
    if lhs._error != rhs._error {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.AI.WritingTools.Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Rpc.AI.WritingTools.Response.protoMessageName + ".Error"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}code\0\u{1}description\0")

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != .null {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Rpc.AI.WritingTools.Response.Error, rhs: Anytype_Rpc.AI.WritingTools.Response.Error) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Rpc.AI.WritingTools.Response.Error.Code: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NULL\0\u{1}UNKNOWN_ERROR\0\u{1}BAD_INPUT\0\u{2}b\u{1}RATE_LIMIT_EXCEEDED\0\u{1}ENDPOINT_NOT_REACHABLE\0\u{1}MODEL_NOT_FOUND\0\u{1}AUTH_REQUIRED\0\u{1}LANGUAGE_NOT_SUPPORTED\0")
}

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"
