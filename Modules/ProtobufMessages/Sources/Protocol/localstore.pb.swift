// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pkg/lib/pb/model/protos/localstore.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Anytype_Model_ObjectInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  /// DEPRECATED
  public var objectTypeUrls: [String] = []

  public var details: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _details ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_details = newValue}
  }
  /// Returns true if `details` has been explicitly set.
  public var hasDetails: Bool {return self._details != nil}
  /// Clears the value of `details`. Subsequent reads from it will return its default value.
  public mutating func clearDetails() {self._details = nil}

  /// DEPRECATED
  public var relations: [Anytype_Model_Relation] = []

  public var snippet: String = String()

  /// DEPRECATED
  public var hasInboundLinks_p: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _details: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

public struct Anytype_Model_ObjectDetails: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var details: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _details ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_details = newValue}
  }
  /// Returns true if `details` has been explicitly set.
  public var hasDetails: Bool {return self._details != nil}
  /// Clears the value of `details`. Subsequent reads from it will return its default value.
  public mutating func clearDetails() {self._details = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _details: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

public struct Anytype_Model_ObjectLinks: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var inboundIds: [String] = []

  public var outboundIds: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Anytype_Model_ObjectLinksInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var inbound: [Anytype_Model_ObjectInfo] = []

  public var outbound: [Anytype_Model_ObjectInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Anytype_Model_ObjectInfoWithLinks: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var info: Anytype_Model_ObjectInfo {
    get {return _info ?? Anytype_Model_ObjectInfo()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {self._info = nil}

  public var links: Anytype_Model_ObjectLinksInfo {
    get {return _links ?? Anytype_Model_ObjectLinksInfo()}
    set {_links = newValue}
  }
  /// Returns true if `links` has been explicitly set.
  public var hasLinks: Bool {return self._links != nil}
  /// Clears the value of `links`. Subsequent reads from it will return its default value.
  public mutating func clearLinks() {self._links = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _info: Anytype_Model_ObjectInfo? = nil
  fileprivate var _links: Anytype_Model_ObjectLinksInfo? = nil
}

public struct Anytype_Model_ObjectInfoWithOutboundLinks: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var info: Anytype_Model_ObjectInfo {
    get {return _info ?? Anytype_Model_ObjectInfo()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {self._info = nil}

  public var outboundLinks: [Anytype_Model_ObjectInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _info: Anytype_Model_ObjectInfo? = nil
}

public struct Anytype_Model_ObjectInfoWithOutboundLinksIDs: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var info: Anytype_Model_ObjectInfo {
    get {return _info ?? Anytype_Model_ObjectInfo()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {self._info = nil}

  public var outboundLinks: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _info: Anytype_Model_ObjectInfo? = nil
}

public struct Anytype_Model_ObjectStoreChecksums: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var bundledObjectTypes: String {
    get {return _storage._bundledObjectTypes}
    set {_uniqueStorage()._bundledObjectTypes = newValue}
  }

  public var bundledRelations: String {
    get {return _storage._bundledRelations}
    set {_uniqueStorage()._bundledRelations = newValue}
  }

  public var bundledLayouts: String {
    get {return _storage._bundledLayouts}
    set {_uniqueStorage()._bundledLayouts = newValue}
  }

  /// increased in order to trigger all objects reindex
  public var objectsForceReindexCounter: Int32 {
    get {return _storage._objectsForceReindexCounter}
    set {_uniqueStorage()._objectsForceReindexCounter = newValue}
  }

  /// increased in order to fully reindex all objects
  public var filesForceReindexCounter: Int32 {
    get {return _storage._filesForceReindexCounter}
    set {_uniqueStorage()._filesForceReindexCounter = newValue}
  }

  /// increased in order to remove indexes and reindex everything. Automatically triggers objects and files reindex(one time only)
  public var idxRebuildCounter: Int32 {
    get {return _storage._idxRebuildCounter}
    set {_uniqueStorage()._idxRebuildCounter = newValue}
  }

  /// DEPRECATED increased in order to perform fulltext indexing for all type of objects (useful when we change fulltext config)
  public var fulltextRebuild: Int32 {
    get {return _storage._fulltextRebuild}
    set {_uniqueStorage()._fulltextRebuild = newValue}
  }

  /// DEPRECATED remove all the fulltext indexes and add to reindex queue after
  public var fulltextErase: Int32 {
    get {return _storage._fulltextErase}
    set {_uniqueStorage()._fulltextErase = newValue}
  }

  public var bundledTemplates: String {
    get {return _storage._bundledTemplates}
    set {_uniqueStorage()._bundledTemplates = newValue}
  }

  /// anytypeProfile and maybe some others in the feature
  public var bundledObjects: Int32 {
    get {return _storage._bundledObjects}
    set {_uniqueStorage()._bundledObjects = newValue}
  }

  public var filestoreKeysForceReindexCounter: Int32 {
    get {return _storage._filestoreKeysForceReindexCounter}
    set {_uniqueStorage()._filestoreKeysForceReindexCounter = newValue}
  }

  public var areOldFilesRemoved: Bool {
    get {return _storage._areOldFilesRemoved}
    set {_uniqueStorage()._areOldFilesRemoved = newValue}
  }

  /// DEPRECATED
  public var areDeletedObjectsReindexed: Bool {
    get {return _storage._areDeletedObjectsReindexed}
    set {_uniqueStorage()._areDeletedObjectsReindexed = newValue}
  }

  public var linksErase: Int32 {
    get {return _storage._linksErase}
    set {_uniqueStorage()._linksErase = newValue}
  }

  public var marketplaceForceReindexCounter: Int32 {
    get {return _storage._marketplaceForceReindexCounter}
    set {_uniqueStorage()._marketplaceForceReindexCounter = newValue}
  }

  public var reindexDeletedObjects: Int32 {
    get {return _storage._reindexDeletedObjects}
    set {_uniqueStorage()._reindexDeletedObjects = newValue}
  }

  public var reindexParticipants: Int32 {
    get {return _storage._reindexParticipants}
    set {_uniqueStorage()._reindexParticipants = newValue}
  }

  public var reindexChats: Int32 {
    get {return _storage._reindexChats}
    set {_uniqueStorage()._reindexChats = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype.model"

extension Anytype_Model_ObjectInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "objectTypeUrls"),
    3: .same(proto: "details"),
    4: .same(proto: "relations"),
    5: .same(proto: "snippet"),
    6: .same(proto: "hasInboundLinks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.objectTypeUrls) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._details) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.relations) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.snippet) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.hasInboundLinks_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.objectTypeUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.objectTypeUrls, fieldNumber: 2)
    }
    try { if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.relations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.relations, fieldNumber: 4)
    }
    if !self.snippet.isEmpty {
      try visitor.visitSingularStringField(value: self.snippet, fieldNumber: 5)
    }
    if self.hasInboundLinks_p != false {
      try visitor.visitSingularBoolField(value: self.hasInboundLinks_p, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_ObjectInfo, rhs: Anytype_Model_ObjectInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.objectTypeUrls != rhs.objectTypeUrls {return false}
    if lhs._details != rhs._details {return false}
    if lhs.relations != rhs.relations {return false}
    if lhs.snippet != rhs.snippet {return false}
    if lhs.hasInboundLinks_p != rhs.hasInboundLinks_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_ObjectDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectDetails"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "details"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._details) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_ObjectDetails, rhs: Anytype_Model_ObjectDetails) -> Bool {
    if lhs._details != rhs._details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_ObjectLinks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectLinks"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inboundIDs"),
    2: .same(proto: "outboundIDs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.inboundIds) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.outboundIds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inboundIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.inboundIds, fieldNumber: 1)
    }
    if !self.outboundIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.outboundIds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_ObjectLinks, rhs: Anytype_Model_ObjectLinks) -> Bool {
    if lhs.inboundIds != rhs.inboundIds {return false}
    if lhs.outboundIds != rhs.outboundIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_ObjectLinksInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectLinksInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inbound"),
    2: .same(proto: "outbound"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.inbound) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.outbound) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inbound.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inbound, fieldNumber: 1)
    }
    if !self.outbound.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outbound, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_ObjectLinksInfo, rhs: Anytype_Model_ObjectLinksInfo) -> Bool {
    if lhs.inbound != rhs.inbound {return false}
    if lhs.outbound != rhs.outbound {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_ObjectInfoWithLinks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectInfoWithLinks"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "info"),
    3: .same(proto: "links"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._links) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._links {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_ObjectInfoWithLinks, rhs: Anytype_Model_ObjectInfoWithLinks) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._info != rhs._info {return false}
    if lhs._links != rhs._links {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_ObjectInfoWithOutboundLinks: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectInfoWithOutboundLinks"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "info"),
    3: .same(proto: "outboundLinks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.outboundLinks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.outboundLinks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outboundLinks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_ObjectInfoWithOutboundLinks, rhs: Anytype_Model_ObjectInfoWithOutboundLinks) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._info != rhs._info {return false}
    if lhs.outboundLinks != rhs.outboundLinks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_ObjectInfoWithOutboundLinksIDs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectInfoWithOutboundLinksIDs"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "info"),
    3: .same(proto: "outboundLinks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.outboundLinks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try { if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.outboundLinks.isEmpty {
      try visitor.visitRepeatedStringField(value: self.outboundLinks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_ObjectInfoWithOutboundLinksIDs, rhs: Anytype_Model_ObjectInfoWithOutboundLinksIDs) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._info != rhs._info {return false}
    if lhs.outboundLinks != rhs.outboundLinks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Model_ObjectStoreChecksums: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ObjectStoreChecksums"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bundledObjectTypes"),
    2: .same(proto: "bundledRelations"),
    3: .same(proto: "bundledLayouts"),
    4: .same(proto: "objectsForceReindexCounter"),
    5: .same(proto: "filesForceReindexCounter"),
    6: .same(proto: "idxRebuildCounter"),
    7: .same(proto: "fulltextRebuild"),
    11: .same(proto: "fulltextErase"),
    8: .same(proto: "bundledTemplates"),
    9: .same(proto: "bundledObjects"),
    10: .same(proto: "filestoreKeysForceReindexCounter"),
    12: .same(proto: "areOldFilesRemoved"),
    13: .same(proto: "areDeletedObjectsReindexed"),
    14: .same(proto: "linksErase"),
    15: .same(proto: "marketplaceForceReindexCounter"),
    16: .same(proto: "reindexDeletedObjects"),
    17: .same(proto: "reindexParticipants"),
    18: .same(proto: "reindexChats"),
  ]

  fileprivate class _StorageClass {
    var _bundledObjectTypes: String = String()
    var _bundledRelations: String = String()
    var _bundledLayouts: String = String()
    var _objectsForceReindexCounter: Int32 = 0
    var _filesForceReindexCounter: Int32 = 0
    var _idxRebuildCounter: Int32 = 0
    var _fulltextRebuild: Int32 = 0
    var _fulltextErase: Int32 = 0
    var _bundledTemplates: String = String()
    var _bundledObjects: Int32 = 0
    var _filestoreKeysForceReindexCounter: Int32 = 0
    var _areOldFilesRemoved: Bool = false
    var _areDeletedObjectsReindexed: Bool = false
    var _linksErase: Int32 = 0
    var _marketplaceForceReindexCounter: Int32 = 0
    var _reindexDeletedObjects: Int32 = 0
    var _reindexParticipants: Int32 = 0
    var _reindexChats: Int32 = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _bundledObjectTypes = source._bundledObjectTypes
      _bundledRelations = source._bundledRelations
      _bundledLayouts = source._bundledLayouts
      _objectsForceReindexCounter = source._objectsForceReindexCounter
      _filesForceReindexCounter = source._filesForceReindexCounter
      _idxRebuildCounter = source._idxRebuildCounter
      _fulltextRebuild = source._fulltextRebuild
      _fulltextErase = source._fulltextErase
      _bundledTemplates = source._bundledTemplates
      _bundledObjects = source._bundledObjects
      _filestoreKeysForceReindexCounter = source._filestoreKeysForceReindexCounter
      _areOldFilesRemoved = source._areOldFilesRemoved
      _areDeletedObjectsReindexed = source._areDeletedObjectsReindexed
      _linksErase = source._linksErase
      _marketplaceForceReindexCounter = source._marketplaceForceReindexCounter
      _reindexDeletedObjects = source._reindexDeletedObjects
      _reindexParticipants = source._reindexParticipants
      _reindexChats = source._reindexChats
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._bundledObjectTypes) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._bundledRelations) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._bundledLayouts) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._objectsForceReindexCounter) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._filesForceReindexCounter) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._idxRebuildCounter) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._fulltextRebuild) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._bundledTemplates) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._bundledObjects) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._filestoreKeysForceReindexCounter) }()
        case 11: try { try decoder.decodeSingularInt32Field(value: &_storage._fulltextErase) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._areOldFilesRemoved) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._areDeletedObjectsReindexed) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._linksErase) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._marketplaceForceReindexCounter) }()
        case 16: try { try decoder.decodeSingularInt32Field(value: &_storage._reindexDeletedObjects) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._reindexParticipants) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._reindexChats) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._bundledObjectTypes.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bundledObjectTypes, fieldNumber: 1)
      }
      if !_storage._bundledRelations.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bundledRelations, fieldNumber: 2)
      }
      if !_storage._bundledLayouts.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bundledLayouts, fieldNumber: 3)
      }
      if _storage._objectsForceReindexCounter != 0 {
        try visitor.visitSingularInt32Field(value: _storage._objectsForceReindexCounter, fieldNumber: 4)
      }
      if _storage._filesForceReindexCounter != 0 {
        try visitor.visitSingularInt32Field(value: _storage._filesForceReindexCounter, fieldNumber: 5)
      }
      if _storage._idxRebuildCounter != 0 {
        try visitor.visitSingularInt32Field(value: _storage._idxRebuildCounter, fieldNumber: 6)
      }
      if _storage._fulltextRebuild != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fulltextRebuild, fieldNumber: 7)
      }
      if !_storage._bundledTemplates.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bundledTemplates, fieldNumber: 8)
      }
      if _storage._bundledObjects != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bundledObjects, fieldNumber: 9)
      }
      if _storage._filestoreKeysForceReindexCounter != 0 {
        try visitor.visitSingularInt32Field(value: _storage._filestoreKeysForceReindexCounter, fieldNumber: 10)
      }
      if _storage._fulltextErase != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fulltextErase, fieldNumber: 11)
      }
      if _storage._areOldFilesRemoved != false {
        try visitor.visitSingularBoolField(value: _storage._areOldFilesRemoved, fieldNumber: 12)
      }
      if _storage._areDeletedObjectsReindexed != false {
        try visitor.visitSingularBoolField(value: _storage._areDeletedObjectsReindexed, fieldNumber: 13)
      }
      if _storage._linksErase != 0 {
        try visitor.visitSingularInt32Field(value: _storage._linksErase, fieldNumber: 14)
      }
      if _storage._marketplaceForceReindexCounter != 0 {
        try visitor.visitSingularInt32Field(value: _storage._marketplaceForceReindexCounter, fieldNumber: 15)
      }
      if _storage._reindexDeletedObjects != 0 {
        try visitor.visitSingularInt32Field(value: _storage._reindexDeletedObjects, fieldNumber: 16)
      }
      if _storage._reindexParticipants != 0 {
        try visitor.visitSingularInt32Field(value: _storage._reindexParticipants, fieldNumber: 17)
      }
      if _storage._reindexChats != 0 {
        try visitor.visitSingularInt32Field(value: _storage._reindexChats, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Model_ObjectStoreChecksums, rhs: Anytype_Model_ObjectStoreChecksums) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bundledObjectTypes != rhs_storage._bundledObjectTypes {return false}
        if _storage._bundledRelations != rhs_storage._bundledRelations {return false}
        if _storage._bundledLayouts != rhs_storage._bundledLayouts {return false}
        if _storage._objectsForceReindexCounter != rhs_storage._objectsForceReindexCounter {return false}
        if _storage._filesForceReindexCounter != rhs_storage._filesForceReindexCounter {return false}
        if _storage._idxRebuildCounter != rhs_storage._idxRebuildCounter {return false}
        if _storage._fulltextRebuild != rhs_storage._fulltextRebuild {return false}
        if _storage._fulltextErase != rhs_storage._fulltextErase {return false}
        if _storage._bundledTemplates != rhs_storage._bundledTemplates {return false}
        if _storage._bundledObjects != rhs_storage._bundledObjects {return false}
        if _storage._filestoreKeysForceReindexCounter != rhs_storage._filestoreKeysForceReindexCounter {return false}
        if _storage._areOldFilesRemoved != rhs_storage._areOldFilesRemoved {return false}
        if _storage._areDeletedObjectsReindexed != rhs_storage._areDeletedObjectsReindexed {return false}
        if _storage._linksErase != rhs_storage._linksErase {return false}
        if _storage._marketplaceForceReindexCounter != rhs_storage._marketplaceForceReindexCounter {return false}
        if _storage._reindexDeletedObjects != rhs_storage._reindexDeletedObjects {return false}
        if _storage._reindexParticipants != rhs_storage._reindexParticipants {return false}
        if _storage._reindexChats != rhs_storage._reindexChats {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
