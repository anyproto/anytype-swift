// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pb/protos/changes.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// the element of change tree used to store and internal apply smartBlock history
public struct Anytype_Change {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ids of previous changes
  public var previousIds: [String] {
    get {return _storage._previousIds}
    set {_uniqueStorage()._previousIds = newValue}
  }

  /// id of the last snapshot
  public var lastSnapshotID: String {
    get {return _storage._lastSnapshotID}
    set {_uniqueStorage()._lastSnapshotID = newValue}
  }

  /// ids of the last changes with details/relations content
  public var previousMetaIds: [String] {
    get {return _storage._previousMetaIds}
    set {_uniqueStorage()._previousMetaIds = newValue}
  }

  /// set of actions to apply
  public var content: [Anytype_Change.Content] {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  /// snapshot - when not null, the Content will be ignored
  public var snapshot: Anytype_Change.Snapshot {
    get {return _storage._snapshot ?? Anytype_Change.Snapshot()}
    set {_uniqueStorage()._snapshot = newValue}
  }
  /// Returns true if `snapshot` has been explicitly set.
  public var hasSnapshot: Bool {return _storage._snapshot != nil}
  /// Clears the value of `snapshot`. Subsequent reads from it will return its default value.
  public mutating func clearSnapshot() {_uniqueStorage()._snapshot = nil}

  /// file keys related to changes content
  public var fileKeys: [Anytype_Change.FileKeys] {
    get {return _storage._fileKeys}
    set {_uniqueStorage()._fileKeys = newValue}
  }

  /// creation timestamp
  public var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  /// version of business logic
  public var version: UInt32 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Snapshot {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// logId -> lastChangeId
    public var logHeads: Dictionary<String,String> = [:]

    /// snapshot data
    public var data: Anytype_Model_SmartBlockSnapshotBase {
      get {return _data ?? Anytype_Model_SmartBlockSnapshotBase()}
      set {_data = newValue}
    }
    /// Returns true if `data` has been explicitly set.
    public var hasData: Bool {return self._data != nil}
    /// Clears the value of `data`. Subsequent reads from it will return its default value.
    public mutating func clearData() {self._data = nil}

    /// all file keys related to doc
    public var fileKeys: [Anytype_Change.FileKeys] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _data: Anytype_Model_SmartBlockSnapshotBase? = nil
  }

  public struct FileKeys {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var hash: String = String()

    public var keys: Dictionary<String,String> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Content {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var value: Anytype_Change.Content.OneOf_Value? = nil

    public var blockCreate: Anytype_Change.BlockCreate {
      get {
        if case .blockCreate(let v)? = value {return v}
        return Anytype_Change.BlockCreate()
      }
      set {value = .blockCreate(newValue)}
    }

    public var blockUpdate: Anytype_Change.BlockUpdate {
      get {
        if case .blockUpdate(let v)? = value {return v}
        return Anytype_Change.BlockUpdate()
      }
      set {value = .blockUpdate(newValue)}
    }

    public var blockRemove: Anytype_Change.BlockRemove {
      get {
        if case .blockRemove(let v)? = value {return v}
        return Anytype_Change.BlockRemove()
      }
      set {value = .blockRemove(newValue)}
    }

    public var blockMove: Anytype_Change.BlockMove {
      get {
        if case .blockMove(let v)? = value {return v}
        return Anytype_Change.BlockMove()
      }
      set {value = .blockMove(newValue)}
    }

    public var blockDuplicate: Anytype_Change.BlockDuplicate {
      get {
        if case .blockDuplicate(let v)? = value {return v}
        return Anytype_Change.BlockDuplicate()
      }
      set {value = .blockDuplicate(newValue)}
    }

    public var relationAdd: Anytype_Change.RelationAdd {
      get {
        if case .relationAdd(let v)? = value {return v}
        return Anytype_Change.RelationAdd()
      }
      set {value = .relationAdd(newValue)}
    }

    public var relationRemove: Anytype_Change.RelationRemove {
      get {
        if case .relationRemove(let v)? = value {return v}
        return Anytype_Change.RelationRemove()
      }
      set {value = .relationRemove(newValue)}
    }

    public var detailsSet: Anytype_Change.DetailsSet {
      get {
        if case .detailsSet(let v)? = value {return v}
        return Anytype_Change.DetailsSet()
      }
      set {value = .detailsSet(newValue)}
    }

    public var detailsUnset: Anytype_Change.DetailsUnset {
      get {
        if case .detailsUnset(let v)? = value {return v}
        return Anytype_Change.DetailsUnset()
      }
      set {value = .detailsUnset(newValue)}
    }

    public var objectTypeAdd: Anytype_Change.ObjectTypeAdd {
      get {
        if case .objectTypeAdd(let v)? = value {return v}
        return Anytype_Change.ObjectTypeAdd()
      }
      set {value = .objectTypeAdd(newValue)}
    }

    public var objectTypeRemove: Anytype_Change.ObjectTypeRemove {
      get {
        if case .objectTypeRemove(let v)? = value {return v}
        return Anytype_Change.ObjectTypeRemove()
      }
      set {value = .objectTypeRemove(newValue)}
    }

    public var storeKeySet: Anytype_Change.StoreKeySet {
      get {
        if case .storeKeySet(let v)? = value {return v}
        return Anytype_Change.StoreKeySet()
      }
      set {value = .storeKeySet(newValue)}
    }

    public var storeKeyUnset: Anytype_Change.StoreKeyUnset {
      get {
        if case .storeKeyUnset(let v)? = value {return v}
        return Anytype_Change.StoreKeyUnset()
      }
      set {value = .storeKeyUnset(newValue)}
    }

    public var storeSliceUpdate: Anytype_Change.StoreSliceUpdate {
      get {
        if case .storeSliceUpdate(let v)? = value {return v}
        return Anytype_Change.StoreSliceUpdate()
      }
      set {value = .storeSliceUpdate(newValue)}
    }

    public var originalCreatedTimestampSet: Anytype_Change.OriginalCreatedTimestampSet {
      get {
        if case .originalCreatedTimestampSet(let v)? = value {return v}
        return Anytype_Change.OriginalCreatedTimestampSet()
      }
      set {value = .originalCreatedTimestampSet(newValue)}
    }

    public var setFileInfo: Anytype_Change.SetFileInfo {
      get {
        if case .setFileInfo(let v)? = value {return v}
        return Anytype_Change.SetFileInfo()
      }
      set {value = .setFileInfo(newValue)}
    }

    public var notificationCreate: Anytype_Change.NotificationCreate {
      get {
        if case .notificationCreate(let v)? = value {return v}
        return Anytype_Change.NotificationCreate()
      }
      set {value = .notificationCreate(newValue)}
    }

    public var notificationUpdate: Anytype_Change.NotificationUpdate {
      get {
        if case .notificationUpdate(let v)? = value {return v}
        return Anytype_Change.NotificationUpdate()
      }
      set {value = .notificationUpdate(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Value: Equatable {
      case blockCreate(Anytype_Change.BlockCreate)
      case blockUpdate(Anytype_Change.BlockUpdate)
      case blockRemove(Anytype_Change.BlockRemove)
      case blockMove(Anytype_Change.BlockMove)
      case blockDuplicate(Anytype_Change.BlockDuplicate)
      case relationAdd(Anytype_Change.RelationAdd)
      case relationRemove(Anytype_Change.RelationRemove)
      case detailsSet(Anytype_Change.DetailsSet)
      case detailsUnset(Anytype_Change.DetailsUnset)
      case objectTypeAdd(Anytype_Change.ObjectTypeAdd)
      case objectTypeRemove(Anytype_Change.ObjectTypeRemove)
      case storeKeySet(Anytype_Change.StoreKeySet)
      case storeKeyUnset(Anytype_Change.StoreKeyUnset)
      case storeSliceUpdate(Anytype_Change.StoreSliceUpdate)
      case originalCreatedTimestampSet(Anytype_Change.OriginalCreatedTimestampSet)
      case setFileInfo(Anytype_Change.SetFileInfo)
      case notificationCreate(Anytype_Change.NotificationCreate)
      case notificationUpdate(Anytype_Change.NotificationUpdate)

    #if !swift(>=4.1)
      public static func ==(lhs: Anytype_Change.Content.OneOf_Value, rhs: Anytype_Change.Content.OneOf_Value) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.blockCreate, .blockCreate): return {
          guard case .blockCreate(let l) = lhs, case .blockCreate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockUpdate, .blockUpdate): return {
          guard case .blockUpdate(let l) = lhs, case .blockUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockRemove, .blockRemove): return {
          guard case .blockRemove(let l) = lhs, case .blockRemove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockMove, .blockMove): return {
          guard case .blockMove(let l) = lhs, case .blockMove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.blockDuplicate, .blockDuplicate): return {
          guard case .blockDuplicate(let l) = lhs, case .blockDuplicate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.relationAdd, .relationAdd): return {
          guard case .relationAdd(let l) = lhs, case .relationAdd(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.relationRemove, .relationRemove): return {
          guard case .relationRemove(let l) = lhs, case .relationRemove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.detailsSet, .detailsSet): return {
          guard case .detailsSet(let l) = lhs, case .detailsSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.detailsUnset, .detailsUnset): return {
          guard case .detailsUnset(let l) = lhs, case .detailsUnset(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectTypeAdd, .objectTypeAdd): return {
          guard case .objectTypeAdd(let l) = lhs, case .objectTypeAdd(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.objectTypeRemove, .objectTypeRemove): return {
          guard case .objectTypeRemove(let l) = lhs, case .objectTypeRemove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.storeKeySet, .storeKeySet): return {
          guard case .storeKeySet(let l) = lhs, case .storeKeySet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.storeKeyUnset, .storeKeyUnset): return {
          guard case .storeKeyUnset(let l) = lhs, case .storeKeyUnset(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.storeSliceUpdate, .storeSliceUpdate): return {
          guard case .storeSliceUpdate(let l) = lhs, case .storeSliceUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.originalCreatedTimestampSet, .originalCreatedTimestampSet): return {
          guard case .originalCreatedTimestampSet(let l) = lhs, case .originalCreatedTimestampSet(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.setFileInfo, .setFileInfo): return {
          guard case .setFileInfo(let l) = lhs, case .setFileInfo(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.notificationCreate, .notificationCreate): return {
          guard case .notificationCreate(let l) = lhs, case .notificationCreate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.notificationUpdate, .notificationUpdate): return {
          guard case .notificationUpdate(let l) = lhs, case .notificationUpdate(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  public struct BlockCreate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var targetID: String = String()

    public var position: Anytype_Model_Block.Position = .none

    public var blocks: [Anytype_Model_Block] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BlockUpdate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var events: [Anytype_Event.Message] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BlockRemove {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var ids: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BlockMove {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var targetID: String = String()

    public var position: Anytype_Model_Block.Position = .none

    public var ids: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct BlockDuplicate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var targetID: String = String()

    public var position: Anytype_Model_Block.Position = .none

    public var ids: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct DetailsSet {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var key: String = String()

    public var value: SwiftProtobuf.Google_Protobuf_Value {
      get {return _value ?? SwiftProtobuf.Google_Protobuf_Value()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    public mutating func clearValue() {self._value = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _value: SwiftProtobuf.Google_Protobuf_Value? = nil
  }

  public struct DetailsUnset {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var key: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct RelationAdd {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var relationLinks: [Anytype_Model_RelationLink] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct RelationRemove {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var relationKey: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ObjectTypeAdd {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var url: String = String()

    public var key: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct ObjectTypeRemove {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var url: String = String()

    public var key: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct StoreKeySet {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var path: [String] = []

    public var value: SwiftProtobuf.Google_Protobuf_Value {
      get {return _value ?? SwiftProtobuf.Google_Protobuf_Value()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    public var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    public mutating func clearValue() {self._value = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _value: SwiftProtobuf.Google_Protobuf_Value? = nil
  }

  public struct StoreKeyUnset {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var path: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct StoreSliceUpdate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var key: String = String()

    public var operation: Anytype_Change.StoreSliceUpdate.OneOf_Operation? = nil

    public var add: Anytype_Change.StoreSliceUpdate.Add {
      get {
        if case .add(let v)? = operation {return v}
        return Anytype_Change.StoreSliceUpdate.Add()
      }
      set {operation = .add(newValue)}
    }

    public var remove: Anytype_Change.StoreSliceUpdate.Remove {
      get {
        if case .remove(let v)? = operation {return v}
        return Anytype_Change.StoreSliceUpdate.Remove()
      }
      set {operation = .remove(newValue)}
    }

    public var move: Anytype_Change.StoreSliceUpdate.Move {
      get {
        if case .move(let v)? = operation {return v}
        return Anytype_Change.StoreSliceUpdate.Move()
      }
      set {operation = .move(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Operation: Equatable {
      case add(Anytype_Change.StoreSliceUpdate.Add)
      case remove(Anytype_Change.StoreSliceUpdate.Remove)
      case move(Anytype_Change.StoreSliceUpdate.Move)

    #if !swift(>=4.1)
      public static func ==(lhs: Anytype_Change.StoreSliceUpdate.OneOf_Operation, rhs: Anytype_Change.StoreSliceUpdate.OneOf_Operation) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.add, .add): return {
          guard case .add(let l) = lhs, case .add(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.remove, .remove): return {
          guard case .remove(let l) = lhs, case .remove(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.move, .move): return {
          guard case .move(let l) = lhs, case .move(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    public struct Add {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var afterID: String = String()

      public var ids: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct Remove {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var ids: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public struct Move {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var afterID: String = String()

      public var ids: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}
  }

  public struct OriginalCreatedTimestampSet {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var ts: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct SetFileInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var fileInfo: Anytype_Model_FileInfo {
      get {return _fileInfo ?? Anytype_Model_FileInfo()}
      set {_fileInfo = newValue}
    }
    /// Returns true if `fileInfo` has been explicitly set.
    public var hasFileInfo: Bool {return self._fileInfo != nil}
    /// Clears the value of `fileInfo`. Subsequent reads from it will return its default value.
    public mutating func clearFileInfo() {self._fileInfo = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _fileInfo: Anytype_Model_FileInfo? = nil
  }

  public struct NotificationCreate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var notification: Anytype_Model_Notification {
      get {return _notification ?? Anytype_Model_Notification()}
      set {_notification = newValue}
    }
    /// Returns true if `notification` has been explicitly set.
    public var hasNotification: Bool {return self._notification != nil}
    /// Clears the value of `notification`. Subsequent reads from it will return its default value.
    public mutating func clearNotification() {self._notification = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _notification: Anytype_Model_Notification? = nil
  }

  public struct NotificationUpdate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: String = String()

    public var status: Anytype_Model_Notification.Status = .created

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Anytype_Change: @unchecked Sendable {}
extension Anytype_Change.Snapshot: @unchecked Sendable {}
extension Anytype_Change.FileKeys: @unchecked Sendable {}
extension Anytype_Change.Content: @unchecked Sendable {}
extension Anytype_Change.Content.OneOf_Value: @unchecked Sendable {}
extension Anytype_Change.BlockCreate: @unchecked Sendable {}
extension Anytype_Change.BlockUpdate: @unchecked Sendable {}
extension Anytype_Change.BlockRemove: @unchecked Sendable {}
extension Anytype_Change.BlockMove: @unchecked Sendable {}
extension Anytype_Change.BlockDuplicate: @unchecked Sendable {}
extension Anytype_Change.DetailsSet: @unchecked Sendable {}
extension Anytype_Change.DetailsUnset: @unchecked Sendable {}
extension Anytype_Change.RelationAdd: @unchecked Sendable {}
extension Anytype_Change.RelationRemove: @unchecked Sendable {}
extension Anytype_Change.ObjectTypeAdd: @unchecked Sendable {}
extension Anytype_Change.ObjectTypeRemove: @unchecked Sendable {}
extension Anytype_Change.StoreKeySet: @unchecked Sendable {}
extension Anytype_Change.StoreKeyUnset: @unchecked Sendable {}
extension Anytype_Change.StoreSliceUpdate: @unchecked Sendable {}
extension Anytype_Change.StoreSliceUpdate.OneOf_Operation: @unchecked Sendable {}
extension Anytype_Change.StoreSliceUpdate.Add: @unchecked Sendable {}
extension Anytype_Change.StoreSliceUpdate.Remove: @unchecked Sendable {}
extension Anytype_Change.StoreSliceUpdate.Move: @unchecked Sendable {}
extension Anytype_Change.OriginalCreatedTimestampSet: @unchecked Sendable {}
extension Anytype_Change.SetFileInfo: @unchecked Sendable {}
extension Anytype_Change.NotificationCreate: @unchecked Sendable {}
extension Anytype_Change.NotificationUpdate: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "anytype"

extension Anytype_Change: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Change"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "previous_ids"),
    2: .standard(proto: "last_snapshot_id"),
    5: .standard(proto: "previous_meta_ids"),
    3: .same(proto: "content"),
    4: .same(proto: "snapshot"),
    6: .same(proto: "fileKeys"),
    7: .same(proto: "timestamp"),
    8: .same(proto: "version"),
  ]

  fileprivate class _StorageClass {
    var _previousIds: [String] = []
    var _lastSnapshotID: String = String()
    var _previousMetaIds: [String] = []
    var _content: [Anytype_Change.Content] = []
    var _snapshot: Anytype_Change.Snapshot? = nil
    var _fileKeys: [Anytype_Change.FileKeys] = []
    var _timestamp: Int64 = 0
    var _version: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _previousIds = source._previousIds
      _lastSnapshotID = source._lastSnapshotID
      _previousMetaIds = source._previousMetaIds
      _content = source._content
      _snapshot = source._snapshot
      _fileKeys = source._fileKeys
      _timestamp = source._timestamp
      _version = source._version
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedStringField(value: &_storage._previousIds) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._lastSnapshotID) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._content) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._snapshot) }()
        case 5: try { try decoder.decodeRepeatedStringField(value: &_storage._previousMetaIds) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._fileKeys) }()
        case 7: try { try decoder.decodeSingularInt64Field(value: &_storage._timestamp) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._version) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._previousIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._previousIds, fieldNumber: 1)
      }
      if !_storage._lastSnapshotID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastSnapshotID, fieldNumber: 2)
      }
      if !_storage._content.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._content, fieldNumber: 3)
      }
      try { if let v = _storage._snapshot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._previousMetaIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._previousMetaIds, fieldNumber: 5)
      }
      if !_storage._fileKeys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._fileKeys, fieldNumber: 6)
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timestamp, fieldNumber: 7)
      }
      if _storage._version != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._version, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change, rhs: Anytype_Change) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._previousIds != rhs_storage._previousIds {return false}
        if _storage._lastSnapshotID != rhs_storage._lastSnapshotID {return false}
        if _storage._previousMetaIds != rhs_storage._previousMetaIds {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._snapshot != rhs_storage._snapshot {return false}
        if _storage._fileKeys != rhs_storage._fileKeys {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._version != rhs_storage._version {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.Snapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".Snapshot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "logHeads"),
    2: .same(proto: "data"),
    3: .same(proto: "fileKeys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.logHeads) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.fileKeys) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.logHeads.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.logHeads, fieldNumber: 1)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.fileKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileKeys, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.Snapshot, rhs: Anytype_Change.Snapshot) -> Bool {
    if lhs.logHeads != rhs.logHeads {return false}
    if lhs._data != rhs._data {return false}
    if lhs.fileKeys != rhs.fileKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.FileKeys: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".FileKeys"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "keys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.keys) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if !self.keys.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.keys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.FileKeys, rhs: Anytype_Change.FileKeys) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.keys != rhs.keys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".Content"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blockCreate"),
    2: .same(proto: "blockUpdate"),
    3: .same(proto: "blockRemove"),
    4: .same(proto: "blockMove"),
    5: .same(proto: "blockDuplicate"),
    50: .same(proto: "relationAdd"),
    51: .same(proto: "relationRemove"),
    100: .same(proto: "detailsSet"),
    101: .same(proto: "detailsUnset"),
    105: .same(proto: "objectTypeAdd"),
    106: .same(proto: "objectTypeRemove"),
    107: .same(proto: "storeKeySet"),
    108: .same(proto: "storeKeyUnset"),
    109: .same(proto: "storeSliceUpdate"),
    110: .same(proto: "originalCreatedTimestampSet"),
    111: .same(proto: "setFileInfo"),
    112: .same(proto: "notificationCreate"),
    113: .same(proto: "notificationUpdate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Anytype_Change.BlockCreate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockCreate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockCreate(v)
        }
      }()
      case 2: try {
        var v: Anytype_Change.BlockUpdate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockUpdate(v)
        }
      }()
      case 3: try {
        var v: Anytype_Change.BlockRemove?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockRemove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockRemove(v)
        }
      }()
      case 4: try {
        var v: Anytype_Change.BlockMove?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockMove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockMove(v)
        }
      }()
      case 5: try {
        var v: Anytype_Change.BlockDuplicate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .blockDuplicate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .blockDuplicate(v)
        }
      }()
      case 50: try {
        var v: Anytype_Change.RelationAdd?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .relationAdd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .relationAdd(v)
        }
      }()
      case 51: try {
        var v: Anytype_Change.RelationRemove?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .relationRemove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .relationRemove(v)
        }
      }()
      case 100: try {
        var v: Anytype_Change.DetailsSet?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .detailsSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .detailsSet(v)
        }
      }()
      case 101: try {
        var v: Anytype_Change.DetailsUnset?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .detailsUnset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .detailsUnset(v)
        }
      }()
      case 105: try {
        var v: Anytype_Change.ObjectTypeAdd?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .objectTypeAdd(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .objectTypeAdd(v)
        }
      }()
      case 106: try {
        var v: Anytype_Change.ObjectTypeRemove?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .objectTypeRemove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .objectTypeRemove(v)
        }
      }()
      case 107: try {
        var v: Anytype_Change.StoreKeySet?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .storeKeySet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .storeKeySet(v)
        }
      }()
      case 108: try {
        var v: Anytype_Change.StoreKeyUnset?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .storeKeyUnset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .storeKeyUnset(v)
        }
      }()
      case 109: try {
        var v: Anytype_Change.StoreSliceUpdate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .storeSliceUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .storeSliceUpdate(v)
        }
      }()
      case 110: try {
        var v: Anytype_Change.OriginalCreatedTimestampSet?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .originalCreatedTimestampSet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .originalCreatedTimestampSet(v)
        }
      }()
      case 111: try {
        var v: Anytype_Change.SetFileInfo?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .setFileInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .setFileInfo(v)
        }
      }()
      case 112: try {
        var v: Anytype_Change.NotificationCreate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .notificationCreate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .notificationCreate(v)
        }
      }()
      case 113: try {
        var v: Anytype_Change.NotificationUpdate?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .notificationUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .notificationUpdate(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .blockCreate?: try {
      guard case .blockCreate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .blockUpdate?: try {
      guard case .blockUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .blockRemove?: try {
      guard case .blockRemove(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .blockMove?: try {
      guard case .blockMove(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .blockDuplicate?: try {
      guard case .blockDuplicate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .relationAdd?: try {
      guard case .relationAdd(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
    }()
    case .relationRemove?: try {
      guard case .relationRemove(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
    }()
    case .detailsSet?: try {
      guard case .detailsSet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
    }()
    case .detailsUnset?: try {
      guard case .detailsUnset(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
    }()
    case .objectTypeAdd?: try {
      guard case .objectTypeAdd(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
    }()
    case .objectTypeRemove?: try {
      guard case .objectTypeRemove(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 106)
    }()
    case .storeKeySet?: try {
      guard case .storeKeySet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 107)
    }()
    case .storeKeyUnset?: try {
      guard case .storeKeyUnset(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 108)
    }()
    case .storeSliceUpdate?: try {
      guard case .storeSliceUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 109)
    }()
    case .originalCreatedTimestampSet?: try {
      guard case .originalCreatedTimestampSet(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 110)
    }()
    case .setFileInfo?: try {
      guard case .setFileInfo(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 111)
    }()
    case .notificationCreate?: try {
      guard case .notificationCreate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
    }()
    case .notificationUpdate?: try {
      guard case .notificationUpdate(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 113)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.Content, rhs: Anytype_Change.Content) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targetId"),
    2: .same(proto: "position"),
    3: .same(proto: "blocks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.targetID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.position) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.blocks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 2)
    }
    if !self.blocks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blocks, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.BlockCreate, rhs: Anytype_Change.BlockCreate) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.blocks != rhs.blocks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "events"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.BlockUpdate, rhs: Anytype_Change.BlockUpdate) -> Bool {
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.BlockRemove, rhs: Anytype_Change.BlockRemove) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockMove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockMove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targetId"),
    2: .same(proto: "position"),
    3: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.targetID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.position) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 2)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.BlockMove, rhs: Anytype_Change.BlockMove) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.BlockDuplicate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".BlockDuplicate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targetId"),
    2: .same(proto: "position"),
    3: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.targetID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.position) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.targetID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetID, fieldNumber: 1)
    }
    if self.position != .none {
      try visitor.visitSingularEnumField(value: self.position, fieldNumber: 2)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.BlockDuplicate, rhs: Anytype_Change.BlockDuplicate) -> Bool {
    if lhs.targetID != rhs.targetID {return false}
    if lhs.position != rhs.position {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.DetailsSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".DetailsSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.DetailsSet, rhs: Anytype_Change.DetailsSet) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.DetailsUnset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".DetailsUnset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.DetailsUnset, rhs: Anytype_Change.DetailsUnset) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.RelationAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".RelationAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "relationLinks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.relationLinks) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.relationLinks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.relationLinks, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.RelationAdd, rhs: Anytype_Change.RelationAdd) -> Bool {
    if lhs.relationLinks != rhs.relationLinks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.RelationRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".RelationRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "relationKey"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.relationKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.relationKey.isEmpty {
      try visitor.visitRepeatedStringField(value: self.relationKey, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.RelationRemove, rhs: Anytype_Change.RelationRemove) -> Bool {
    if lhs.relationKey != rhs.relationKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.ObjectTypeAdd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".ObjectTypeAdd"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.key) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.ObjectTypeAdd, rhs: Anytype_Change.ObjectTypeAdd) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.ObjectTypeRemove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".ObjectTypeRemove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.key) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.ObjectTypeRemove, rhs: Anytype_Change.ObjectTypeRemove) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.StoreKeySet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".StoreKeySet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.path.isEmpty {
      try visitor.visitRepeatedStringField(value: self.path, fieldNumber: 1)
    }
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.StoreKeySet, rhs: Anytype_Change.StoreKeySet) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.StoreKeyUnset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".StoreKeyUnset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.path) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitRepeatedStringField(value: self.path, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.StoreKeyUnset, rhs: Anytype_Change.StoreKeyUnset) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.StoreSliceUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".StoreSliceUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "add"),
    3: .same(proto: "remove"),
    4: .same(proto: "move"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try {
        var v: Anytype_Change.StoreSliceUpdate.Add?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .add(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .add(v)
        }
      }()
      case 3: try {
        var v: Anytype_Change.StoreSliceUpdate.Remove?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .remove(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .remove(v)
        }
      }()
      case 4: try {
        var v: Anytype_Change.StoreSliceUpdate.Move?
        var hadOneofValue = false
        if let current = self.operation {
          hadOneofValue = true
          if case .move(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.operation = .move(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    switch self.operation {
    case .add?: try {
      guard case .add(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .remove?: try {
      guard case .remove(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .move?: try {
      guard case .move(let v)? = self.operation else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.StoreSliceUpdate, rhs: Anytype_Change.StoreSliceUpdate) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.operation != rhs.operation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.StoreSliceUpdate.Add: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.StoreSliceUpdate.protoMessageName + ".Add"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.StoreSliceUpdate.Add, rhs: Anytype_Change.StoreSliceUpdate.Add) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.StoreSliceUpdate.Remove: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.StoreSliceUpdate.protoMessageName + ".Remove"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.StoreSliceUpdate.Remove, rhs: Anytype_Change.StoreSliceUpdate.Remove) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.StoreSliceUpdate.Move: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.StoreSliceUpdate.protoMessageName + ".Move"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "afterId"),
    2: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.afterID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.afterID.isEmpty {
      try visitor.visitSingularStringField(value: self.afterID, fieldNumber: 1)
    }
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.StoreSliceUpdate.Move, rhs: Anytype_Change.StoreSliceUpdate.Move) -> Bool {
    if lhs.afterID != rhs.afterID {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.OriginalCreatedTimestampSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".OriginalCreatedTimestampSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.ts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ts != 0 {
      try visitor.visitSingularInt64Field(value: self.ts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.OriginalCreatedTimestampSet, rhs: Anytype_Change.OriginalCreatedTimestampSet) -> Bool {
    if lhs.ts != rhs.ts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.SetFileInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".SetFileInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fileInfo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fileInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._fileInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.SetFileInfo, rhs: Anytype_Change.SetFileInfo) -> Bool {
    if lhs._fileInfo != rhs._fileInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.NotificationCreate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".NotificationCreate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "notification"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._notification) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._notification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.NotificationCreate, rhs: Anytype_Change.NotificationCreate) -> Bool {
    if lhs._notification != rhs._notification {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Anytype_Change.NotificationUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Anytype_Change.protoMessageName + ".NotificationUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.status != .created {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Anytype_Change.NotificationUpdate, rhs: Anytype_Change.NotificationUpdate) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
